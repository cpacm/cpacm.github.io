<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android项目模块化</title>
      <link href="/2019/11/06/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E6%A8%A1%E5%9D%97%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/11/06/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E6%A8%A1%E5%9D%97%E5%8C%96%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="Android项目模块化"><a href="#Android项目模块化" class="headerlink" title="Android项目模块化"></a>Android项目模块化</h1><h2 id="为何模块化"><a href="#为何模块化" class="headerlink" title="为何模块化"></a>为何模块化</h2><ol><li>减少代码耦合性，能够实现功能业务的拆分</li><li>能够实现业务的快速实现和功能的复用</li><li>单模块开发减少编译时间和实现模块代码的责任制</li><li>实现功能模块的替换和迭代</li></ol><p>其中最重要的是模块的复用和代码的解耦。由于经常会有其他的分支项目加入，所以模块的可复用就显得非常重要。代码解耦可以保证一个业务模块的高效迭代和代码整洁，防止随着项目的推进导致代码的冲突和堆叠。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/module_project.png" alt="项目结构"></p><p>除去 app 壳和 core 核心库以外，所有的模块命名方式为lib+基础库，module_业务</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>整个项目分为四层，以Core为基础的核心功能层，以libarch和各个lib组件的基础层，以module业务为主的模块层，最后是以app为中心的应用层。</p><h3 id="核心层"><a href="#核心层" class="headerlink" title="核心层"></a>核心层</h3><p>Core提供了网络请求，数据库，文件缓存，下载，Utils等一系列核心功能，为上层服务架设基础设施。<br><img src="http://cpacmblog.oss-cn-hangzhou.aliyuncs.com/module_core.png" alt="基础功能"></p><p>网络框架选择了 <code>Okhttp3+Retrofit2</code> 的方式，这样可以有一个好处，可以在Core中预先统一设置请求<code>OkHttpClinet</code>的<code>Header</code>参数和添加一些功能性Interceptor,如日志<code>HttpLoggingInterceptor</code>，之后再在各个模块中定义Retrofit 服务器接口，实现接口的分发。</p><p>数据库使用Google推荐的<code>Room</code>，<code>Room</code>是一个对象关系映射(ORM)库。<code>Room</code>抽象了<code>SQLite</code>的使用，可以在充分利用<code>SQLite</code>的同时访问流畅的数据库。其设计原理为使用apt查找注解后再拼凑sql语句。</p><p>文件缓存为常用的<code>SharedPreferences</code>，抽象出<code>AbstractSharePreferences</code>,实现每个模块生成一个<code>preferences</code></p><p>下载（暂定）使用<code>FileDownloader</code></p><h3 id="基础库"><a href="#基础库" class="headerlink" title="基础库"></a>基础库</h3><p><code>libarch</code>属于模块基础库，提供统一的主题，样式和基础化功能</p><ol><li>主题模块—— 主要将要重复使用的<code>Style,Color,Dimen,Drawable</code>等这些资源放到同一个模块下以方便其他各个子模块的调用。包括app图标，分为方形和圆形；<br>App默认的style及其各个衍生版本</li></ol><ul><li>AppTheme  基础主题样式</li><li>AppTheme.NoActionBar  使用ToolBar的App默认样式</li><li>AppTheme.Immersive  沉浸式样式</li><li>AppTheme.Full 全屏样式  常用颜色和app默认三原色:colorPrimary,colorPrimaryDark,colorAccent；常用间距大小和字体大小<br>line_height系列和text字体系列;常用短语等；</li></ul><ol><li>基于的 <code>ARouter</code> 的路由配置和c/s服务模型通信；</li><li>提供项目架构，mvp与mvvm两种模式；</li><li>通用埋点等（如友盟），时长统计（TODO）</li></ol><h3 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h3><p>lib组件库一般不依赖任何基础库，包括<code>Core</code>和<code>libarch</code>，它的初衷只是为了实现特定的某种功能，纯粹而又优雅。</p><ul><li><code>liblist</code>-通用的下拉上拉列表控件</li><li><code>libreader</code>-图文阅读器</li></ul><h3 id="业务模块"><a href="#业务模块" class="headerlink" title="业务模块"></a>业务模块</h3><p>module_业务是代码的主要生产区，主要以业务功能进行划分。</p><p><img src="http://cpacmblog.oss-cn-hangzhou.aliyuncs.com/module_module.png" alt="模块结构"></p><p>我们所说的模块化一般指的就是将业务分割成多个模块，并使其能够单独运行。如上图所示，结构中包括：</p><ul><li>debug文件夹包含一份单独模块运行的<code>AndroidMainfest</code>文件；</li><li>db用于保存模块内的数据库;</li><li>model含有业务实体类bean和网络请求接口http;</li><li>service 包含用于c/s通信的service实现类;</li><li>singleton 是单模块运行时需要的帮助类，一般包括一个<code>Application</code>和入口<code>MainActivity</code>;</li><li>ui 业务界面与逻辑</li><li>utils 常用帮助类<br>可以看到整个模块结构实际上与普通的项目结构很类似。</li></ul><h3 id="壳"><a href="#壳" class="headerlink" title="壳"></a>壳</h3><p>app在模块化项目中担任的职责就弱了很多，它只是作为一个壳承担程序入口的作用。</p><h2 id="如何实现多模块"><a href="#如何实现多模块" class="headerlink" title="如何实现多模块"></a>如何实现多模块</h2><h3 id="单模块"><a href="#单模块" class="headerlink" title="单模块"></a>单模块</h3><p>我们使用 Gradle 控制一个模块是否是单模块。<br>一个模块能否单独运行需要满足以下几个条件：</p><ol><li>gradle中需要 apply plugin:’com.android.application’</li><li>需要一个application和一个默认入口Activity</li></ol><p>所有的条件都可以在 gradle 中控制<br>在 <code>config.gradle</code> 统一控制<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">modules = [</span><br><span class="line">           <span class="string">isAuthModule   :</span> <span class="literal">true</span>,</span><br><span class="line">           <span class="string">isReaderModule :</span> <span class="literal">true</span>,</span><br><span class="line">           <span class="string">isNimModule    :</span> <span class="literal">true</span>,</span><br><span class="line">           <span class="string">isZhumuModule  :</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">           isServiceModule:</span> <span class="literal">true</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>根据条件判断<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> isModule = rootProject.ext.modules.isAuthModule</span><br><span class="line"><span class="keyword">if</span> (isModule) &#123;</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">&#125;</span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.android.compileSdkVersion</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isModule) &#123;</span><br><span class="line">                manifest.srcFile <span class="string">'src/main/debug/AndroidManifest.xml'</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                manifest.srcFile <span class="string">'src/main/AndroidManifest.xml'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后就需要在 singleton 文件夹里加入单独运行时需要的application和入口Activity</p><h3 id="模块间跳转"><a href="#模块间跳转" class="headerlink" title="模块间跳转"></a>模块间跳转</h3><p>使用阿里开源的ARouter进行路由配置和跳转<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(ARouterUtils.AROUTER_USER_TASK).navigation()</span><br></pre></td></tr></table></figure></p><p>这里我将所有的路由的路径放在统一一个路由表中<code>ARouterUtils</code>方便管理和修改</p><h3 id="模块间通信"><a href="#模块间通信" class="headerlink" title="模块间通信"></a>模块间通信</h3><p>利用 ARouter 的 IProvider作为c/s通信的基础框架。<br>通常我会将 Service 服务接口下沉到 libarch 中，方便所有模块能够方便找到。而实现类 ServiceImpl 则是放入各个模块之中，对外提供服务功能。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libarch 的 provider 包中</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AppService</span> : <span class="type">IProvider &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initNimRedDot</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">detailNavigation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块中的实现类</span></span><br><span class="line"><span class="meta">@Route(path = <span class="meta-string">"/app/main"</span>, name = <span class="meta-string">"APP主框架"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceImpl</span> :<span class="type">AppService &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">detailNavigation</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initNimRedDot</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">(context: <span class="type">Context</span>?)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单模块间数据共享"><a href="#单模块间数据共享" class="headerlink" title="单模块间数据共享"></a>单模块间数据共享</h3><p>当我们在单模块运行时有时候会需要其他模块的数据，比如用户的登录信息等，这时候就需要能够进行跨进程传数据的方法，即IPC方式。<br>常见的IPC方法有：文件，<code>Intent</code>传递，<code>ContentProvider</code>，<code>SharedPreferences</code>,<code>Messagers</code>，<code>Socket</code>和<code>aidl</code>等几种方法。由于我们要自定义方法所以最佳选择为<code>aidl</code>，次级为<code>ContentProvider</code>。我选择的是通过ContentPriovider。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountContentProvider</span> : <span class="type">ContentProvider</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> AUTHORITY = <span class="string">"com.dracom.android.accountprovider"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mMatcher: UriMatcher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        mMatcher = UriMatcher(UriMatcher.NO_MATCH);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        mMatcher.addURI(AUTHORITY, <span class="string">"token"</span>, <span class="number">1</span>)</span><br><span class="line">        mMatcher.addURI(AUTHORITY, <span class="string">"accId"</span>, <span class="number">2</span>)</span><br><span class="line">        mMatcher.addURI(AUTHORITY, <span class="string">"nimToken"</span>, <span class="number">3</span>)</span><br><span class="line">        mMatcher.addURI(AUTHORITY, <span class="string">"phone"</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若URI资源路径 = content://cn.scu.myprovider/user ，1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(uri: <span class="type">Uri</span>, values: <span class="type">ContentValues</span>?)</span></span>: Uri? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(uri: <span class="type">Uri</span>, values: <span class="type">ContentValues</span>?, selection: <span class="type">String</span>?, selectionArgs: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(uri: <span class="type">Uri</span>, selection: <span class="type">String</span>?, selectionArgs: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getType</span><span class="params">(uri: <span class="type">Uri</span>)</span></span>: String? &#123;</span><br><span class="line">        <span class="keyword">val</span> userInfo = UserSharedPreferences.getInstance(context).userInfo</span><br><span class="line">        <span class="keyword">when</span> (mMatcher.match(uri)) &#123;</span><br><span class="line">            <span class="number">1</span> -&gt; <span class="keyword">return</span> userInfo.loginToken</span><br><span class="line">            <span class="number">2</span> -&gt; <span class="keyword">return</span> userInfo.accId</span><br><span class="line">            <span class="number">3</span> -&gt; <span class="keyword">return</span> userInfo.token</span><br><span class="line">            <span class="number">4</span> -&gt; <span class="keyword">return</span> userInfo.phoneNumber</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">query</span><span class="params">(uri: <span class="type">Uri</span>, projection: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?, selection: <span class="type">String</span>?, selectionArgs: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?, sortOrder: <span class="type">String</span>?)</span></span>: Cursor? &#123;</span><br><span class="line">        <span class="keyword">if</span> (mMatcher.match(uri) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> userToken = UserSharedPreferences.getInstance(context).userInfo.loginToken</span><br><span class="line">            <span class="keyword">val</span> cursor = MatrixCursor(arrayOf(CURSOR_COLUMN_NAME, CURSOR_COLUMN_VALUE))</span><br><span class="line">            cursor.addRow(arrayListOf(<span class="string">"user_token"</span>, userToken))</span><br><span class="line">            <span class="keyword">return</span> cursor</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跨进程数据读取辅助类<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> MultiProcessSpUtils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> CURSOR_COLUMN_NAME = <span class="string">"cursor_name"</span></span><br><span class="line">    <span class="keyword">val</span> CURSOR_COLUMN_VALUE = <span class="string">"cursor_value"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> AUTH_MODULE_AUTHORITY = <span class="string">"content://com.dracom.android.accountprovider/"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userToken: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserToken</span><span class="params">(context: <span class="type">Context</span>)</span></span>: String? &#123;</span><br><span class="line">        <span class="keyword">val</span> cr = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> uri = Uri.parse(AUTH_MODULE_AUTHORITY + <span class="string">"token"</span>)</span><br><span class="line">        <span class="keyword">return</span> cr.getType(uri)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserAccId</span><span class="params">(context: <span class="type">Context</span>)</span></span>: String? &#123;</span><br><span class="line">        <span class="keyword">val</span> cr = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> uri = Uri.parse(AUTH_MODULE_AUTHORITY + <span class="string">"accId"</span>)</span><br><span class="line">        <span class="keyword">return</span> cr.getType(uri)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getNimToken</span><span class="params">(context: <span class="type">Context</span>)</span></span>: String? &#123;</span><br><span class="line">        <span class="keyword">val</span> cr = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> uri = Uri.parse(AUTH_MODULE_AUTHORITY + <span class="string">"nimToken"</span>)</span><br><span class="line">        <span class="keyword">return</span> cr.getType(uri)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>有些手机在应用未开启时通过<code>ContentProvider</code>跨应用访问数据若是没有自启动权限则会导致访问失败</p></blockquote><h2 id="路由与通信"><a href="#路由与通信" class="headerlink" title="路由与通信"></a>路由与通信</h2><p>整个多模块架构中最重要的角色“路由”和“通信”都是使用ARouter进行担任。如果不使用<code>ARouter</code>框架的话也可以简单实现路由和通信的功能。</p><ol><li>路由：在模块初始化的时候将需要进行路由配置的Activity保存到一个路由<key,class>的路由映射表中，统一管理，统一查找。也可以参考Retrofit方式，直接定义跳转Java接口，如果需要传递额外参数，则以函数参数的方式定义。这个Java接口是没有实现类的，可以使用动态代理方式。</key,class></li><li>通信：也是采取先注册的方式获取声明的Class类，之后可以通过反射生成类来获取对象。</li></ol><p>除去运行时注册的这种方法外，还有两种方式，一种是采用APT通过编译时期对注解的处理生成处理类；<br>另外一种则是通过Gradle Transform，这是Android Gradle编译提供的一个接口，可以供开发自定义一些功能，而我们就可以根据这个功能生成映射匹配，这种方式和APT类似，APT是运行在代码编译时期，而且Transform是直接扫描class，然后再生成新的class，class中包含Map映射信息。修改class文件，使用的是javassist一个第三方库。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模块化架构主要思路就是分而治之，把依赖整理清楚，减少代码冗余和耦合，在把代码抽取到各自的模块后，了解各个模块的通信方式，以及可能发生的问题，规避问题或者解决问题。最后为了开发和调试方便，开发一些周边工具，帮助开发更好的完成任务。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 高级进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cantos7下python3.7以及scrapy安装手册</title>
      <link href="/2019/10/23/cantos7%E4%B8%8Bpython3.7%E4%BB%A5%E5%8F%8Ascrapy%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/"/>
      <url>/2019/10/23/cantos7%E4%B8%8Bpython3.7%E4%BB%A5%E5%8F%8Ascrapy%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="cantos7下python3-7以及scrapy安装手册"><a href="#cantos7下python3-7以及scrapy安装手册" class="headerlink" title="cantos7下python3.7以及scrapy安装手册"></a>cantos7下python3.7以及scrapy安装手册</h1><h2 id="安装python3最新版"><a href="#安装python3最新版" class="headerlink" title="安装python3最新版"></a>安装python3最新版</h2><p>一般来说，centos都会自带一个python2的版本，所以这时候就必须兼容python2和python3的版本</p><h3 id="预先安装"><a href="#预先安装" class="headerlink" title="预先安装"></a>预先安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br><span class="line"><span class="comment"># 或者直接安装</span></span><br><span class="line">yum groupinstall development tools</span><br><span class="line">yun install python-devel</span><br></pre></td></tr></table></figure><p>其中重要的是gcc(用来编译python)和openssl</p><h3 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h3><p>不推荐使用最新的python代码，有可能相应的框架并未支持，这里选择的是python3.7.3<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz</span><br></pre></td></tr></table></figure></p><p>之后配置编译再安装，这里注意的是需要带上openssl  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl-devel # 确定openssl的已安装</span><br><span class="line">./configure --prefix=/usr/local/python3 --with-ssl=openssl</span><br></pre></td></tr></table></figure><p>配置过程中有输出以下内容说明成功<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">checking whether compiling and linking against OpenSSL works... yes</span><br><span class="line">checking <span class="keyword">for</span> X509_VERIFY_PARAM_set1_host <span class="keyword">in</span> libssl... yes</span><br></pre></td></tr></table></figure></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>其中上面配置编译的 python3 将是编译完成后python3的安装地址<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></p><p>完成后创建软链接,这样直接python就能直接使用python3<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure></p><p>修改 yum 为 python2.7<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure></p><p>把文件开头第一行的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python改成#!/usr/bin/python2.7  这样就可以了。</span></span><br></pre></td></tr></table></figure></p><p>查看一下链接情况：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll -a python* </span><br><span class="line">python -V</span><br></pre></td></tr></table></figure></p><h2 id="pip3和virtualenv"><a href="#pip3和virtualenv" class="headerlink" title="pip3和virtualenv"></a>pip3和virtualenv</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python3-pip</span><br><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>创建并激活虚拟环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virtualenv scrapy</span><br><span class="line">source scrapy/bin/activate</span><br><span class="line">deactivate <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure></p><h2 id="安装-scrapy"><a href="#安装-scrapy" class="headerlink" title="安装 scrapy"></a>安装 scrapy</h2><p>pip3 install scrapy<br>以上基本就没问题了</p><p>pip3 install PyMySQL<br>pip3 install urllib3</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境部署 </tag>
            
            <tag> Linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止服务器SSH被暴力破解</title>
      <link href="/2019/09/23/%E9%98%B2%E6%AD%A2%E6%9C%8D%E5%8A%A1%E5%99%A8SSH%E8%A2%AB%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
      <url>/2019/09/23/%E9%98%B2%E6%AD%A2%E6%9C%8D%E5%8A%A1%E5%99%A8SSH%E8%A2%AB%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="防止服务器SSH暴力破解"><a href="#防止服务器SSH暴力破解" class="headerlink" title="防止服务器SSH暴力破解"></a>防止服务器SSH暴力破解</h1><p>SH端口为22，如果有看登入记录会发现一旦IP地址暴露到网络，每时每刻都有人在尝试破解密码，每次登录都能看到成百上千，有时甚至几万的失败次数。</p><p>而修改端口则是最一劳永逸的办法，只要没有人定点爆破的话基本上就足够安全了。</p><h2 id="手动修改端口"><a href="#手动修改端口" class="headerlink" title="手动修改端口"></a>手动修改端口</h2><p>修改ssh配置文件并重启ssh服务</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到Port行，去掉头部的#，修改为自定义端口（10000以上）</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian / Ubuntu</span></span><br><span class="line">service ssh restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS / RHEL</span></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>这是方法效率最高，因为90%以上的通过脚本的暴力破解都是盯着22端口去，很少有人会耗费精力扫描其他端口，除非被特殊照顾。</p><h2 id="脚本添加ip到host-deny"><a href="#脚本添加ip到host-deny" class="headerlink" title="脚本添加ip到host.deny"></a>脚本添加ip到host.deny</h2><p>在 <code>/var/log/secure</code>中，可以查看所有的ssh访问记录，通过命令行 <code>#cat /var/log/secure | grep Failed</code> 统计失败的ip访问</p><h3 id="添加-allow"><a href="#添加-allow" class="headerlink" title="添加 allow"></a>添加 allow</h3><p>先把始终允许的IP填入 <code>/etc/hosts.allow</code>，这很重要！比如：</p><blockquote><p>sshd：132.213.:allow</p></blockquote><h3 id="脚本添加-deny"><a href="#脚本添加-deny" class="headerlink" title="脚本添加 deny"></a>脚本添加 deny</h3><p><code>/etc/hosts.deny</code> 中添加禁止ip,脚本如下：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Denyhosts SHELL SCRIPT</span><br><span class="line"></span><br><span class="line">cat /var/log/secure|awk '/Failed/&#123;<span class="built_in">print</span> $(NF-<span class="number">3</span>)&#125;'|sort|uniq -c|awk '&#123;<span class="built_in">print</span> $<span class="number">2</span>"=" $<span class="number">1</span>;&#125;' &gt;/root/blocklist.txt</span><br><span class="line">DEFINE="<span class="number">10</span>"</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat /root/blocklist.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        IP=`<span class="built_in">echo</span> $i|awk -F= '&#123;<span class="built_in">print</span> $<span class="number">1</span>&#125;'`</span><br><span class="line">        NUM=`<span class="built_in">echo</span> $i|awk -F= '&#123;<span class="built_in">print</span> $<span class="number">2</span>&#125;'`</span><br><span class="line">        <span class="keyword">if</span> [ $NUM -gt $DEFINE ]</span><br><span class="line">        then</span><br><span class="line">                ipExists=`grep $IP /etc/hosts.deny |grep -v grep |wc -l`</span><br><span class="line">                <span class="keyword">if</span> [ $ipExists -lt <span class="number">1</span> ]</span><br><span class="line">                then</span><br><span class="line">                <span class="built_in">echo</span> "sshd:$IP" &gt;&gt; /etc/hosts.deny</span><br><span class="line">                fi</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h3 id="定时任务-10分钟一次"><a href="#定时任务-10分钟一次" class="headerlink" title="定时任务 10分钟一次"></a>定时任务 10分钟一次</h3><blockquote><p>crontab -e<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/<span class="number">10</span> * * * *  sh /usr/local/bin/secure_ssh.sh</span><br></pre></td></tr></table></figure></p></blockquote><p>在vim中 i表示进入编辑，esc退出编辑 :wq保存退出 :q!不保存退出</p><p>最后查看屏蔽列表 <code>cat /root/blocklist.txt</code></p><h2 id="一键脚本Fail2ban"><a href="#一键脚本Fail2ban" class="headerlink" title="一键脚本Fail2ban"></a>一键脚本Fail2ban</h2><p><a href="https://github.com/FunctionClub/Fail2ban" target="_blank" rel="noopener">Fail2ban</a>是Github上的一键脚本<br>功能齐全，支持 <strong>Centos 6/7</strong>  <strong>Ubuntu 14.04/16.10</strong> <strong>Debian 7/8</strong> (x86/x64)</p><ol><li>自助修改SSH端口</li><li>自定义最高封禁IP的时间（以小时为单位）</li><li>自定义SSH尝试连接次数</li><li>一键完成SSH防止暴力破解</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/fail2ban.sh &amp;&amp; bash fail2ban.sh <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee fail2ban.log</span><br></pre></td></tr></table></figure><ol><li>第一步选择是否修改SSH端口。</li><li>第二部输入最多尝试输入SSH连接密码的次数</li><li>第三部输入每个恶意IP的封禁时间（单位：小时）</li></ol><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/uninstall.sh &amp;&amp; bash uninstall.sh</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果你需要更改SSH端口，请记得在防火墙或者安全组中开放新的SSH端口<br>安装完成后请会重启SSH服务，请重新连接SSH会话<br>若出现SSH无法连接的情况，请检查是否修改过SSH端口，请填写写改后的正确端口进行连接</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境部署 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF转化图片及其优化</title>
      <link href="/2019/09/06/PDF%E8%BD%AC%E5%8C%96%E5%9B%BE%E7%89%87%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
      <url>/2019/09/06/PDF%E8%BD%AC%E5%8C%96%E5%9B%BE%E7%89%87%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="PDF转化图片及其优化"><a href="#PDF转化图片及其优化" class="headerlink" title="PDF转化图片及其优化"></a>PDF转化图片及其优化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在打印发票的情况下，由于没有确定的发票模板格式，所以需要将第三方提供的发票pdf文件转换为图片，打印机直接进行图片打印。但热敏打印机在图片打印上并不具有优势，所以需要对整个过程 pdf-&gt;图片，图片-&gt;打印 进行一定的优化。</p><h2 id="pdf转图片"><a href="#pdf转图片" class="headerlink" title="pdf转图片"></a>pdf转图片</h2><p>网上常见的开源pdf转换库有pdf-box,pdfium,itext等。</p><h3 id="PDFBox"><a href="#PDFBox" class="headerlink" title="PDFBox"></a>PDFBox</h3><p><a href="https://pdfbox.apache.org/" target="_blank" rel="noopener">PDFBox</a>由Apache提供，Java实现的PDF文档协作类库，提供PDF文档的创建、处理以及文档内容提取功能，也包含了一些命令行实用工具。<br><code>PDFBox</code>最新的版本为 <code>2019-06-27</code> 的 <code>2.0.16</code>，最新特征包括：<strong>获取Unicode文字</strong>、<strong>分离合并PDF</strong>、<strong>支持pdf表格文字的读取和填写</strong>、<strong>根据PDF / A-1b标准验证PDF文件</strong>、<strong>可以使用Java标准打印Api打印pdf</strong>、<strong>将PDF以图片格式（PNG和JPEG）保存</strong>、<strong>以图文创建pdf</strong>和<strong>数字签名pdf</strong><br>Android上有一个库，名为<a href="https://github.com/TomRoush/PdfBox-Android/" target="_blank" rel="noopener">PdfBox-Android</a>,提供了Android侧的使用库，但是基于<code>PDFBox 1.8</code>版本，在使用中会有一些字体上渲染的问题。</p><blockquote><p>tip: <strong>PdfBox-Android</strong>上有一个基于<code>PDFBox 2.0</code>版本的分支，基本使用没有问题。根据作者本人所说是因为 <code>pdfbox 2.0</code>还在一直更新，所以就一直没有合并分支。</p></blockquote><p>简单的pdf转图片代码示例，需要传入pdf文件地址<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">pdfBoxTest</span><span class="params">(path: String)</span>: Bitmap? </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Load in an already created PDF</span></span><br><span class="line">        val document = PDDocument.load(File(path))</span><br><span class="line">        <span class="comment">// Create a renderer for the document</span></span><br><span class="line">        val renderer = PDFRenderer(document)</span><br><span class="line">        <span class="comment">// Render the image to an RGB Bitmap</span></span><br><span class="line">        val pageImage = renderer.renderImage(<span class="number">0</span>, <span class="number">1f</span>, Bitmap.Config.RGB_565)</span><br><span class="line">        saveBitmapFile(pageImage,<span class="string">"box"</span>)</span><br><span class="line">        <span class="comment">// Save the render result to an image</span></span><br><span class="line">        <span class="keyword">return</span> pageImage</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">        Log.e(<span class="string">"PdfBox-Android-Sample"</span>, <span class="string">"Exception thrown while rendering file"</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>预览图如下：</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/pdfbox.png" alt="pdfbox转图片"></p><p>log中输出 <code>No glyph for 28246 (CID 07b5) in font STSong-Light\n No glyph for 31246 (CID 0da5) in font KaiTi_GB2312</code> 即在Android系统没有找到 <code>KaiTi_GB2312</code>字体，导致无法正常显示中文。</p><h3 id="pdfium"><a href="#pdfium" class="headerlink" title="pdfium"></a>pdfium</h3><p><a href="https://pdfium.googlesource.com/pdfium/" target="_blank" rel="noopener">pdfium</a>由Google开源提供，C++实现，<code>pdfium</code>是用在chrome中显示pdf文件和打印预览。<br>由于<code>pdfium</code>是由 c++ 实现的，所以要想在 Android 中使用必须要自己进行编译成对应架构的so库，当然也可以直接使用别人编译好的第三方库。<br><a href="https://github.com/barteksc/PdfiumAndroid" target="_blank" rel="noopener">PdfiumAndroid</a>是集成<code>pdfium</code>提供给Android使用的一个库，支持 mips,arm,x86（包括所有64版本）架构。</p><blockquote><p>tip: <strong><a href="https://github.com/barteksc/AndroidPdfViewer" target="_blank" rel="noopener">AndroidPdfViewer</a> 一款基于<code>pdfium</code>用于阅读pdf的控件</strong></p></blockquote><p>简单代码示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">pdfiumTest</span><span class="params">(path: String)</span>: Bitmap </span>&#123;</span><br><span class="line">    val mPdfCore = PdfiumCore(<span class="keyword">this</span>);</span><br><span class="line">    val mPdfDoc = mPdfCore.newDocument(ParcelFileDescriptor.open(File(path), ParcelFileDescriptor.MODE_READ_WRITE))</span><br><span class="line">    val mPageCount = mPdfCore.getPageCount(mPdfDoc)</span><br><span class="line">    val i = <span class="number">0</span></span><br><span class="line">    mPdfCore.openPage(mPdfDoc, i)</span><br><span class="line"></span><br><span class="line">    val width = mPdfCore.getPageWidthPoint(mPdfDoc, i)</span><br><span class="line">    val height = mPdfCore.getPageHeightPoint(mPdfDoc, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ARGB_8888 - best quality, high memory usage, higher possibility of OutOfMemoryError</span></span><br><span class="line">    <span class="comment">// RGB_565 - little worse quality, twice less memory usage</span></span><br><span class="line">    val bitmap = Bitmap.createBitmap(width, height,</span><br><span class="line">            Bitmap.Config.RGB_565)</span><br><span class="line"></span><br><span class="line">    mPdfCore.renderPageBitmap(mPdfDoc, bitmap, i, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            width, height, <span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">    saveBitmapFile(bitmap, <span class="string">"ium"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bitmap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>预览图如下：</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/pdfium.png" alt="pdfium转图片"></p><p>文字能够正确的渲染，但缺点也很明显，图片质量模糊即便是设置成<code>Bitmap.Config.ARGB_8888</code></p><h3 id="比对与优化"><a href="#比对与优化" class="headerlink" title="比对与优化"></a>比对与优化</h3><p>字体库缺失的问题在Linux上可能比较好解决，但在Android上，若想要添加额外的字体则需要添加自定义的字体库文件到 <code>frameworks/base/data/fonts</code> 文件中，也就是说需要重新编译 Android Framwork或者联系厂商修改。整个过程繁杂且周期长，而且还不确定是否能够覆盖所有的第三方字体。</p><p>图片质量模糊可以通过调整 <code>pdfium</code> 渲染的 bitmap 大小进行优化，下图是将 bitmap 放大两倍后进行渲染再缩放回来的预览图，明显清晰不少。。很神奇</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/pdfiumX2.png" alt="pdfium转化图片 X2"></p><p>虽然<code>PDFBox</code>在pdf上可能支持的功能更多，但是在转图片的表现上优先选择 <code>pdfium</code></p><blockquote><p>但是在 Android 5.1 上即便使用 pdfium 也会出现字体缺失（出现方块）的情况，而在 Android 7 上没有，应该是Android7的字体库比Android5携带更多的字体吧</p></blockquote><h2 id="图片转Byte数据优化"><a href="#图片转Byte数据优化" class="headerlink" title="图片转Byte数据优化"></a>图片转Byte数据优化</h2><p>热敏打印机需要接受 bitmap 的 byte数据才能进行图片的打印，又因为热敏打印机只能打印黑白两色，所有可以针对图片做灰度化及二值化的处理。</p><p>灰度化代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">grayPixle</span><span class="params">(<span class="keyword">int</span> pixel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> red=(pixel &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">16</span>;<span class="comment">//获取r分量</span></span><br><span class="line">    <span class="keyword">int</span> green= (pixel &amp; <span class="number">0x0000ff00</span>)  &gt;&gt; <span class="number">8</span>;<span class="comment">//获取g分量</span></span><br><span class="line">    <span class="keyword">int</span> blue= pixel &amp; <span class="number">0x000000ff</span>;<span class="comment">//获取b分量</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (red*<span class="number">0.3f</span>+green*<span class="number">0.59f</span>+blue*<span class="number">0.11f</span>);<span class="comment">//加权平均法进行灰度化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在RGB模型中，当R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值。因此，灰度图每个像素只需一个字节存放灰度值，灰度范围为0-255.一般有分量法 、最大值法、平均值法、加权平均法对彩色图像进行灰度化。<br>加权平均法：由于人眼对绿色的敏感最高，对蓝色敏感最低，因此，按下式对RGB三分量进行加权平均能得到比较合理的灰度图像。<br>Gray=0.30R+0.59G+0.11B</p></blockquote><p>获取灰度值后可以根据一个阈值来调整图像的黑白比例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">getSingleColorBitmap</span><span class="params">(Bitmap bitmap, @ColorInt <span class="keyword">int</span> bgColor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] pix = <span class="keyword">new</span> <span class="keyword">int</span>[bitmap.getWidth() * bitmap.getHeight()];</span><br><span class="line">    <span class="keyword">boolean</span> isBitmapEmpty = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; bitmap.getHeight(); y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; bitmap.getWidth(); x++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = y * bitmap.getWidth() + x;</span><br><span class="line">            pix[index] = WHITE;</span><br><span class="line">            isBitmapEmpty = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> curColor = bitmap.getPixel(x, y);</span><br><span class="line">            <span class="keyword">int</span> alpha = Color.alpha(curColor);</span><br><span class="line">            <span class="keyword">int</span> avg = grayPixle(curColor);</span><br><span class="line">            <span class="keyword">if</span> (avg &gt;= <span class="number">200</span>) &#123;  <span class="comment">//亮度：avg&gt;=126</span></span><br><span class="line">                <span class="comment">//设置颜色</span></span><br><span class="line">                pix[index] = Color.argb(alpha, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);<span class="comment">// white</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pix[index] = Color.argb(alpha, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">// black</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isBitmapEmpty) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bitmap.setPixels(pix, <span class="number">0</span>, bitmap.getWidth(), <span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight());</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 <code>avg&gt;=200</code>中200作为一个阈值，越接近255，黑色部分越多，反之黑色部分越少。</p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>当前只选择了 <code>PDFBox</code> 和 <code>PDFium</code> 比较有代表性的两个库进行比对，而且还没有算上 <code>PDFBox</code> 的2.0分支，样本案例有点少。从结论上看 <code>PDFBox</code> 的功能性是强于 <code>PDFium</code> 的，但只是单论阅读功能的话，<code>PDFium</code>的支持更加完善，以上。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热敏打印机技术报告</title>
      <link href="/2019/09/03/%E7%83%AD%E6%95%8F%E6%89%93%E5%8D%B0%E6%9C%BA%E6%8A%80%E6%9C%AF%E6%8A%A5%E5%91%8A/"/>
      <url>/2019/09/03/%E7%83%AD%E6%95%8F%E6%89%93%E5%8D%B0%E6%9C%BA%E6%8A%80%E6%9C%AF%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="热敏打印机技术报告"><a href="#热敏打印机技术报告" class="headerlink" title="热敏打印机技术报告"></a>热敏打印机技术报告</h1><p>目前为止，接触了多款热敏打印机，主要目的是为了实现打印80mm和110mm两种规格的热敏小票。所谓热敏打印机简单的来说就是通过打印头上的半导体加热元件接触热敏打印机并产生化学反应来生成图像，具体的可以查查百科。</p><h2 id="型号模块"><a href="#型号模块" class="headerlink" title="型号模块"></a>型号模块</h2><p>热敏打印机的款式具体可以按照以下几种来分类</p><ol><li>打印行宽:常见的有57mm,80mm和110mm等</li><li>打印dpi:（即每英寸打印的点数，1英寸=2.54厘米）常见的有200dpi(行：72mm/576点)，300dpi等；</li><li>连接方式: usb,蓝牙,wifi,串口或并口。基本上以usb为主，如果是内嵌打印机可以通过串口和并口连接。一般来说打印机支持多种连接方式；</li><li>结构设计: 工业模型和嵌入式</li></ol><p>比如以下这款打印机就是属于 <strong>80mm,200dpi,usb连接为主的工业热敏打印机</strong><br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/thermal_printer.jpg" alt="工业热敏打印机"></p><p>这款就是属于 <strong>110mm,200dpi,usb连接/串口的嵌入式热敏打印机</strong><br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/thermal_insert.jpg" alt="嵌入式热敏打印机"></p><h2 id="接入方式"><a href="#接入方式" class="headerlink" title="接入方式"></a>接入方式</h2><p>本次开发使用的所有热敏打印机都是使用 usb 方式接入,所以会比较详细的介绍该种接入方式，除此以外，先简单的说明一下其他的接入方式。</p><h3 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h3><p>基本所有的串口开发都会依赖于 <strong><a href="https://code.google.com/archive/p/android-serialport-api/source/default/source" target="_blank" rel="noopener">google 的 android-serivalport-api 项目</a></strong>，其中比较重要的是一个so库 <code>libserial_post.so</code>和两个类<code>SerialPort.java</code>与<code>SerialPortFinder.java</code></p><p>串口通信简单来说是按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。串口编程简单来说：打开串口-&gt;串口配置-&gt;串口操作（读写）-&gt;关闭串口。</p><p>打开串口需要串口的硬件地址和波特率，硬件地址取决于主板上的串口地址名称，一般来说格式为<strong>“/dev/tty..”</strong>，可能有些主板的名称不一样，这一点可以询问主板商。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 传入串口文件，波特率</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SerialPort</span><span class="params">(File device, <span class="keyword">int</span> baudrate, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> SecurityException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check access permission */</span></span><br><span class="line"><span class="keyword">if</span> (!device.canRead() || !device.canWrite()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/* Missing read/write permission, trying to chmod the file */</span></span><br><span class="line">Process su;</span><br><span class="line">su = Runtime.getRuntime().exec(<span class="string">"/system/bin/su"</span>);</span><br><span class="line">String cmd = <span class="string">"chmod 666 "</span> + device.getAbsolutePath() + <span class="string">"\n"</span></span><br><span class="line">+ <span class="string">"exit\n"</span>;</span><br><span class="line">su.getOutputStream().write(cmd.getBytes());</span><br><span class="line"><span class="keyword">if</span> ((su.waitFor() != <span class="number">0</span>) || !device.canRead()</span><br><span class="line">|| !device.canWrite()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SecurityException();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SecurityException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mFd = open(device.getAbsolutePath(), baudrate, flags);</span><br><span class="line"><span class="keyword">if</span> (mFd == <span class="keyword">null</span>) &#123;</span><br><span class="line">Log.e(TAG, <span class="string">"native open returns null"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">&#125;</span><br><span class="line">mFileInputStream = <span class="keyword">new</span> FileInputStream(mFd);</span><br><span class="line">mFileOutputStream = <span class="keyword">new</span> FileOutputStream(mFd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码所示，需要传入 串口地址和波特率 来获取串口的文件数据流。<br>后续就是通过数据流来接收特定格式的数据进行处理和返回，这样整个串口通信就完成了。</p><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p>使用网络通信也是一种连接方式，将打印机作为服务端，接受socket数据，应用程序作为客户端，以定好的ip地址和端口，发送数据给服务端。<br>这个方式依赖于打印机已经植入服务端的代码，所以依赖于打印机的厂商是否有设置这个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**客户端**/</span></span><br><span class="line"><span class="comment">//创建客户端+端口</span></span><br><span class="line">DatagramSocket mmClientSocket = <span class="keyword">new</span> DatagramSocket(dest_port, InetAddress.getByName(local_address));</span><br><span class="line"><span class="comment">//发送打包数据</span></span><br><span class="line">mmClientSocket.send(<span class="keyword">new</span> DatagramPacket(cmd, cmd.length, InetAddress.getByName(<span class="keyword">this</span>.IPAddress), <span class="keyword">this</span>.PortNumber));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**服务端**/</span></span><br><span class="line"><span class="comment">// 创建服务端+端口</span></span><br><span class="line">DatagramSocket server = <span class="keyword">new</span> DatagramSocket(dest_port, InetAddress.getByName(local_address));</span><br><span class="line"><span class="comment">// 准备接收容器</span></span><br><span class="line"><span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">// 封装成包 new DatagramPacket(byte[] b,int length)</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container, container.length);</span><br><span class="line"><span class="comment">// 接收数据,使用 DatagramSocket的实例的 receive( DatagramPacket ) 方法进行接收</span></span><br><span class="line">server.receive(packet);</span><br></pre></td></tr></table></figure><p>使用 <code>DatagramSocket</code> 和 <code>DatagramPacket</code> 是不错的选择，这两个类是<strong>基于UDP协议</strong>进行通信的包装类。</p><h3 id="BLE蓝牙"><a href="#BLE蓝牙" class="headerlink" title="BLE蓝牙"></a>BLE蓝牙</h3><p>蓝牙通信，同样需要打印机有蓝牙模块能使客户端发现打印机，其他步骤与普通的蓝牙通信无区别，基操：开启蓝牙-&gt;搜索蓝牙设备-&gt;连接蓝牙设备-&gt;发送消息-&gt;断开蓝牙连接-&gt;关闭销毁蓝牙</p><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><p>项目中使用USB进行控制打印机，这种连接方式是所有打印机都支持的一种方式。<br>在USB通信中，<code>android.hardware.usb</code>包下提供了USB开发的相关类。 </p><blockquote><p>需要了解的有UsbManager、UsbDevice、UsbInterface、UsbEndpoint、UsbDeviceConnection、UsbRequest、UsbConstants：<br>1、UsbManager:获得Usb的状态，与连接的Usb设备通信。<br>2、UsbDevice：Usb设备的抽象，它包含一个或多个UsbInterface，而每个UsbInterface包含多个UsbEndpoint。Host与其通信，先打开UsbDeviceConnection，使用UsbRequest在一个端点（endpoint）发送和接收数据。<br>3、UsbInterface：定义了设备的功能集，一个UsbDevice包含多个UsbInterface，每个Interface都是独立的。<br>4、UsbEndpoint：endpoint是interface的通信通道。<br>5、UsbDeviceConnection：host与device建立的连接，并在endpoint传输数据。<br>6、UsbRequest：usb 请求包。可以在UsbDeviceConnection上异步传输数据。注意是只在异步通信时才会用到它。<br>7、UsbConstants：usb常量的定义，对应linux/usb/ch9.h</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用批量传输的方式（使用与大批量数据），其他的还有控制传输（数据量小，无损），中断传输（鼠标，键盘）和同步传输（实时性高，电话等）等</span></span><br><span class="line"><span class="keyword">this</span>.mUsbDeviceConnection.bulkTransfer(<span class="keyword">this</span>.mUsbEndpointOut, data, data.length, <span class="number">2147483647</span>);</span><br></pre></td></tr></table></figure><p>Usb的插入和拔出是以系统广播的形式发送的，只要我们注册这个广播即可。其对应的分别为 <code>UsbManager.ACTION_USB_DEVICE_ATTACHED</code> 和 <code>UsbManager.ACTION_USB_DEVICE_DETACHED</code> .</p><p>tips:如果需要在usb插入时启动某一Activity,可以在<code>manifest</code>中插入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.usb.action.USB_DEVICE_ATTACHED"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:resource</span>=<span class="string">"@xml/usbfilter"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">usb-device</span> <span class="attr">vendor-id</span>=<span class="string">"1234"</span> <span class="attr">product-id</span>=<span class="string">"5678"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中需要设备的厂商id和设备id</p><h2 id="指令规范"><a href="#指令规范" class="headerlink" title="指令规范"></a>指令规范</h2><p>市面上绝大部分打印机兼容esc/pos指令，ESC/POS©指令体系是由EPSON发明的一套专有POS打印机指令系统。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/esc_pos.jpg" alt="部分指令"></p><p>虽说指令是相同的，但还有一些是不一样的，比如与打印机相关的一些状态判断，像是否连接，切刀是否合上，是否缺纸等的判断每个厂商的检查方法都是不一样的。这一部分就需要去根据厂商提供的sdk进行适配。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android程序崩溃捕获</title>
      <link href="/2019/03/01/Android%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E6%8D%95%E8%8E%B7/"/>
      <url>/2019/03/01/Android%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E6%8D%95%E8%8E%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>何为Unchecked异常呢，换句话说就是指非受检异常，它不能用try-catch来显示捕捉。</p><p>在Java中所有不是RuntimeException派生的Exception都是检查型异常。当函数中存在抛出检查型异常的操作时该函数的函数声明中必须包含throws语句。调用改函数的函数也必须对该异常进行处理，如不进行处理则必须在调用函数上声明throws语句。</p><p>检查型异常是JAVA首创的，在编译期对异常的处理有强制性的要求。在JDK代码中大量的异常属于检查型异常，包括IOException，SQLException等等。</p><p>在Java中所有RuntimeException的派生类都是非检查型异常，与检查型异常对比，非检查型异常可以不在函数声明中添加throws语句，调用函数上也不需要强制处理。<br>常见的NullPointException，ClassCastException是常见的非检查型异常。非检查型异常可以不使用try…catch进行处理，但是如果有异常产生，则异常将由JVM进行处理。对于RuntimeException的子类最好也使用异常处理机制。虽然RuntimeException的异常可以不使用try…catch进行处理，但是如果一旦发生异常，则肯定会导致程序中断执行，所以，为了保证程序再出错后依然可以执行，在开发代码时最好使用try…catch的异常处理机制进行处理。</p><h3 id="使用UncaughtExceptionHandler来捕获unchecked异常"><a href="#使用UncaughtExceptionHandler来捕获unchecked异常" class="headerlink" title="使用UncaughtExceptionHandler来捕获unchecked异常"></a>使用UncaughtExceptionHandler来捕获unchecked异常</h3><p>UncaughtException处理类,当程序发生Uncaught异常的时候,由该类来接管程序,并记录发送错误报告。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Thread.UncaughtExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageInfo;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager.NameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.os.Looper;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UncaughtException处理类,当程序发生Uncaught异常的时候,有该类来接管程序,并记录发送错误报告.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> user</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"SdCardPath"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrashHandler</span> <span class="keyword">implements</span> <span class="title">UncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TEST"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CrashHandler 实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CrashHandler INSTANCE = <span class="keyword">new</span> CrashHandler();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序的 Context 对象</span></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 系统默认的 UncaughtException 处理类</span></span><br><span class="line">    <span class="keyword">private</span> Thread.UncaughtExceptionHandler mDefaultHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来存储设备信息和异常信息</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; infos = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来显示Toast中的信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String error = <span class="string">"程序错误，额，不对，我应该说，服务器正在维护中，请稍后再试"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; regexMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于格式化日期,作为日志文件名的一部分</span></span><br><span class="line">    <span class="keyword">private</span> DateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd-HH-mm-ss"</span>,</span><br><span class="line">            Locale.CHINA);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 保证只有一个 CrashHandler 实例 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrashHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 获取 CrashHandler 实例 ,单例模式 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrashHandler <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initMap();</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统默认的 UncaughtException 处理器</span></span><br><span class="line">        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置该 CrashHandler 为程序的默认处理器</span></span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">this</span>);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"Crash:init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当 UncaughtException 发生时会转入该函数来处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!handleException(ex) &amp;&amp; mDefaultHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果用户没有处理则让系统默认的异常处理器来处理</span></span><br><span class="line">            mDefaultHandler.uncaughtException(thread, ex);</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"defalut"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"error : "</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 退出程序</span></span><br><span class="line">            android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">            <span class="comment">// mDefaultHandler.uncaughtException(thread, ex);</span></span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义错误处理，收集错误信息，发送错误报告等操作均在此完成</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：如果处理了该异常信息；否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">handleException</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ex == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集设备参数信息</span></span><br><span class="line">        <span class="comment">// collectDeviceInfo(mContext);</span></span><br><span class="line">        <span class="comment">// 保存日志文件</span></span><br><span class="line">        saveCrashInfo2File(ex);</span><br><span class="line">        <span class="comment">// 使用 Toast 来显示异常信息</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Looper.prepare();</span><br><span class="line">                Toast.makeText(mContext, error, Toast.LENGTH_LONG).show();</span><br><span class="line">                Looper.loop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收集设备参数信息</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectDeviceInfo</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PackageManager pm = ctx.getPackageManager();</span><br><span class="line">            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),</span><br><span class="line">                    PackageManager.GET_ACTIVITIES);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pi != <span class="keyword">null</span>) &#123;</span><br><span class="line">                String versionName = pi.versionName == <span class="keyword">null</span> ? <span class="string">"null"</span></span><br><span class="line">                        : pi.versionName;</span><br><span class="line">                String versionCode = pi.versionCode + <span class="string">""</span>;</span><br><span class="line">                infos.put(<span class="string">"versionName"</span>, versionName);</span><br><span class="line">                infos.put(<span class="string">"versionCode"</span>, versionCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"an error occured when collect package info"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] fields = Build.class.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                infos.put(field.getName(), field.get(<span class="keyword">null</span>).toString());</span><br><span class="line">                Log.d(TAG, field.getName() + <span class="string">" : "</span> + field.get(<span class="keyword">null</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"an error occured when collect crash info"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存错误信息到文件中 *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回文件名称,便于将文件传送到服务器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">saveCrashInfo2File</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = getTraceInfo(ex);</span><br><span class="line">        Writer writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(writer);</span><br><span class="line">        ex.printStackTrace(printWriter);</span><br><span class="line">        Throwable cause = ex.getCause();</span><br><span class="line">        <span class="keyword">while</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cause.printStackTrace(printWriter);</span><br><span class="line">            cause = cause.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        printWriter.close();</span><br><span class="line"></span><br><span class="line">        String result = writer.toString();</span><br><span class="line">        sb.append(result);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">            String time = formatter.format(<span class="keyword">new</span> Date());</span><br><span class="line">            String fileName = <span class="string">"crash-"</span> + time + <span class="string">"-"</span> + timestamp + <span class="string">".log"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Environment.getExternalStorageState().equals(</span><br><span class="line">                    Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">                String path = Environment.getExternalStorageDirectory()</span><br><span class="line">                        + <span class="string">"/crash/"</span>;</span><br><span class="line">                File dir = <span class="keyword">new</span> File(path);</span><br><span class="line">                <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                    dir.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path + fileName);</span><br><span class="line">                fos.write(sb.toString().getBytes());</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> fileName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"an error occured while writing file..."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 整理异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">getTraceInfo</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        Throwable ex = e.getCause() == <span class="keyword">null</span> ? e : e.getCause();</span><br><span class="line">        StackTraceElement[] stacks = ex.getStackTrace();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stacks.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                setError(ex.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">"class: "</span>).append(stacks[i].getClassName())</span><br><span class="line">                    .append(<span class="string">"; method: "</span>).append(stacks[i].getMethodName())</span><br><span class="line">                    .append(<span class="string">"; line: "</span>).append(stacks[i].getLineNumber())</span><br><span class="line">                    .append(<span class="string">";  Exception: "</span>).append(ex.toString() + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(TAG, sb.toString());</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置错误的提示语</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setError</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">        Pattern pattern;</span><br><span class="line">        Matcher matcher;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; m : regexMap.entrySet()) &#123;</span><br><span class="line">            Log.d(TAG, e+<span class="string">"key:"</span> + m.getKey() + <span class="string">"; value:"</span> + m.getValue());</span><br><span class="line">            pattern = Pattern.compile(m.getKey());</span><br><span class="line">            matcher = pattern.matcher(e);</span><br><span class="line">            <span class="keyword">if</span>(matcher.matches())&#123;</span><br><span class="line">                error = m.getValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化错误的提示语</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Java.lang.NullPointerException</span></span><br><span class="line">        <span class="comment">// java.lang.ClassNotFoundException</span></span><br><span class="line">        <span class="comment">// java.lang.ArithmeticException</span></span><br><span class="line">        <span class="comment">// java.lang.ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="comment">// java.lang.IllegalArgumentException</span></span><br><span class="line">        <span class="comment">// java.lang.IllegalAccessException</span></span><br><span class="line">        <span class="comment">// SecturityException</span></span><br><span class="line">        <span class="comment">// NumberFormatException</span></span><br><span class="line">        <span class="comment">// OutOfMemoryError </span></span><br><span class="line">        <span class="comment">// StackOverflowError </span></span><br><span class="line">        <span class="comment">// RuntimeException </span></span><br><span class="line">        regexMap.put(<span class="string">".*NullPointerException.*"</span>, <span class="string">"嘿，无中生有~Boom!"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*ClassNotFoundException.*"</span>, <span class="string">"你确定你能找得到它？"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*ArithmeticException.*"</span>, <span class="string">"我猜你的数学是体育老师教的，对吧？"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*ArrayIndexOutOfBoundsException.*"</span>, <span class="string">"恩，无下限=无节操，请不要跟我搭话"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*IllegalArgumentException.*"</span>, <span class="string">"你的出生就是一场错误。"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*IllegalAccessException.*"</span>, <span class="string">"很遗憾，你的信用卡账号被冻结了，无权支付"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*SecturityException.*"</span>, <span class="string">"死神马上降临"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*NumberFormatException.*"</span>, <span class="string">"想要改变一下自己形象？去泰国吧，包你满意"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*OutOfMemoryError.*"</span>, <span class="string">"或许你该减减肥了"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*StackOverflowError.*"</span>, <span class="string">"啊，啊，憋不住了！"</span>);</span><br><span class="line">        regexMap.put(<span class="string">".*RuntimeException.*"</span>, <span class="string">"你的人生走错了方向，重来吧"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="在-Application-中初始化"><a href="#在-Application-中初始化" class="headerlink" title="在 Application 中初始化"></a>在 Application 中初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrashApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        CrashHandler crashHandler = CrashHandler.getInstance();</span><br><span class="line">        crashHandler.init(getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交错误日志到网络服务器这一块还没有添加。如果添加了这一块功能，就能够实时的得要用户使用时的错误日志，能够及时反馈不同机型不同时候发生的错误，能对我们开发者的后期维护带来极大的方便。</p><h2 id="崩溃的后续"><a href="#崩溃的后续" class="headerlink" title="崩溃的后续"></a>崩溃的后续</h2><p>收集完崩溃日志只是第一步，将日志收集分析才是目的。日志可以通过接口传回服务器，也可以通过接入第三方平台来收集。</p><h3 id="友盟"><a href="#友盟" class="headerlink" title="友盟"></a>友盟</h3><p>友盟+支持移动应用统计和分析流量来源、内容使用、用户属性和行为数据，以便运维人员利用数据进行产品、运营、推广策略的决策。</p><h3 id="腾讯Bugly"><a href="#腾讯Bugly" class="headerlink" title="腾讯Bugly"></a>腾讯Bugly</h3><p>腾讯Bugly，为移动开发者提供专业的异常上报，运营统计和内测分发解决方案，帮助开发者快速发现并解决异常，同时掌握产品运营动态，及时跟进用户反馈。Bugly功能比较专注错误统计，提供APP上线崩溃分析、ANR分析、错误分析等等。</p><h3 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h3><p>海外版APP首选，Firebase能让你的App从零到一。也就是说它可以帮助手机以及网页应用的开发者轻松构建App。通过Firebase背后负载的框架就可以简单地开发一个App，无需服务器以及基础设施。</p><ul><li>无需管理基础架构，快速构建您的应用 </li><li>Firebase SDK（如 Analytics、数据库、通知和崩溃报告）可让您快速迁移并专注于您的用户。</li><li>由 Google 提供支持，受到众多热门应用的信赖 </li><li>Firebase 建立在 Google 基础架构上，可以自动扩展，所以您不用担心是否能满足用户需求。</li><li>一个控制台，其中各种产品配合使用 </li><li>Firebase 产品可以独立工作，共享数据和分析结果，并且可从统一的信息中心进行访问。</li></ul><h3 id="GrowingIO"><a href="#GrowingIO" class="headerlink" title="GrowingIO"></a>GrowingIO</h3><p>无痕埋点。GrowingIO 是基于用户行为的新一代数据分析产品，无需埋点即可采集全量、实时用户行为数据，数据分析更精细，帮助管理者、产品经理、市场运营、数据分析师、增长黑客等提升转化率、优化网站 / APP，实现用户快速增长和变现</p><h3 id="Fabric"><a href="#Fabric" class="headerlink" title="Fabric"></a>Fabric</h3><p>更好用的Bug收集平台.提供强大且轻便的APP Crash统计报告，帮助开发者快速定位Bug和Crash，其准确度远超过Bugly。提供APP beta自动化发布和部署平台。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（二十二）—— Flutter 的第一次尝试</title>
      <link href="/2018/08/10/%E8%AF%95%E8%AF%95%20Flutter/"/>
      <url>/2018/08/10/%E8%AF%95%E8%AF%95%20Flutter/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter-的第一次尝试"><a href="#Flutter-的第一次尝试" class="headerlink" title="Flutter 的第一次尝试"></a>Flutter 的第一次尝试</h1><p>什么是 Flutter?</p><blockquote><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</p></blockquote><p><a href="https://flutterchina.club/" target="_blank" rel="noopener">Flutter中文网</a></p><p>Flutter 具有很多的优点，比如混合开发，能够一套代码发布到Android和iOS上，快速开发等功能，但最吸引我的是它有着很多核心的widget,而这些都可以在iOS和Android上达到原生应用一样的性能，这就让人感到很惊艳。</p><p>根据官网的描述，Flutter具有以下特性：</p><ol><li>快速开发，支持iOS和Android真机和模拟器上热重载，不会丢失状态；</li><li>统一的应用开发体验和丰富的UI控件，包括Android的Material Design风格和iOS的Cupertino Widget；</li><li>现代，响应式框架可以轻松构建用户界面，且支持强大灵活的API(如2D、动画、手势、效果等)</li><li>能够通过编写平台通道访问原生的系统功能和复用现有的java或oc代码。</li></ol><p>当然，由于 Flutter 使用了新的 Dart 语言，所以新的开发者可能需要熟悉这套语言的特性和风格才能上手。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>flutter 的安装在官方网站上已经写得很详细了，甚至很细心的为国内开发者提供了国内镜像版（笑）。这里就简单的介绍下基本流程。</p><ol><li><p>首先是将中国国内的镜像地址加入环境变量中，</p><blockquote><p>export PUB_HOSTED_URL=<a href="https://pub.flutter-io.cn" target="_blank" rel="noopener">https://pub.flutter-io.cn</a><br>export FLUTTER_STORAGE_BASE_URL=<a href="https://storage.flutter-io.cn" target="_blank" rel="noopener">https://storage.flutter-io.cn</a></p></blockquote></li><li><p>获取Flutter SDK，可以直接去官方的下载页面下载,也可以直接去Github上直接拉取；</p></li><li>将sdk下的一些工具添加到环境变量中；</li><li>利用 <code>flutter doctor</code> 命令检查各个依赖安装的完整性。<br>比如这样子<br><img src="https://upload-images.jianshu.io/upload_images/1514994-0d9c9ebd73ae7132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="flutter doctor"><br>说明我当前已安装 Flutter SDK（vo.6.2）,已安装Android Studio 上 Flutter 的开发依赖工具，未安装xcode上的 Fluttr 开发依赖工具，已连接的可用设备数量为1</li><li>在 Android Studio 上安装 Flutter 和 Dart 插件，在Android Studio的插件首选项 (Preferences&gt;Plugins on macOS, File&gt;Settings&gt;Plugins on Windows &amp; Linux)中的 repositories 中可以找到；</li><li>在 VS Code中 调用 View&gt;Command Palette… 输入 ‘install’, 然后选择 Extensions: Install Extension action。在搜索框输入 flutter , 在搜索结果列表中选择 ‘Flutter’, 然后点击 Install</li></ol><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>以上的准备工作做完后，可以直接在 Android Studio 中选择 Flutter applicaiton 作为项目类型来创建一个Flutter工程。等IDE创建完毕后，直接运行应用就能跑起来了。</p><p>程序的入口函数在项目-&gt;lib-&gt;main.dart文件中<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'splash.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'index.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'videodetail.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter Demo'</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with "flutter run". You'll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// "hot reload" (press "r" in the console where you ran "flutter run",</span></span><br><span class="line">        <span class="comment">// or press Run &gt; Flutter Hot Reload in IntelliJ). Notice that the</span></span><br><span class="line">        <span class="comment">// counter didn't reset back to zero; the application is not restarted.</span></span><br><span class="line">        primarySwatch: Colors.green,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SplashPage(key: key),</span><br><span class="line">      routes: &lt;<span class="built_in">String</span>, WidgetBuilder&gt;&#123;</span><br><span class="line">        <span class="string">'/index'</span>: (BuildContext context) =&gt; <span class="keyword">new</span> MyHomePage(title: <span class="string">'首页'</span>),</span><br><span class="line">        <span class="string">'/splash'</span>: (BuildContext context) =&gt; <span class="keyword">new</span> SplashPage(key: key),</span><br><span class="line">        <span class="string">'/play'</span>: (BuildContext context) =&gt; <span class="keyword">new</span> VideoPlayPage(),</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中的<code>void main() =&gt; runApp(new MyApp());</code>就是项目的入口了。</p><blockquote><p><strong>在这里，要提一下这个概念：在Flutter中，大多数东西都是widget，包括对齐(alignment)、填充(padding)和布局(layout)，甚至动画都可以通过AnimatedWidget类来实现。而Flutter的页面则是由这些 widget 元素堆叠而成，不再与原生的页面布局等同概念了。</strong></p></blockquote><p>Flutter布局机制的核心就是widget。在Flutter中，几乎所有东西都是一个widget - 甚至布局模型都是widget。您在Flutter应用中看到的图像、图标和文本都是widget。 甚至你看不到的东西也是widget，例如行（row）、列（column）以及用来排列、约束和对齐这些可见widget的网格（grid）。<br>与此同时，为了方便开发者的使用，官方为开发者提供了大量的可用的Widget部件，包括 Android和iOS风格的都有。</p><p><img src="https://upload-images.jianshu.io/upload_images/1514994-4b3f2de21866765b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/940/format/webp" alt="Flutter Widgets"></p><p>具体的内容可以查看 Flutter 官方介绍。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目下的<code>pubspec.yaml</code>则是整个 Flutter 项目的配置文件，它里面包括了应用名，版本号，开发环境，工程依赖，资源文件等要素。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">flutter_app</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">new</span> <span class="string">Flutter</span> <span class="string">application.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following defines the version and build number for your application.</span></span><br><span class="line"><span class="comment"># A version number is three numbers separated by dots, like 1.2.43</span></span><br><span class="line"><span class="comment"># followed by an optional build number separated by a +.</span></span><br><span class="line"><span class="comment"># Both the version and the builder number may be overridden in flutter</span></span><br><span class="line"><span class="comment"># build by specifying --build-name and --build-number, respectively.</span></span><br><span class="line"><span class="comment"># Read more about versioning at semver.org.</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span><span class="string">+1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">  sdk:</span> <span class="string">"&gt;=2.0.0-dev.68.0 &lt;3.0.0"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  flutter:</span></span><br><span class="line"><span class="attr">    sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The following adds the Cupertino Icons font to your application.</span></span><br><span class="line">  <span class="comment"># Use with the CupertinoIcons class for iOS style icons.</span></span><br><span class="line"><span class="attr">  cupertino_icons:</span> <span class="string">^0.1.2</span></span><br><span class="line"><span class="attr">  image_picker:</span> <span class="string">^0.4.7</span></span><br><span class="line"><span class="attr">  device_info:</span> <span class="string">^0.2.0</span></span><br><span class="line"><span class="attr">  video_player:</span> <span class="string">^0.6.4</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line"><span class="attr">  flutter_test:</span></span><br><span class="line"><span class="attr">    sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># For information on the generic Dart part of this file, see the</span></span><br><span class="line"><span class="comment"># following page: https://www.dartlang.org/tools/pub/pubspec</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following section is specific to Flutter.</span></span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The following line ensures that the Material Icons font is</span></span><br><span class="line">  <span class="comment"># included with your application, so that you can use the icons in</span></span><br><span class="line">  <span class="comment"># the material Icons class.</span></span><br><span class="line"><span class="attr">  uses-material-design:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># To add assets to your application, add an assets section, like this:</span></span><br><span class="line"><span class="attr">  assets:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">images/about.png</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">images/home.png</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">images/ic_avatar_default.png</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  <span class="comment"># An image asset can refer to one or more resolution-specific "variants", see</span></span><br><span class="line">  <span class="comment"># https://flutter.io/assets-and-images/#resolution-aware.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># For details regarding adding assets from package dependencies, see</span></span><br><span class="line">  <span class="comment"># https://flutter.io/assets-and-images/#from-packages</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># To add custom fonts to your application, add a fonts section here,</span></span><br><span class="line">  <span class="comment"># in this "flutter" section. Each entry in this list should have a</span></span><br><span class="line">  <span class="comment"># "family" key with the font family name, and a "fonts" key with a</span></span><br><span class="line">  <span class="comment"># list giving the asset and other descriptors for the font. For</span></span><br><span class="line">  <span class="comment"># example:</span></span><br><span class="line">  <span class="comment"># fonts:</span></span><br><span class="line">  <span class="comment">#   - family: Schyler</span></span><br><span class="line">  <span class="comment">#     fonts:</span></span><br><span class="line">  <span class="comment">#       - asset: fonts/Schyler-Regular.ttf</span></span><br><span class="line">  <span class="comment">#       - asset: fonts/Schyler-Italic.ttf</span></span><br><span class="line">  <span class="comment">#         style: italic</span></span><br><span class="line">  <span class="comment">#   - family: Trajan Pro</span></span><br><span class="line">  <span class="comment">#     fonts:</span></span><br><span class="line">  <span class="comment">#       - asset: fonts/TrajanPro.ttf</span></span><br><span class="line">  <span class="comment">#       - asset: fonts/TrajanPro_Bold.ttf</span></span><br><span class="line">  <span class="comment">#         weight: 700</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># For details regarding fonts from package dependencies,</span></span><br><span class="line">  <span class="comment"># see https://flutter.io/custom-fonts/#from-packages</span></span><br></pre></td></tr></table></figure></p><h2 id="构建发布"><a href="#构建发布" class="headerlink" title="构建发布"></a>构建发布</h2><p>首先是签名的问题，在Android Studio上的配置方式与用Gradle配置签名打包的方式一样，都是通过修改build.gradle文件配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        keyAlias keystoreProperties['keyAlias']</span><br><span class="line">        keyPassword keystoreProperties['keyPassword']</span><br><span class="line">        storeFile file(keystoreProperties['storeFile'])</span><br><span class="line">        storePassword keystoreProperties['storePassword']</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>签名配置完毕后，使用命令行运行 <code>flutter build apk</code>进行打包。（需要位于工程目录下，flutter build 默认会包含 —release选项，打包好的发布APK位于工程目录下/build/app/outputs/apk/app-release.apk。）</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。哪怕是编程的初学者也能很好的上手整个Flutter框架、帮助快速地设计、构建、测试和调试应用程序。最后，记住 Flutter 的核心原则：<strong>一切皆为widget</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（二十一）—— 嵌入 ViewPager 的视频播放器</title>
      <link href="/2018/07/17/%E5%B5%8C%E5%85%A5%20ViewPager%20%E7%9A%84%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/2018/07/17/%E5%B5%8C%E5%85%A5%20ViewPager%20%E7%9A%84%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入-ViewPager-的视频播放器"><a href="#嵌入-ViewPager-的视频播放器" class="headerlink" title="嵌入 ViewPager 的视频播放器"></a>嵌入 ViewPager 的视频播放器</h1><p>这次的目标是实现一个能够播放视频的轮播器，即每个页面都能放置视频且能随页面的切换实现视频的切换。这个需求类似于在ListView中实现小视频的播放和切换，核心内容是怎么将视频播放器与控件的状态变化连接在一起。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/viewpager_video.jpg" alt="视频播放器"></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>使用 ViewPager 进行轮播</li><li>使用 MediaPlayer 对视频进行播放</li><li>使用 TextureView 展示视频界面</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>为了提高性能，当然不能为每一页配置一个 MediaPlayer 用来播放视频，那么最好的解决方法是当页面切换时切换 MediaPlayer 的播放源。利用 <code>ViewPager.OnPageChangeListener</code> 监听轮播器的页面切换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first &amp;&amp; positionOffset == <span class="number">0</span> &amp;&amp; positionOffsetPixels == <span class="number">0</span>) &#123;</span><br><span class="line">        onPageSelected(position);</span><br><span class="line">        first = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="comment">//从缓存的视图中找到当前视图并传递给扩展的MediaPlayer进行控制</span></span><br><span class="line">View view = cacheView.get(position);</span><br><span class="line">    mMediaPlayer.playWithVideoLayout(view);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每一页的 view 中需要有 TextureView 用来显示视频界面，同时利用 <code>TextureView.SurfaceTextureListener</code>监听当前TextureView的可用性。SurfaceTextureListener接口用于让TextureView的使用者知道SurfaceTexture已准备好，这样就可以把SurfaceTexture交给相应的内容源。</p><blockquote><p>TextureView可用于承载显示『数据流』的场合，之前看到『流』不太明确其意义，这里给两个具体的场景大家体会一下：camera模块从sensor采集了1080p@30fps的预览数据『流』，视频通话模块从网络包里解出实时视频数据『流』。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VpVideoView</span> <span class="keyword">extends</span> <span class="title">TextureView</span> <span class="keyword">implements</span> <span class="title">TextureView</span>.<span class="title">SurfaceTextureListener</span>, <span class="title">MediaPlayer</span>.<span class="title">OnVideoSizeChangedListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//some params</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Uri mSource;<span class="comment">//视频源</span></span><br><span class="line">    <span class="keyword">private</span> Surface surface;<span class="comment">//用于承接播放器</span></span><br><span class="line">    <span class="keyword">private</span> VPMediaPlayer mediaPlayer;<span class="comment">//视频播放器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// some methods</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediaPlayer</span><span class="params">(VPMediaPlayer mediaPlayer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediaPlayer = mediaPlayer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initSource</span><span class="params">(String videoPath)</span> </span>&#123;</span><br><span class="line">        mSource = Uri.parse(videoPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeekProgress</span><span class="params">(<span class="keyword">int</span> seekProgress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seekProgress = seekProgress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// release resources on detach</span></span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * TextureView.SurfaceTextureListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceTextureAvailable</span><span class="params">(SurfaceTexture surfaceTexture, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSource == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        surface = <span class="keyword">new</span> Surface(surfaceTexture);</span><br><span class="line">        <span class="keyword">if</span> (mediaPlayer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mediaPlayer.replayWithCurrentLayout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceTextureSizeChanged</span><span class="params">(SurfaceTexture surface, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSurfaceTextureDestroyed</span><span class="params">(SurfaceTexture surface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mediaPlayer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mediaPlayer.pause();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceTextureUpdated</span><span class="params">(SurfaceTexture surface)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVideoSizeChanged</span><span class="params">(MediaPlayer mp, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        mVideoHeight = mp.getVideoHeight();</span><br><span class="line">        mVideoWidth = mp.getVideoWidth();</span><br><span class="line">        updateViewViewSize();</span><br><span class="line">        updateTextureViewSizeCenter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 让控件大小适配视频大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateViewViewSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sx = (<span class="keyword">float</span>) getMeasuredWidth() / (<span class="keyword">float</span>) mVideoWidth;</span><br><span class="line">        <span class="keyword">int</span> height = (<span class="keyword">int</span>) (sx * mVideoHeight);</span><br><span class="line">        setMeasuredDimension(MeasureSpec.makeMeasureSpec(getMeasuredWidth(), MeasureSpec.EXACTLY),</span><br><span class="line">                MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY));</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新计算video的显示位置，让其全部显示并据中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateTextureViewSizeCenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> sx = (<span class="keyword">float</span>) getMeasuredWidth() / (<span class="keyword">float</span>) mVideoWidth;</span><br><span class="line">        <span class="keyword">float</span> sy = (<span class="keyword">float</span>) getMeasuredHeight() / (<span class="keyword">float</span>) mVideoHeight;</span><br><span class="line">        Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">        <span class="comment">//第1步:把视频区移动到View区,使两者中心点重合.</span></span><br><span class="line">        matrix.preTranslate((getMeasuredWidth() - mVideoWidth) / <span class="number">2</span>, (getMeasuredHeight() - mVideoHeight) / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//第2步:因为默认视频是fitXY的形式显示的,所以首先要缩放还原回来.</span></span><br><span class="line">        matrix.preScale(mVideoWidth / (<span class="keyword">float</span>) getMeasuredWidth(), mVideoHeight / (<span class="keyword">float</span>) getMeasuredHeight());</span><br><span class="line">        <span class="comment">//第3步,等比例放大或缩小,直到视频区的一边和View一边相等.如果另一边和view的一边不相等，则留下空隙</span></span><br><span class="line">        <span class="keyword">if</span> (sx &gt;= sy) &#123;</span><br><span class="line">            matrix.postScale(sy, sy, getMeasuredWidth() / <span class="number">2</span>, getMeasuredHeight() / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matrix.postScale(sx, sx, getMeasuredWidth() / <span class="number">2</span>, getMeasuredHeight() / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setTransform(matrix);</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类主要有一下几个功能：（1）使用Texture来展示视频流；（2）记录视频源和播放进度（注意当view被销毁时进度也会重置，所有如果需要进度不随ViewPager的缓存机制影响要另做保存）；（3）利用 <code>MediaPlayer.OnVideoSizeChangedListener</code> 调整视频长与宽；（4）利用 <code>SurfaceTextureListener</code>监听TextureView是否可用。当判断可用时开始启动MediaPlayer播放视频。</p><p>在另一方面，需要对MediaPlayer做一些处理，以便做视频的切换播放。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VPMediaPlayer</span> <span class="keyword">extends</span> <span class="title">MediaPlayer</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">MediaPlayer</span>.<span class="title">OnCompletionListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">MediaPlayer</span>.<span class="title">OnErrorListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">MediaPlayer</span>.<span class="title">OnPreparedListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//some params</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VPMediaPlayer</span><span class="params">(SimpleViewPager simpleViewPager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.simpleViewPager = simpleViewPager;</span><br><span class="line"></span><br><span class="line">        setLooping(<span class="keyword">false</span>);</span><br><span class="line">        setOnPreparedListener(<span class="keyword">this</span>);</span><br><span class="line">        setOnCompletionListener(<span class="keyword">this</span>);</span><br><span class="line">        setOnErrorListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//some methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.start();</span><br><span class="line">        seekTo(videoView.getSeekProgress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playWithVideoLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isScrolling = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reset();</span><br><span class="line">            setOnVideoSizeChangedListener(videoView);</span><br><span class="line">            setDataSource(videoView.getContext(), videoView.getmSource());</span><br><span class="line">            setSurface(videoView.getSurface());</span><br><span class="line">            prepareAsync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replayWithCurrentLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        simpleViewPager.stopAutoScroll();</span><br><span class="line">        isScrolling = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reset();</span><br><span class="line">            setOnVideoSizeChangedListener(videoView);</span><br><span class="line">            setDataSource(videoView.getContext(), videoView.getmSource());</span><br><span class="line">            setSurface(videoView.getSurface());</span><br><span class="line">            prepareAsync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseCurrentVideoLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        simpleViewPager.startAutoScroll(<span class="keyword">true</span>);</span><br><span class="line">        isScrolling = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.pause();</span><br><span class="line">        <span class="keyword">if</span> (videoView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            videoView.setSeekProgress(getCurrentPosition());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</span><br><span class="line">        simpleViewPager.startAutoScroll(<span class="keyword">true</span>);</span><br><span class="line">        isScrolling = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onError</span><span class="params">(MediaPlayer mp, <span class="keyword">int</span> what, <span class="keyword">int</span> extra)</span> </span>&#123;</span><br><span class="line">        simpleViewPager.startAutoScroll(<span class="keyword">true</span>);</span><br><span class="line">        isScrolling = <span class="keyword">true</span>;</span><br><span class="line">        reset();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScrolling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isScrolling;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>VPMediaPlayer 主要处理一些播放器的逻辑，主要功能包括：（1）提供视频的播放暂停功能；（2）能够在视频播放结束后自动切换到下一页。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>整个部分暂时没有添加视频控制的功能和UI，但有了主要的核心代码其他的功能添加起来应该都是水到渠成的事。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OkHttp3的网络编程</title>
      <link href="/2018/06/11/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-OkHttp3%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/06/11/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-OkHttp3%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="OkHttp3的网络编程"><a href="#OkHttp3的网络编程" class="headerlink" title="OkHttp3的网络编程"></a>OkHttp3的网络编程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如今在大部分的Android应用中都大抵使用OkHttp3作为网络请求的框架，无论是纯使用okhttp进行请求还是在Retrofit2中都能看到okhttp的影子。先简单介绍一下OkHtto的特点：</p><ol><li>HTTP/2 支持所有的请求能够在同一个host下复用同一个Socket;</li><li>连接池降低了请求的延长（非 HTTP/2）；</li><li>支持 GZIP 传输压缩；</li><li>响应缓存避免重复的请求;</li></ol><p>除此以外，当OkHttp在访问一个IP地址失败时会自动尝试下一个IP(前提是你有配置多个ip地址)，还处理了代理服务器问题和SSL握手失败问题。</p><p>简单使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">      .url(url)</span><br><span class="line">      .post(body)</span><br><span class="line">      .build();</span><br><span class="line"></span><br><span class="line">  Response response = client.newCall(request).execute();</span><br><span class="line">  <span class="keyword">return</span> response.body().string();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>详情介绍请见官方教程：<a href="http://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp</a></p><p>上面的一切都可以从源代码中可以看到如何实现，现在我们就进入代码阅读。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Okhttp不同于 <code>Volley</code> 那样是基于<code>HttpURLConnection</code>和<code>HttpClient</code>基础上实现的一套机制而是自己通过TCP实现的完整一套网络机制，以便更高效的完成Http请求。</p><h3 id="OKHttpClient"><a href="#OKHttpClient" class="headerlink" title="OKHttpClient"></a>OKHttpClient</h3><p>一切从 <code>OkHttpClient</code> 开始，<code>OkHttpClient</code> 通过 Builder 传入或初始化整个框架所需要的参数和配置，比如请求分发器<code>Dispatcher</code>，拦截器<code>Interceptor</code>等，这些参数和配置都可以借由 <code>OkHttpClient</code> 这个角色被子模块快速的调用，比如 dispatcher,call,cache等等。同时 <code>OkHttpClient</code> 也负责将 Request 转化成实际请求Call方便<code>Dispatcher</code>进行分发。</p><h3 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h3><p>如在最上面的代码所示，在发起请求时需要一个Request对象来封装每次的请求参数，而这个Request对象会在 <code>OkHttpClient</code> 中转换为真正的请求对象Call并将其放入Dispatcher中进行分发，以同步或者异步的方式。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p><code>Dispatcher</code> 会在同步执行任务队列中 <code>runningSyncCalls</code> 记录当前被执行过得任务Call，同时在当前线程中去执行Call的<code>getResponseWithInterceptorChain()</code>方法，直接获取当前的返回数据Response，完成后会将call从 <code>runningSyncCalls</code> 队列中移除。</p><blockquote><p>getResponseWithInterceptorChain 方法中包含着之后要说的拦截器和链式调用机制。</p></blockquote><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>在异步中 <code>Dispatcher</code> 又维护了两个队列，<code>runningAsyncCalls</code>和<code>readyAsyncCalls</code>,前者为正在请求的队列，后者是当请求队列超过一定大小后的准备队列。<br>Dispatcher内部实现了懒加载无边界限制的线程池方式，同时该线程池采用了 SynchronousQueue这种阻塞队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (executorService == <span class="keyword">null</span>) &#123;</span><br><span class="line">      executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">          <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp Dispatcher"</span>, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> executorService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式能够快速的传递元素，适用于高频繁请求的场景。<br>异步执行是通过 <code>Call.enqueue(Callback responseCallback)</code>来执行，在 <code>Dispatcher</code> 中添加一个封装了Callback的Call的匿名内部类Runnable来执行当前的Call。这里的call在调用会转换成其内部类<code>AsyncCall</code>,AsyncCall的execute方法最后还是会回调到Call的 getResponseWithInterceptorChain方法来完成请求，同时将返回数据或者状态通过Callback来完成。</p><h3 id="Interceptor拦截链"><a href="#Interceptor拦截链" class="headerlink" title="Interceptor拦截链"></a>Interceptor拦截链</h3><p>通过 <code>Dispatcher</code> 已经知道了OkHttp是怎样分发请求的，那么下一步也就是最重要的是OkHttp是怎么完成请求的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Build a full stack of interceptors.</span></span><br><span class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    interceptors.addAll(client.interceptors());</span><br><span class="line">    interceptors.add(retryAndFollowUpInterceptor);</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</span><br><span class="line">    <span class="keyword">if</span> (!forWebSocket) &#123;</span><br><span class="line">      interceptors.addAll(client.networkInterceptors());</span><br><span class="line">    &#125;</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</span><br><span class="line"></span><br><span class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>,</span><br><span class="line">        originalRequest, <span class="keyword">this</span>, eventListener, client.connectTimeoutMillis(),</span><br><span class="line">        client.readTimeoutMillis(), client.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chain.proceed(originalRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>OkHttp3对HTTP请求是通过Interceptor链来处理的。拦截器接口中有 <code>intercept(Chain chain)</code> 方法，同时返回Response，主要功能是针对Request和Response的切面处理。<br><img src="https://upload-images.jianshu.io/upload_images/1315506-10e49a8770cec26b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="拦截器流程"><br>在<code>RealInterceptorChain</code>的初始化中传入了整个拦截器列表，而在<code>RealInterceptorChain</code>中维护了拦截器运行的迭代数，保证每次在拦截器中的<code>intercept(Chain chain)</code>中调用 <code>chain.proceed()</code>都能顺序的执行下一个拦截器。</p><h4 id="用户自定义-Interceptor"><a href="#用户自定义-Interceptor" class="headerlink" title="用户自定义 Interceptor"></a>用户自定义 Interceptor</h4><p>用户自定义的<code>Interceptor</code>分为应用<code>Interceptor</code>和网络<code>NetworkInterceptor</code>，其实两者并没有什么本质的区别，只不过所处的位置不同。</p><p>应用<code>Interceptor</code>位于拦截链的首位，不会担心响应和重定向之间的中间响应，通常只调用一次，即使HTTP响应式通过缓存提供的。<br>而网络<code>NetworkInterceptor</code>位于 <code>ConnectInterceptor</code>与<code>CallServerInterceptor</code>之间，可以在数据传递到网络时即时观测，能够在重定向和重试中操作中间响应。</p><h4 id="RetryAndFollowUpInterceptor"><a href="#RetryAndFollowUpInterceptor" class="headerlink" title="RetryAndFollowUpInterceptor"></a>RetryAndFollowUpInterceptor</h4><p><code>RetryAndFollowUpInterceptor</code> 首先创建了<code>StreamAllocation</code>对象，借由 <code>RealInterceptorChain</code>将其传递给后面执行的Interceptor。之后便是重要的两部分，连接失败重试（Retry）和继续发起请求（Follow up）两部分。</p><p>在后面的拦截器的请求失败，会抛出两种异常</p><ul><li><p>RouteException<br>这个异常发生在 Request 请求还没有发出去前，就是打开 Socket 连接失败。这个异常是 OkHttp 自定义的异常，是一个包裹类，包裹住了建联失败中发生的各种 Exception 主要发生 <code>ConnectInterceptor</code>建立连接环节，比如连接超时抛出的 <code>SocketTimeoutException</code>，包裹在 <code>RouteException</code> 中</p></li><li><p>IOException<br>这个异常发生在 Request 请求发出并且读取 Response 响应的过程中，TCP 已经连接，或者 TLS 已经成功握手后，连接资源准备完毕。主要发生在 <code>CallServerInterceptor</code> 中，通过建立好的通道，发送请求并且读取响应的环节。比如读取超时抛出的 <code>SocketTimeoutException</code></p></li></ul><p>那么针对以上的异常，OkHttp 使用 recover 方法判断是否可以重试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Report and attempt to recover from a failure to communicate with a server. Returns true if</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> e&#125; is recoverable, or false if the failure is permanent. Requests with a body can only</span></span><br><span class="line"><span class="comment"> * be recovered if the body is buffered or if the failure occurred before the request has been</span></span><br><span class="line"><span class="comment"> * sent.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">recover</span><span class="params">(IOException e, <span class="keyword">boolean</span> requestSendStarted, Request userRequest)</span> </span>&#123;</span><br><span class="line">  streamAllocation.streamFailed(e);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The application layer has forbidden retries.</span></span><br><span class="line">  <span class="keyword">if</span> (!client.retryOnConnectionFailure()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We can't send the request body again.</span></span><br><span class="line">  <span class="keyword">if</span> (requestSendStarted &amp;&amp; userRequest.body() <span class="keyword">instanceof</span> UnrepeatableRequestBody) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This exception is fatal.</span></span><br><span class="line">  <span class="keyword">if</span> (!isRecoverable(e, requestSendStarted)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No more routes to attempt.</span></span><br><span class="line">  <span class="keyword">if</span> (!streamAllocation.hasMoreRoutes()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// For failure recovery, use the same route selector with a new connection.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单的描述一下四个条件：</p><ul><li>在 OkHttpClient是否配置了<code>retryOnConnectionFailure(true)</code></li><li>不是建立连接阶段发生的异常，同时请求的内容不是可重复发送</li><li>使用 <code>isRecoverable</code> 过滤不可恢复异常，如 <code>ProtocolException</code>,<code>InterruptedIOException</code>,<code>CertificateException</code>和<code>SSLPeerUnverifiedException</code>。</li><li>已经没有其他的路由可以使用。<code>RouteSelector</code> 封装了选择可用路由进行连接的策略。</li></ul><p>如果连接成功，即获得了 Response 响应，但不一定是 200 OK，还有一些其他情况。比如 3xx 重定向，401 未授权等，这些响应码是允许我们再次发起请求的。比如重定向，获取目标地址后，再次发起请求。又比如 401 未授权，可以在 Request 中新增头部 “Authorization” 授权信息再次发起请求等。这时候就需要 <code>followUpRequest</code>对response的响应码进行判断，来确定是否支持再次发起请求。</p><ul><li>未授权（407的代理为授权，401的未授权）—— 在请求中添加 “Proxy-Authorization” 和 “Authorization”</li><li>重定向 （307和308 —— 要求为get和head请求方式）（300，301，302，303） —— 拿到重定向的URL重建Request</li><li>超时 （408 客户端超时） —— 部分服务器会因为客户端请求时间太长而返回 408，此时如果请求体没有实现标记接口 UnrepeatableRequestBody， OkHttp 会再把之前的请求没有修改重新发出</li></ul><h4 id="BridgeInterceptor"><a href="#BridgeInterceptor" class="headerlink" title="BridgeInterceptor"></a>BridgeInterceptor</h4><p><code>BridgeInterceptor</code> 用来添加 http 的header,主要修改目标为 request。主要内容：</p><ul><li>在header中添加一些常用的字段，如 Content-Type,Content-Length或Transfer-Encoding,Host,Connection,Accept_Encoding,Cookie，User-Agent等<br>。</li><li>通过 <code>CookieJar</code> 读取 request 上的cookie</li><li>gzip压缩，同时对response响应数据进行gzip解压。</li></ul><h4 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h4><p><code>CacheInterceptor</code> 用于处理http缓存，若缓存中有所需请求的响应则后续Interceptor不再执行。<br>1、如果在初始化OkhttpClient的时候配置缓存，则从缓存中取caceResponse<br>2、将当前请求request和caceResponse 构建一个CacheStrategy对象<br>3、<code>CacheStrategy</code> 这个策略对象将根据相关规则来决定caceResponse和Request是否有效，如果无效则分别将caceResponse和request设置为null<br>4、经过 <code>CacheStrategy</code> 的处理(步骤3），如果request和caceResponse都置空，直接返回一个状态码为504，且body为<code>Util.EMPTY_RESPONSE</code>的空Respone对象<br>5、经过CacheStrategy的处理(步骤3），resquest 为null而cacheResponse不为null，则直接返回cacheResponse对象<br>6、执行下一个拦截器发起网路请求，<br>7、如果服务器资源没有过期（状态码304）且存在缓存，则返回缓存<br>8、将网络返回的最新的资源（networkResponse）缓存到本地，然后返回networkResponse. </p><h4 id="ConnectInterceptor"><a href="#ConnectInterceptor" class="headerlink" title="ConnectInterceptor"></a>ConnectInterceptor</h4><p><code>ConnectInterceptor</code> 的主要职责是建立与服务器之间的连接，但这个事情它主要是委托给 <code>StreamAllocation</code> 来完成的。如我们前面看到的，<code>StreamAllocation</code>对象是在 <code>RetryAndFollowUpInterceptor</code>中分配的。<br><code>ConnectInterceptor</code> 通过 <code>StreamAllocation</code> 创建了 <code>HttpStream</code>对象和<code>RealConnection</code>对象，随后便调用了<code>realChain.proceed()</code>，向连接中写入HTTP请求，并从服务器读回响应。</p><h4 id="CallServerInterceptor"><a href="#CallServerInterceptor" class="headerlink" title="CallServerInterceptor"></a>CallServerInterceptor</h4><p><code>CallServerInterceptor</code> 首先将http请求头部发给服务器，如果http请求有body的话，会再将body发送给服务器，继而通过httpStream.finishRequest()结束http请求的发送。随后便是从连接中读取服务器返回的http响应，并构造Response。如果请求的header或服务器响应的header中，Connection值为close，<code>CallServerInterceptor</code>还会关闭连接。</p><p>最后便是返回Response。</p><h3 id="代理路由与网络请求"><a href="#代理路由与网络请求" class="headerlink" title="代理路由与网络请求"></a>代理路由与网络请求</h3><p>在理顺了OkHttp的请求框架之后，剩下的就是最基础也是最重要的部分——okhttp是如何处理代理和路由的以及怎么建立TCP连接。这一块可能需要从计算机网络部分开始讲起，所以暂且放着等日后复习完计算机网络基础再来补充（其实就是觉得细节太多自己把捏不住）</p><p>可以先参考一下几篇文章:</p><p><a href="https://www.jianshu.com/p/5c98999bc34f" target="_blank" rel="noopener">OkHttp3中的代理与路由</a><br><a href="https://www.jianshu.com/p/a85ef3ace894" target="_blank" rel="noopener">OKHttp全解析系列（七） — OKHttp中的Route和RouteSelector</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 高级进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强大的Glide图片处理框架</title>
      <link href="/2018/06/11/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E5%BC%BA%E5%A4%A7%E7%9A%84Glide%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/06/11/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E5%BC%BA%E5%A4%A7%E7%9A%84Glide%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="强大的Glide图片处理框架"><a href="#强大的Glide图片处理框架" class="headerlink" title="强大的Glide图片处理框架"></a>强大的Glide图片处理框架</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Glide是一个快速高效的Android图片加载库，注重于平滑的滚动。Glide提供了易用的API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。</p><p>Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(fragment).load(url).into(imageView);</span><br></pre></td></tr></table></figure><p>Glide使用简明的流式语法API,在大部分情况下一行代码搞定图片加载。</p><p>Glide 充分考虑了Android图片加载性能的两个关键方面：</p><ul><li>图片解码速度</li><li>解码图片带来的资源压力</li></ul><p>为了让用户拥有良好的App使用体验，图片不仅要快速加载，而且还不能因为过多的主线程I/O或频繁的垃圾回收导致页面的闪烁和抖动现象。</p><p>Glide使用了多个步骤来确保在Android上加载图片尽可能的快速和平滑：</p><ul><li>自动、智能地下采样(downsampling)和缓存(caching)，以最小化存储开销和解码次数；</li><li>积极的资源重用，例如字节数组和Bitmap，以最小化昂贵的垃圾回收和堆碎片影响；</li><li>深度的生命周期集成，以确保仅优先处理活跃的Fragment和Activity的请求，并有利于应用在必要时释放资源以避免在后台时被杀掉。</li></ul><p>官方文档：<a href="https://muyangmin.github.io/glide-docs-cn/" target="_blank" rel="noopener">快速高效的Android图片加载库</a></p><h2 id="重要设计原理"><a href="#重要设计原理" class="headerlink" title="重要设计原理"></a>重要设计原理</h2><p>首先Glide会根据with传入的(context)绑定自己内部的生成Fragment的内部LifeCycle,以保证能跟随其生命周期加载图片，停止图片加载（ApplicationContent无法与生命周期绑定）。</p><p>Glide 缓存<br>glide缓存分为两个部分，一部分为内存缓存另一部分为磁盘缓存。在内存缓存中，大部分缓存是放在以LruCache为基础的Map中，但是当图片在被使用时是会移动ActiveResource中避免在LruCache被回避。在磁盘缓存中，有四种缓存策略：无缓存，只缓存缩略图，只缓存原图，缓存原图和缩略图。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>Glide初始化过程主要在 Glide 类里面的<code>initializeGlide</code> 方法中进行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initializeGlide</span><span class="params">(@NonNull Context context, @NonNull GlideBuilder builder)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 先获取AppGlideModule</span></span><br><span class="line">  GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();</span><br><span class="line">  List&lt;com.bumptech.glide.<span class="keyword">module</span>.GlideModule&gt; manifestModules = Collections.emptyList();</span><br><span class="line">  <span class="keyword">if</span> (annotationGeneratedModule == <span class="keyword">null</span> || annotationGeneratedModule.isManifestParsingEnabled()&#123;</span><br><span class="line">    <span class="comment">//获取 manifest 上 GlideModule</span></span><br><span class="line">    manifestModules = <span class="keyword">new</span> ManifestParser(applicationContext).parse();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (annotationGeneratedModule != <span class="keyword">null</span></span><br><span class="line">      &amp;&amp; !annotationGeneratedModule.getExcludedModuleClasses().isEmpty()) &#123;</span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; excludedModuleClasses =</span><br><span class="line">        annotationGeneratedModule.getExcludedModuleClasses();</span><br><span class="line">    Iterator&lt;com.bumptech.glide.<span class="keyword">module</span>.GlideModule&gt; iterator = manifestModules.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">      com.bumptech.glide.<span class="keyword">module</span>.GlideModule current = iterator.next();</span><br><span class="line">      <span class="keyword">if</span> (!excludedModuleClasses.contains(current.getClass())) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"AppGlideModule excludes manifest GlideModule: "</span> + current);</span><br><span class="line">      &#125;</span><br><span class="line">      iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (com.bumptech.glide.<span class="keyword">module</span>.GlideModule glideModule : manifestModules) &#123;</span><br><span class="line">      Log.d(TAG, <span class="string">"Discovered GlideModule from manifest: "</span> + glideModule.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每个GlideModule调用它们内部的两个方法 applyOptions 和 registerComponents</span></span><br><span class="line">  RequestManagerRetriever.RequestManagerFactory factory =</span><br><span class="line">      annotationGeneratedModule != <span class="keyword">null</span></span><br><span class="line">          ? annotationGeneratedModule.getRequestManagerFactory() : <span class="keyword">null</span>;</span><br><span class="line">  builder.setRequestManagerFactory(factory);</span><br><span class="line">  <span class="keyword">for</span> (com.bumptech.glide.<span class="keyword">module</span>.GlideModule <span class="keyword">module</span> : manifestModules) &#123;</span><br><span class="line">    <span class="keyword">module</span>.applyOptions(applicationContext, builder);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (annotationGeneratedModule != <span class="keyword">null</span>) &#123;</span><br><span class="line">    annotationGeneratedModule.applyOptions(applicationContext, builder);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 利用Builder构建Glide</span></span><br><span class="line">  Glide glide = builder.build(applicationContext);</span><br><span class="line">  <span class="keyword">for</span> (com.bumptech.glide.<span class="keyword">module</span>.GlideModule <span class="keyword">module</span> : manifestModules) &#123;</span><br><span class="line">    <span class="keyword">module</span>.registerComponents(applicationContext, glide, glide.registry);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (annotationGeneratedModule != <span class="keyword">null</span>) &#123;</span><br><span class="line">    annotationGeneratedModule.registerComponents(applicationContext, glide, glide.registry);</span><br><span class="line">  &#125;</span><br><span class="line">  applicationContext.registerComponentCallbacks(glide);</span><br><span class="line">  Glide.glide = glide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如我们所知，在使用Glide的时候可以自定义 <code>GlideModule</code> 在 <code>AndroidManifest</code> 中声明也可以在创建继承 <code>AppGlideModule</code> 的Module类来进行设置（此处为4.0特性，通过apt解析Annotation得到类）。<strong>继承AppGlideModule类的GLideModule可以设置是否需要读取在AndroidManifest上配置的GlideModule。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">override fun <span class="title">applyOptions</span><span class="params">(context: Context, builder: GlideBuilder)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//设置内存缓存大小</span></span><br><span class="line">       val maxMemory = Runtime.getRuntime().maxMemory().toInt()<span class="comment">//获取系统分配给应用的总内存大小</span></span><br><span class="line">       val memoryCacheSize = maxMemory / <span class="number">8L</span><span class="comment">//设置图片内存缓存占用八分之一</span></span><br><span class="line">       builder.setMemoryCache(LruResourceCache(memoryCacheSize))</span><br><span class="line"></span><br><span class="line">       val diskCacheSize = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50L</span><span class="comment">//最多可以缓存多少字节的数据</span></span><br><span class="line">       val path = FileUtils.cacheDir</span><br><span class="line">       builder.setDiskCache(DiskLruCacheFactory(path, <span class="string">"glide"</span>, diskCacheSize))</span><br><span class="line">       <span class="comment">//builder.setDiskCache(new InternalCacheDiskCacheFactory(context,"cacheDirectoryName", 200*1024*1024));//设置文件缓存的大小为200M</span></span><br><span class="line">       <span class="comment">//builder.setMemoryCache(new LruResourceCache(yourSizeInBytes));//设置内存缓存大小</span></span><br><span class="line">       <span class="comment">//builder.setBitmapPool(new LruBitmapPool(sizeInBytes));//bitmap池大小</span></span><br><span class="line">       <span class="comment">//builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);//bitmap格式 default is RGB_565</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>GlideModule 中可以设置Glide的一些配置，比如内存大小，缓存文件保存位置，图片默认解码类型等。</p></blockquote><p>GlideModule 中除去设置配置属性外，也可以注册自定义组件，属于GlideModule中的第二个方法中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(@NonNull Context context, @NonNull Glide glide,</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull Registry registry)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Default empty impl.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册自定义的组件的作用后面再说。</p><p>在调用GlideModule的 <code>registerComponents</code> 方法之前会通过Builder生成Glide实例。</p><p><code>Builder.build()</code>方法中主要是构建线程池（包括sourceExecutor ，diskCacheExecutor ），缓存大小和缓存器，默认的连接监听工厂（connectivityMonitorFactory ），Engine对象和RequestManagerRetriever 对象等等。</p><ol><li>Engine对象<br>在创建Engine对象时传递了几个重要的参数，分别是线程池，内存缓存和硬盘缓存对象等。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">engine =</span><br><span class="line">    <span class="keyword">new</span> Engine(</span><br><span class="line">        memoryCache,</span><br><span class="line">        diskCacheFactory,</span><br><span class="line">        diskCacheExecutor,</span><br><span class="line">        sourceExecutor,</span><br><span class="line">        GlideExecutor.newUnlimitedSourceExecutor(),</span><br><span class="line">        GlideExecutor.newAnimationExecutor(),</span><br><span class="line">        isActiveResourceRetentionAllowed);</span><br></pre></td></tr></table></figure></li></ol><p>Engine是一个非常重要的对象，后面扮演着重要的角色。</p><ol><li>RequestManagertRetriever 对象<br>当开发者不传入自定义的RequestManagertFactory时，就会使用Glide自身默认的DEFAULT_FACTORY.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestManagerFactory DEFAULT_FACTORY = <span class="keyword">new</span> RequestManagerFactory() &#123;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestManager <span class="title">build</span><span class="params">(@NonNull Glide glide, @NonNull Lifecycle lifecycle,</span></span></span><br><span class="line"><span class="function"><span class="params">      @NonNull RequestManagerTreeNode requestManagerTreeNode, @NonNull Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestManager(glide, lifecycle, requestManagerTreeNode, context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>而其中的 RequestManager 就是Glide请求的一个管理器。</p><ol><li>Register对象</li></ol><p>GLide中的 Register 主要是添加很多的注册或解析方式，这在后面用来解析是从内存，文件或是网络获取资源有着重要的作用，而且它每一类解析方式都会提供多个方法，一种方式获取不到将会使用另外一种，知道获取到资源为止，来看下它的register和append方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ModelLoaderRegistry modelLoaderRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> EncoderRegistry encoderRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ResourceDecoderRegistry decoderRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ResourceEncoderRegistry resourceEncoderRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DataRewinderRegistry dataRewinderRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TranscoderRegistry transcoderRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImageHeaderParserRegistry imageHeaderParserRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> &lt;TResource&gt; <span class="function">Registry <span class="title">register</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull Class&lt;TResource&gt; resourceClass, @NonNull ResourceEncoder&lt;TResource&gt; encoder)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> append(resourceClass, encoder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> &lt;TResource&gt; <span class="function">Registry <span class="title">append</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull Class&lt;TResource&gt; resourceClass, @NonNull ResourceEncoder&lt;TResource&gt; encoder)</span> </span>&#123;</span><br><span class="line">  resourceEncoderRegistry.append(resourceClass, encoder);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不同的注册方法对应着不同的 Register 对象体。</p><h3 id="with-方法"><a href="#with-方法" class="headerlink" title="with()方法"></a>with()方法</h3><p>Glide.with()是Glide的一组静态方法，有好几个重载方法，能够传入参数有 Activity，Context，FragmentActivity，Fragment和View<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with(android.app.Activity)</span><br><span class="line">with(android.app.Fragment)</span><br><span class="line">with(android.support.v4.app.Fragment)</span><br><span class="line">with(android.support.v4.app.FragmentActivity)</span><br><span class="line">with(android.view)</span><br></pre></td></tr></table></figure></p><p>每一个with()方法重载的代码都非常简单，都是调用 <code>getRetriever(activity).get(activity)</code>，返回一个RequestManager对象。在这里我们将入参分为两类，一类是Application，<br>一类是非Application</p><ol><li>当传入Application 或在非主线程中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RequestManager <span class="title">getApplicationManager</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Either an application context or we're on a background thread.</span></span><br><span class="line">  <span class="keyword">if</span> (applicationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (applicationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Normally pause/resume is taken care of by the fragment we add to the fragment or</span></span><br><span class="line">        <span class="comment">// activity. However, in this case since the manager attached to the application will not</span></span><br><span class="line">        <span class="comment">// receive lifecycle events, we must force the manager to start resumed using</span></span><br><span class="line">        <span class="comment">// ApplicationLifecycle.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">        Glide glide = Glide.get(context.getApplicationContext());</span><br><span class="line">        applicationManager =</span><br><span class="line">            factory.build(</span><br><span class="line">                glide,</span><br><span class="line">                <span class="keyword">new</span> ApplicationLifecycle(),</span><br><span class="line">                <span class="keyword">new</span> EmptyRequestManagerTreeNode(),</span><br><span class="line">                context.getApplicationContext());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> applicationManager;</span><br></pre></td></tr></table></figure></li></ol><p>其实这是最简单的一种情况，因为Application对象的生命周期即应用程序的生命周期，因此Glide并不需要做什么特殊的处理，它自动就是和应用程序的生命周期是同步的，如果应用程序关闭的话，Glide的加载也会同时终止。</p><ol><li>非Application且在主线程中<br>此时不论传入Activity、FragmentActivity、Fragment最终都会调用<code>supportFragmentGet</code>或<code>fragmentGet</code>方法，而这两个方法最终流程都是一致的那就是会向当前的Activity当中添加一个隐藏的Fragment。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RequestManager <span class="title">supportFragmentGet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">    @NonNull FragmentManager fm,</span></span></span><br><span class="line"><span class="function"><span class="params">    @Nullable Fragment parentHint,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isParentVisible)</span> </span>&#123;</span><br><span class="line">  SupportRequestManagerFragment current =</span><br><span class="line">      getSupportRequestManagerFragment(fm, parentHint, isParentVisible);</span><br><span class="line">  RequestManager requestManager = current.getRequestManager();</span><br><span class="line">  <span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">    Glide glide = Glide.get(context);</span><br><span class="line">    requestManager =</span><br><span class="line">        factory.build(</span><br><span class="line">            glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class="line">    current.setRequestManager(requestManager);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> requestManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>Glide通过添加隐藏Fragment的方法以获知Activity的生命周期，因为Fragment可以感知Activity的生命周期，这种技巧也可以在<code>RxPermissions</code>这个开源库中看到。</p><h3 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h3><p>在调用with方法获取到RequestManager对象的前提下，调用load方法，并传递url参数.<br>这里并没有直接的去加载url获取资源，而是首先调用asDrawable方法来配置图片的信息，其实就是说加载获取的图片资源是转换为drawale或是bitmap或是gif进行图片显示，默认的是使用drawale，也可以使用asGif()/asBitmap()来设置它是已什么形式来展示。load方法目的是为了获取RequestBuilder对象。完成asDrawable方法对RequestBuilder的创建后才调用load方法来传递我们的url地址。</p><p>在 RequestBuilder 对象中，可以通过不停调用 RequestBuilder 对象中的方法赋予自己想要的一些设置，如<code>apply(RequestOptions)</code>,<code>transition(TransitionOptions)</code>,<code>listener(RequestListener)</code>,<code>error(errorBuilder)</code>和<code>thumbnail(RequestBuilder)</code>等。</p><p>load()本质是生成一个RequestBuilder并赋予相应的属性和设置。</p><h3 id="into"><a href="#into" class="headerlink" title="into()"></a>into()</h3><p>在 into() 内容过于繁多，我这里就简单介绍整个流程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">into()  <span class="comment">//传入 ImageView,并通过ImageViewTargetFactory将其转化为 ViewTarget</span></span><br><span class="line">-&gt; buildRequest() <span class="comment">// 通过一系列的跳转最终调用到 `SingleRequest.obtain`方法返回SingleRequest。</span></span><br><span class="line">-&gt; requestManaget.track(target,request) <span class="comment">//通过RequestManager启动request</span></span><br><span class="line">-&gt; request.begin() <span class="comment">//判断model是否为空为空直接调用onLoadFailed加载失败</span></span><br><span class="line">-&gt; onSizeReady() <span class="comment">// 获取ImageView的宽高来觉得要加载图片的尺寸</span></span><br><span class="line">-&gt; engine.load() <span class="comment">// 所有重要的地方都在这里了。</span></span><br></pre></td></tr></table></figure></p><p>先来梳理下 engine.load()方法里面做了什么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">①：判断是否在主线程运行，说明到目前为止还是在主线程执行的，并没有真正的开启子线程。</span></span><br><span class="line"><span class="comment">②：通过keyFactory工厂来构建一个EngineKey对象，key关联着model，也就是url，它很根据model，view的宽高等等属性来构建一个EngineKey对象，这个对象可以用来指定缓存地址，可以用来从缓存中查找资源等。</span></span><br><span class="line"><span class="comment">③：根据创建的key对象分别调用loadFromCache和loadFromActiveResources方法来从内存中查找是否有缓存资源，如果有，则回调cb.onResourceReady来直接设置图片了。</span></span><br><span class="line"><span class="comment">④：分别使用engineJobFactory和decodeJobFactory构建EngineJob和DecodeJob对象，这两个对象是真正的加载资源的两个重要类，EngineJob对象负责开启线程去加载资源，并且加载得资源后转换到主线程并进行回调；DecodeJob是真正的执行者，它就是去网络加载资源的地方，EngineJob开启线程，真正执行的是DecodeJob，DecodeJob之后完毕之后叫道EngineJob去分发回调。这就是这两个类的关系。</span></span><br><span class="line"><span class="comment">⑤：EngineJob和DecodeJob的构建是基本一致的，我们看看比较复杂的DecodeJob的构建：在build方法中，首先通过pool来创建一个DecodeJob对象，然后调用DecodeJob对象的init方法进行初始化，在初始化中值得注意的是调用了decodeHelper对象的init方法。decodeHelper方法是DecodeJob的重要辅助类，后面我们会详细的接触它。</span></span><br><span class="line"><span class="comment">⑥：上面也提到回调，这里先cb添加到engineJob.addCallback();中，然后调用EngineJob的start方法来开启线程。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">  <span class="keyword">public</span> &lt;R&gt; <span class="function">LoadStatus <span class="title">load</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      GlideContext glideContext,</span></span></span><br><span class="line"><span class="function"><span class="params">      Object model,</span></span></span><br><span class="line"><span class="function"><span class="params">      Key signature,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">      Class&lt;?&gt; resourceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">      Class&lt;R&gt; transcodeClass,</span></span></span><br><span class="line"><span class="function"><span class="params">      Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">      DiskCacheStrategy diskCacheStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> isTransformationRequired,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> isScaleOnlyOrNoTransform,</span></span></span><br><span class="line"><span class="function"><span class="params">      Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> isMemoryCacheable,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> useAnimationPool,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> onlyRetrieveFromCache,</span></span></span><br><span class="line"><span class="function"><span class="params">      ResourceCallback cb)</span> </span>&#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="keyword">long</span> startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,</span><br><span class="line">        resourceClass, transcodeClass, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其中内存的缓存策略也作用在这里</span></span><br><span class="line">    EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cb.onResourceReady(active, DataSource.MEMORY_CACHE);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Loaded resource from active resources"</span>, startTime, key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Loaded resource from cache"</span>, startTime, key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineJob&lt;?&gt; current = jobs.get(key, onlyRetrieveFromCache);</span><br><span class="line">    <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">      current.addCallback(cb);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Added to existing load"</span>, startTime, key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineJob&lt;R&gt; engineJob =</span><br><span class="line">        engineJobFactory.build(</span><br><span class="line">            key,</span><br><span class="line">            isMemoryCacheable,</span><br><span class="line">            useUnlimitedSourceExecutorPool,</span><br><span class="line">            useAnimationPool,</span><br><span class="line">            onlyRetrieveFromCache);</span><br><span class="line"></span><br><span class="line">    DecodeJob&lt;R&gt; decodeJob =</span><br><span class="line">        decodeJobFactory.build(</span><br><span class="line">            glideContext,</span><br><span class="line">            model,</span><br><span class="line">            key,</span><br><span class="line">            signature,</span><br><span class="line">            width,</span><br><span class="line">            height,</span><br><span class="line">            resourceClass,</span><br><span class="line">            transcodeClass,</span><br><span class="line">            priority,</span><br><span class="line">            diskCacheStrategy,</span><br><span class="line">            transformations,</span><br><span class="line">            isTransformationRequired,</span><br><span class="line">            isScaleOnlyOrNoTransform,</span><br><span class="line">            onlyRetrieveFromCache,</span><br><span class="line">            options,</span><br><span class="line">            engineJob);</span><br><span class="line"></span><br><span class="line">    jobs.put(key, engineJob);</span><br><span class="line"></span><br><span class="line">    engineJob.addCallback(cb);</span><br><span class="line">    engineJob.start(decodeJob);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">"Started new load"</span>, startTime, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">接上面</span><br><span class="line">-&gt; decodeJob.run() <span class="comment">//真正线程执行的地方</span></span><br><span class="line">-&gt; getNextGenerator() <span class="comment">//getNextGenerator方法中根据stage值来创建对象,返回的是SourceGenerator</span></span><br><span class="line">-&gt; sourceGenerator.startNext() <span class="comment">//这里通过glideContext.getRegistry().getModelLoaders(model)方法获取合适的Loader来进行加载。</span></span><br><span class="line">-&gt; HttpGlideUrlLoader.LoadData() <span class="comment">//如果传入的是url,此时这里就会返回这个Loader</span></span><br><span class="line">-&gt; HttpUrlFetcher.loadDataWithRedirects() <span class="comment">//这里就是利用UrlConnection进行的网络请求</span></span><br><span class="line">-&gt; decodeFromRetrievedData() <span class="comment">//数据请求结束后开始解码</span></span><br><span class="line">-&gt; Registry.getDecodePaths <span class="comment">// 还是通过要转换成的类型如 Drawable.class 从 Registry 中获取相应的解码器，如普通图片的是 BitmaoDrawableTranscoder</span></span><br></pre></td></tr></table></figure><p>真正解码过程<br>①：这里首先遍历decoders集合，分别的获取到ResourceDecoder解码器，还记得我们的decoders都包含哪些解码器吗？没错主要包含两种：BitmapDrawable.class和GifDrawable.class。不记得的往上面翻下，上面已详细的讲解过了。</p><p>②：然后通过rewinder.rewindAndGet()获取我们的InputStream数据流：</p><p>③：通过decoder.handles(data, options)方法来过滤掉不相匹配的解码器，最后解码放回Resouce。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Glide 是一个很复杂的库，很多细节的部分想要完全理解是很花时间的，所以这里我总结一下比较重要的设计理念。</p><ol><li>Glide中通过自己添加一个隐藏的Fragment以实现图片加载的生命周期化</li><li>Glide缓存分为两个部分，一部分为内存缓存另一部分为磁盘缓存。在内存缓存中，大部分缓存是放在以LruCache为基础的Map中，但是当图片在被使用时是会移动ActiveResource中避免在LruCache被回避。在磁盘缓存中，有四种缓存策略：无缓存，只缓存缩略图，只缓存原图，缓存原图和缩略图。</li><li>通过 Registry 注册方法灵活的实现数据的转码策略。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 高级进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restful风格的Retrofit2网络请求器</title>
      <link href="/2018/05/22/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%20%E2%80%94%E2%80%94%20Restful%E9%A3%8E%E6%A0%BC%E7%9A%84Retrofit2%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%99%A8/"/>
      <url>/2018/05/22/Android%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%20%E2%80%94%E2%80%94%20Restful%E9%A3%8E%E6%A0%BC%E7%9A%84Retrofit2%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Restful风格的Retrofit2网络请求器"><a href="#Restful风格的Retrofit2网络请求器" class="headerlink" title="Restful风格的Retrofit2网络请求器"></a>Restful风格的Retrofit2网络请求器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Retrofit2 以其简易的接口配置、强大的扩展支持、优雅的代码结构受到大家的追捧。Retrofit2 的 API 接口定义极具 Restful 风格，且很好的与okhttp3相互结合形成一个高效简洁的网络请求库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过接口定义你的api</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</span><br><span class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再由Retrofit生成 `GitHubService`接口相对应的方法</span></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">    .baseUrl(<span class="string">"https://api.github.com/"</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">GitHubService service = retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过GitHubService生成的方法进行网络请求</span></span><br><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(<span class="string">"octocat"</span>);</span><br></pre></td></tr></table></figure><p>详情请见<a href="http://square.github.io/retrofit/#introduction" target="_blank" rel="noopener">Retrofit2官方教程</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Retrofit2库源码中最让人眼前一亮的设计是通过java的动态代理将接口中的每个方法和注解转化成一个单独的<code>ServiceMethod</code>，之后在<code>ServiceMethod</code>中查找合适的<code>CallAdapterFactory</code>和<code>ConverterFactory</code>对数据进行处理。</p><ol><li>Java的注解和动态代理原理</li><li>CallAdapter及其Factory设计思路</li><li>Converter及其Factory设计思路</li></ol><p>以上亦是整个库的核心原理。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">    .baseUrl(<span class="string">"https://api.github.com/"</span>)</span><br><span class="line">    .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">GitHubService service = retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure><p>整个流程由<code>Retrofit</code>的build开始，将一些必须的参数如<code>baseUrl</code>,<code>CallAdapterFactory</code>,<code>ConverterFactory</code>传入到<code>Retrofit</code>中，之后通过create方法对接口文件中的方法建立动态代理，使得每当方法被调用时都能走到代理的方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class="line">    Utils.validateServiceInterface(service);</span><br><span class="line">    <span class="keyword">if</span> (validateEagerly) &#123;</span><br><span class="line">      eagerlyValidateMethods(service);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class="line">        <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">final</span> Platform platform = Platform.get();</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class="line">            <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">              <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class="line">              <span class="keyword">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class="line">            &#125;</span><br><span class="line">            ServiceMethod&lt;Object, Object&gt; serviceMethod =</span><br><span class="line">                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</span><br><span class="line">            OkHttpCall&lt;Object&gt; okHttpCall = <span class="keyword">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br><span class="line">            <span class="keyword">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>上面已经说过，当service中的方法被调用时会走入之前的动态代理方法中，那看看该代理方法中做了哪些事情。<br>首先通过 <code>ServiceMethodCache</code> 查看是否有该方法的缓存，如果没有则通过ServiceMethod的Builder传入retrofit构建出来。</p><p>在 <code>ServiceMethod</code> 的builder构建方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ServiceMethod <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 查找 合适的 calladapter</span></span><br><span class="line">callAdapter = createCallAdapter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找合适的结果转化器</span></span><br><span class="line">responseType = callAdapter.responseType();</span><br><span class="line">responseConverter = createResponseConverter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译api方法上的注解，并转化为相应http请求信息，如get,post,header</span></span><br><span class="line"><span class="keyword">for</span> (Annotation annotation : methodAnnotations) &#123;</span><br><span class="line">parseMethodAnnotation(annotation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (httpMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> methodError(<span class="string">"HTTP method annotation is required (e.g., @GET, @POST, etc.)."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hasBody) &#123;</span><br><span class="line"><span class="keyword">if</span> (isMultipart) &#123;</span><br><span class="line">  <span class="keyword">throw</span> methodError(</span><br><span class="line">      <span class="string">"Multipart can only be specified on HTTP methods with request body (e.g., @POST)."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFormEncoded) &#123;</span><br><span class="line">  <span class="keyword">throw</span> methodError(<span class="string">"FormUrlEncoded can only be specified on HTTP methods with "</span></span><br><span class="line">      + <span class="string">"request body (e.g., @POST)."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法中的参数数据</span></span><br><span class="line"><span class="keyword">int</span> parameterCount = parameterAnnotationsArray.length;</span><br><span class="line">parameterHandlers = <span class="keyword">new</span> ParameterHandler&lt;?&gt;[parameterCount];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; parameterCount; p++) &#123;</span><br><span class="line">Type parameterType = parameterTypes[p];</span><br><span class="line"><span class="keyword">if</span> (Utils.hasUnresolvableType(parameterType)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> parameterError(p, <span class="string">"Parameter type must not include a type variable or wildcard: %s"</span>,</span><br><span class="line">      parameterType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Annotation[] parameterAnnotations = parameterAnnotationsArray[p];</span><br><span class="line"><span class="keyword">if</span> (parameterAnnotations == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> parameterError(p, <span class="string">"No Retrofit annotation found."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (relativeUrl == <span class="keyword">null</span> &amp;&amp; !gotUrl) &#123;</span><br><span class="line"><span class="keyword">throw</span> methodError(<span class="string">"Missing either @%s URL or @Url parameter."</span>, httpMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isFormEncoded &amp;&amp; !isMultipart &amp;&amp; !hasBody &amp;&amp; gotBody) &#123;</span><br><span class="line"><span class="keyword">throw</span> methodError(<span class="string">"Non-body HTTP method cannot contain @Body."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFormEncoded &amp;&amp; !gotField) &#123;</span><br><span class="line"><span class="keyword">throw</span> methodError(<span class="string">"Form-encoded method must contain at least one @Field."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isMultipart &amp;&amp; !gotPart) &#123;</span><br><span class="line"><span class="keyword">throw</span> methodError(<span class="string">"Multipart method must contain at least one @Part."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServiceMethod&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CallAdapterFactory和CallAdapter"><a href="#CallAdapterFactory和CallAdapter" class="headerlink" title="CallAdapterFactory和CallAdapter"></a>CallAdapterFactory和CallAdapter</h3><p>再说<code>CallAddapterFactory</code>前，先说说这个是干什么用的。简而言之就是将Retrofit原生默认的call这个请求对象转换成开发者想要的对象，比如说RxJava中Observable之类。</p><p>在动态代理方法中，可以看到有这么一行代码，这里的<code>OkHttpCall</code>是对于OkHttp的一个封装，也就是说我们通过Retrofit进行网络请求实质就是通过OkHttp来进行请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OkHttpCall&lt;Object&gt; okHttpCall = <span class="keyword">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br></pre></td></tr></table></figure></p><p>随之其后的是 callAdapter的adapt方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br></pre></td></tr></table></figure></p><p>serviceMethod 中的 callAdapter 则是在 Retrofit 的 adapterFactories 中查找而得（之前在Retrofit的构建过程中添加<code>addCallAdapterFactory()</code>）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> start = adapterFactories.indexOf(skipPast) + <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = start, count = adapterFactories.size(); i &lt; count; i++) &#123;</span><br><span class="line">     CallAdapter&lt;?, ?&gt; adapter = adapterFactories.get(i).get(returnType, annotations, <span class="keyword">this</span>);</span><br><span class="line">     <span class="keyword">if</span> (adapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> adapter;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>查找规则则是通过在 <code>CallAdapterFactory</code> 的get方法中判断returnType来进行，一旦查找成功后就会返回相应的CallAdapter。</p><blockquote><p>比如说在 Retrofit2 自带的 <code>DefaultCallAdapterFactory</code> 则是判断 <code>getRawType(returnType) == Call.class</code>，若是则返回原生的Call<object>对象</object></p><p>在 <code>Rxjava2CallAdapterFactory</code> 中是判断 returnType 是否等于 <code>Completable</code>、<code>Flowable</code>、<code>Single</code>、<code>Maybe</code>或者<code>Observable</code>，是则返回<code>Rxjava2CallAdapter</code>.</p></blockquote><p>最后在 CallAdapter 的 adapter方法中可以将传入的call对象转换成自己想要的对象。</p><h3 id="ConverterFactory和Converter"><a href="#ConverterFactory和Converter" class="headerlink" title="ConverterFactory和Converter"></a>ConverterFactory和Converter</h3><p>Converter 是负责对请求数据和返回数据进行转换的功能，设计思路与 CallAdapterFactory 相似。在 ConverterFactory中有两个比较重要的方法，一个是 <code>requestBodyConverter</code>,这个方法也是通过判断传入的 Type 类型来决定对请求数据的 <code>RequestBodyConverter</code>器，要求返回<code>Converter&lt;?, RequestBody&gt;</code>类型。<br>另一个是<code>responseBodyConverter</code>,要求返回<code>Converter&lt;ResponseBody, ?&gt;</code>类型。</p><p><code>RequestBodyConverter</code>一般会在 <code>@Body</code>,<code>@Part</code>以及<code>@PartMap</code>的参数解析中使用，用来将请求的数据转换到标准的RequestBody格式。</p><blockquote><p>比如说在 <code>@Part</code> 注解下的参数解析中，由于参数的类型为RequestBody，则ConverterFactory 会优先返回Retrofit自带的 <code>BuiltInConverters</code> 中的 <code>RequestBodyConverter</code>，负责转换RequestBody。</p><p>而在 <code>@Body</code> 注解下的参数解析中，则有可能会进入 <code>GsonConverterFactory</code>的 <code>GsonRequestBodyConverter</code>中，负责将 <code>@Body</code>声明的实体转换成json字符创。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BuiltInConverters下的requestBodyConverter方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class="line">  Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) &#123;</span><br><span class="line"><span class="keyword">if</span> (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) &#123;</span><br><span class="line">  <span class="keyword">return</span> RequestBodyConverter.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GsonConverterFactory 下的 requestBodyConverter 方法</span></span><br><span class="line"><span class="comment">// 来者不拒。。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,</span><br><span class="line">  Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) &#123;</span><br><span class="line">TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> GsonRequestBodyConverter&lt;&gt;(gson, adapter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ResponseBodyConverter</code>则是在 okHttpCall 访问网络结束后调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// OkHttpCall类中的方法</span></span><br><span class="line"><span class="function">Response&lt;T&gt; <span class="title">parseResponse</span><span class="params">(okhttp3.Response rawResponse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//...省略部分代码</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     T body = serviceMethod.toResponse(catchingBody);</span><br><span class="line">     <span class="keyword">return</span> Response.success(body, rawResponse);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">     <span class="comment">// If the underlying source threw an exception, propagate that rather than indicating it was</span></span><br><span class="line">     <span class="comment">// a runtime exception.</span></span><br><span class="line">     catchingBody.throwIfCaught();</span><br><span class="line">     <span class="keyword">throw</span> e;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceMethod类中的方法</span></span><br><span class="line"><span class="comment">/** Builds a method return value from an HTTP response body. */</span></span><br><span class="line"><span class="function">R <span class="title">toResponse</span><span class="params">(ResponseBody body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> responseConverter.convert(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中    <code>serviceMethod.toResponse()</code>即会调用之前通过<code>ConverterFactory</code>得到的<code>responseConverter.convert</code>方法，将ResponseBody转化为自己想要的数据类型。<br>这里要注意一点，在之前说过的CallAdapter中有一个<code>responseType()</code>方法，此方法返回的数据类型要与<code>responseConverter.convert(body)</code>的返回类型保持一致。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>Retrofit 本身是通过 OkHttp3 实现的网络请求，首先通过动态代理的方式为api service 中的每一个方法一一对应的生成了ServiceMethod；同时通过提供自定义<code>CallAdapterFactory</code>的方式能够将默认的Call请求方法转换成开发者自己想要的数据对象；不知如此，还通过自定义<code>ConverterFactory</code>的方式能够自由的进行请求数据与RequestBody,ResponseBody与返回数据的数据转换。</p><p>通过以上所介绍，Retrofit2比较重要的几个原理部分都进行了简单说明。<br>Retrofit2实现了自身强大的功能与扩展性，能够方便的实现开发者自己想要的功能，同时其美丽而又简洁的代码也是我们借鉴的一个目标。</p><hr><p>参考资料：  </p><ol><li><a href="http://square.github.io/retrofit/#introduction" target="_blank" rel="noopener">Retrofit2官方文档</a>  </li><li><a href="https://segmentfault.com/a/1190000005638577" target="_blank" rel="noopener">深入浅出 Retrofit</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 高级进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android高级开发进阶之路——前言</title>
      <link href="/2018/05/10/Android%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%89%8D%E8%A8%80/"/>
      <url>/2018/05/10/Android%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Android高级开发进阶之路"><a href="#Android高级开发进阶之路" class="headerlink" title="Android高级开发进阶之路"></a>Android高级开发进阶之路</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android基础知识已经掌握的差不多了，该往高级开发进阶了。高级其实也是个概念，没有特定的划分区别。按照就我理解的Android高级开发我把它分成3个部分。</p><ul><li>理解并熟悉Android框架。你不仅要熟悉并掌握Android上的一些常用机制比如View的绘制，触摸事件的传递等，还要深入理解Android 的FrameWork框架。</li><li>有着扎实的基础知识，像java，网络，数据库和数据结构等知识是必不可少的。能够快速阅读第三方代码且能理解其设计思路，一些常用的第三方库要能很好的了解其原理。</li><li>代码框架设计能力和项目的把控能力，前者要求能够实现符合项目的可用框架并能够随着需求迭代扩展，后者则表示要能够作为一个项目的负责人把控项目进度，风险等。</li></ul><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>基于上方三个部分，我罗列了一下准备要输出的文章列表，以便梳理一下自身的知识体系。</p><h3 id="第一部分：开源框架"><a href="#第一部分：开源框架" class="headerlink" title="第一部分：开源框架"></a>第一部分：开源框架</h3><ol><li>Restful风格的Retrofit2网络请求器</li><li>OkHttp3的网络编程</li><li>强大的Glide图片处理框架</li><li>基于观察者模式的RxJava2响应式编程</li><li>小巧简便的ORM持久库Room</li><li>Dump分析利器LeakCanary</li><li>应用模块连接器Router</li><li>热更新框架原理及选择</li><li>Dragger2注解框架</li></ol><h3 id="第二部分：基础知识"><a href="#第二部分：基础知识" class="headerlink" title="第二部分：基础知识"></a>第二部分：基础知识</h3><ol><li>计算机操作系统</li><li>Linux操作系统</li><li>数据结构与图论</li><li>数据库的高级进阶</li><li>Java虚拟机特性</li><li>kotlin的使用</li><li>算法导论</li><li>设计模式</li></ol><h3 id="第三部分：Android进阶"><a href="#第三部分：Android进阶" class="headerlink" title="第三部分：Android进阶"></a>第三部分：Android进阶</h3><ol><li>View的绘制流程</li><li>事件分发</li><li>动画框架</li><li>Handler框架</li><li>Binder机制</li><li>性能优化</li><li>Android架构概述</li><li>Android Architecture Components 组件</li></ol><h3 id="第四部分：Android-FrameWork"><a href="#第四部分：Android-FrameWork" class="headerlink" title="第四部分：Android FrameWork"></a>第四部分：Android FrameWork</h3><ol><li>Android FrameWork层概述</li><li>Activity 的启动流程</li><li>Activity Manager</li><li>Window Manager</li><li>Content Provider</li><li>View System</li><li>Notification Manager</li><li>Package Manager</li><li>Telephony Manager</li><li>Resource Manager</li><li>Location Manager</li><li>XMPP Service</li></ol><h3 id="第五部分：个人擅长领域"><a href="#第五部分：个人擅长领域" class="headerlink" title="第五部分：个人擅长领域"></a>第五部分：个人擅长领域</h3><p>这个部分暂时还没有计划要写的内容，不过一般都是对某一个技术领域的专研和心得之类的。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>貌似有点多啊，上面的列表仿佛RPG游戏的任务清单一样，不过只有这样才有动力去肝啊~</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 高级进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影咖—简单的视频聚合应用</title>
      <link href="/2018/02/15/%E5%BD%B1%E5%92%96%E2%80%94%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%86%E9%A2%91%E8%81%9A%E5%90%88%E5%BA%94%E7%94%A8/"/>
      <url>/2018/02/15/%E5%BD%B1%E5%92%96%E2%80%94%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%86%E9%A2%91%E8%81%9A%E5%90%88%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="影咖-客户端"><a href="#影咖-客户端" class="headerlink" title="影咖 客户端"></a>影咖 客户端</h2><h3 id="关于-影咖"><a href="#关于-影咖" class="headerlink" title="关于 影咖"></a>关于 影咖</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/vipeo_panel.jpg" alt="效果图"></p><p>这是一款视频聚合的软件，产品设计和Android平台由我负责，iOS端以及后台则由另外的小伙伴负责。原来的初衷是由后台爬取视频网站的信息在保存至自建的服务器数据库中（不包括视频），然后再由客户端直接调用其爬取的H5链接地址直接观看视频，最后通过共享会员的方式来进行收费。（但由于存在法律上的风险以及iOS端的审核一直过不去导致项目沉底了）</p><p>整个APP的页面设计都是由自己设计的，首页的页面还曾改版过两次，风格则是参考大多数市场上的资讯App，比如豆瓣，追番应用等，图标也是自己找网上的图片魔改而来所以有点丑..但应用的功能还是完整实现了，所以就在博客上记录下留个纪念。</p><p>对了，还曾研究过在GitHub上的 you-get 开源库，并结合flask做了个小型的视频抓取服务器，能够通过输入视频地址返回播放真实地址的json数据，当然这也是存在法律风险的，只能自己研究研究，拿出去就是见光死的东西。</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul><li>微信第三方登陆；</li><li>首页显示推荐视频和视频排行榜；</li><li>追剧界面，可以浏览当前正在热播的电视剧；</li><li>分类界面，分为电视剧，电影，动画和综艺四大块；</li><li>为各大视频网站的Web页做适配，实现web视频页在Android上的全屏播放，比如配置WebView 上的UserAgent，去除广告横幅等；</li><li>接入 ijkplayer 开源库，实现本地视频的播放；</li><li>MVP架构，Rxjava2异步请求，Retrofit2和okhttp3作为网络请求，Glide图片缓存管理；</li><li>接入小米推送，友盟SDK；</li><li>个人信息界面，关于和反馈界面；</li><li>历史记录；</li><li>购买会员服务；</li><li>视频搜索</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 客户端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（二十）—— Android 上的调色板 Palette</title>
      <link href="/2018/02/07/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94Android%20%E4%B8%8A%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF%20Palette/"/>
      <url>/2018/02/07/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94Android%20%E4%B8%8A%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF%20Palette/</url>
      
        <content type="html"><![CDATA[<p>Android 上有一个比较短小精悍的库 —— Palette，整个库只有<code>Palette</code>、<code>Target</code>和<code>ColorCutQuantizer</code>三个文件， 作用是从图像中提取突出的颜色提供UI使用。<br><a id="more"></a></p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>导入依赖包<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.android.support:palette-v7:27.0.2'</span></span><br></pre></td></tr></table></figure></p><p>简单使用<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要传入要提取的图片 bitmap</span></span><br><span class="line"><span class="keyword">val</span> builder = Palette.from(bitmap)</span><br><span class="line">builder.generate(Palette.PaletteAsyncListener &#123; palette -&gt;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * palette.getVibrantSwatch();       //获取到充满活力的色调</span></span><br><span class="line"><span class="comment">     * palette.getDarkVibrantSwatch();    //获取充满活力的黑</span></span><br><span class="line"><span class="comment">     * palette.getLightVibrantSwatch();   //获取充满活力的亮</span></span><br><span class="line"><span class="comment">     * palette.getMutedSwatch();          //获取柔和的色调</span></span><br><span class="line"><span class="comment">     * palette.getDarkMutedSwatch();     //获取柔和的黑</span></span><br><span class="line"><span class="comment">     * palette.getLightMutedSwatch();   //获取柔和的亮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//获取color值</span></span><br><span class="line">    <span class="keyword">val</span> swatch: Palette.Swatch? = palette.lightVibrantSwatch</span><br><span class="line">    <span class="keyword">val</span> color = swatch.rgb</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如上代码所示，提取图片上的颜色需要传入 bitmap，Palette 默认给了6种提取色调的种类。</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><p>Palette有两种初始化方法，也就是同步和异步方法,使用 Builder构造器时默认使用的是异步方法。每种方法下都可以提供调色板大小参数来设置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最好在线程中使用</span></span><br><span class="line"><span class="comment">// 默认调色板大小.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CALCULATE_NUMBER_COLORS = <span class="number">16</span>;</span><br><span class="line">Palette p = Palette.generate(bitmap);</span><br><span class="line"><span class="comment">//设置调色板大小numcolor</span></span><br><span class="line">Palette p = Palette.generate(bitmap, numcolor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部使用AsyncTask</span></span><br><span class="line">Palette.generateAsync(bitmap, <span class="keyword">new</span> Palette.PaletteAsyncListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGenerated</span><span class="params">(Palette palette)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// palette为生成的调色板</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 设置调色板大小</span></span><br><span class="line">Palette.generateAsync(bitmap, numcolor, <span class="keyword">new</span> Palette.PaletteAsyncListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGenerated</span><span class="params">(Palette palette)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// palette为生成的调色板</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当我们传入 Bitmap 后会首先对 Bitmap 做处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First we'll scale down the bitmap if needed</span></span><br><span class="line"><span class="keyword">final</span> Bitmap bitmap = scaleBitmapDown(mBitmap);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scale the bitmap down as needed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">scaleBitmapDown</span><span class="params">(<span class="keyword">final</span> Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> scaleRatio = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mResizeArea &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bitmapArea = bitmap.getWidth() * bitmap.getHeight();</span><br><span class="line">        <span class="keyword">if</span> (bitmapArea &gt; mResizeArea) &#123;</span><br><span class="line">            scaleRatio = Math.sqrt(mResizeArea / (<span class="keyword">double</span>) bitmapArea);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mResizeMaxDimension &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxDimension = Math.max(bitmap.getWidth(), bitmap.getHeight());</span><br><span class="line">        <span class="keyword">if</span> (maxDimension &gt; mResizeMaxDimension) &#123;</span><br><span class="line">            scaleRatio = mResizeMaxDimension / (<span class="keyword">double</span>) maxDimension;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scaleRatio &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Scaling has been disabled or not needed so just return the Bitmap</span></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Bitmap.createScaledBitmap(bitmap,</span><br><span class="line">            (<span class="keyword">int</span>) Math.ceil(bitmap.getWidth() * scaleRatio),</span><br><span class="line">            (<span class="keyword">int</span>) Math.ceil(bitmap.getHeight() * scaleRatio),</span><br><span class="line">            <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样做为了防止 Bitmap 太大而导致计算消耗大量资源，默认的ResizeArea大小是112*112。</p><p>处理完 Bitmap 后通过 <code>getPixelsFromBitmap(bitmap)</code> 方法获得图像上的像素数组，然后通过 <strong>ColorCutQuantizer</strong> 来处理图像上色值。<br>获取色值后，就可以将这些色值填入 Palette 中以便使用。</p><h3 id="颜色量化算法"><a href="#颜色量化算法" class="headerlink" title="颜色量化算法"></a>颜色量化算法</h3><p><strong>ColorCutQuantizer</strong> 是一个基于 <code>中位切分法(Median cut)</code> 的颜色量化器,主要作用就是从彩色图像中提取其中的主题颜色。</p><p>中位切分算法的原理很简单直接，将图像颜色看作是色彩空间中的长方体（VBox），从初始整个图像作为一个长方体开始，将RGB中最长的一边从颜色统计的中位数一切为二，使得到的两个长方体所包含的像素数量相同，重复上述步骤，直到最终切分得到长方体的数量等于主题颜色数量为止。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/vbox.webp" alt="VBox.png"></p><p>其中RGB最长的一边意思是，比如说在所有像素中Red颜色的分布范围是（10-50），Green的分布范围是（5-100），Blue的分布范围是（0-200）。那么此时就应该以Blue为基准，分成左右两堆，一堆的像素Blue值比中值小，另一堆像素Blue值比中值大。</p><p>但是有时候某些条件下VBOX里面的像素数量很少，比如实现过滤白色和黑色时候，这时候就不能以类似二分法来切割VBOX，需要使用优先级队列进行排序，刚开始时这一队列以VBox仅以VBox所包含的像素数作为优先级考量，当切分次数变多之后，将体积*包含像素数作为优先级。</p><p>除此之外，算法中最重要的部分是统计色彩分布直方图。我们需要将三维空间中的任意一点对应到一维坐标中的整数，这样才能以最快地速度定位这一颜色。如果采用全部的24位信息，那么我们用于保存直方图的数组长度至少要是224=16777216，既然是要提取颜色主题（或是颜色量化），我们可以将颜色由RGB各8位压缩至5位，这样数组长度只有215=32768：</p><p>量化压缩，举例：<br>24bit RGB888 -&gt; 16bit RGB565 的转换</p><blockquote><p>24bit RGB888<br>R7 R6 R5 R4 R3 R2 R1 R0 G7 G6 G5 G4 G3 G2 G1 G0 B7 B6 B5 B4 B3 B2 B1 B0</p><p>16bit RGB656<br>R7 R6 R5 R4 R3 G7 G6 G5 G4 G3 G2 B7 B6 B5 B4 B3</p></blockquote><p>说明：在24bit上以8位为一组数据，在16bit上以5或者6为一组数据，<br>量化位数从8bit到5bit或6bit，取原8bit的高位，量化上做了压缩，却损失了精度。</p><p>量化补偿，举例：16bit RGB565 -&gt; 24bit RGB888 的转换</p><blockquote><p>16bit RGB656 R4 R3 R2 R1 R0 G5 G4 G3 G2 G1 G0 B4 B3 B2 B1 B0</p><p>24ibt RGB888 R4 R3 R2 R1 R0 0 0 0 G5 G4 G3 G2 G1 G0 0 0 B4 B3 B2 B1 B0 0 0 0</p><p>24ibt RGB888 R4 R3 R2 R1 R0 R2 R1 R0 G5 G4 G3 G2 G1 G0 G1 G0 B4 B3 B2 B1 B0 B2 B1 B0</p></blockquote><p>说明：第二行的 24bit RGB888 数据为转换后，未进行补偿的数据，在精度上会有损失<br>第三行的 24bit RGB888 数据为经过量化补偿的数据，对低位做了量化补偿</p><hr><p>参考资料：<br><a href="https://en.wikipedia.org/wiki/Median_cut" target="_blank" rel="noopener">wiki Median_cut</a><br><a href="http://blog.csdn.net/happy08god/article/details/10516871" target="_blank" rel="noopener">RGB565 与 RGB888的相互转换</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何从零开始写一款书籍阅读器</title>
      <link href="/2018/01/06/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E6%AC%BE%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E5%99%A8/"/>
      <url>/2018/01/06/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E6%AC%BE%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>一款书籍阅读器，需要以下功能才能说的上比较完整：</p><ol><li>文字页面展示，即书页；</li><li>页面之间的跳转动画，即翻页动作；</li><li>能够在每一页上记录阅读进度，即书签；</li><li>能够自由选择文字并标注，即笔记；</li><li>能够设置一些属性，如屏幕亮度，字体大小，主体颜色等，即个性化设置。</li></ol><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E5%99%A8.webp" alt="书籍阅读器"></p><p>这篇文章带来的就是如何打造这么一款阅读器。（由于整体代码量比较大，所以我只能说说我的实现思路再加上部分的核心代码来说明，不会有太多的代码展示。）</p><a id="more"></a><h2 id="翻页动作——搭建整个阅读器的框架"><a href="#翻页动作——搭建整个阅读器的框架" class="headerlink" title="翻页动作——搭建整个阅读器的框架"></a>翻页动作——搭建整个阅读器的框架</h2><p>在阅读器上的翻页动作无外乎仿真和平移这两种动画，翻页时需要准备两张页面，一张是当前页，另一张是需要翻转的下一页。翻页的过程就是对这两个页面的剪辑。</p><blockquote><p>这里就不赘述翻页的原理了（仿真翻页可以由贝塞尔曲线计算坐标绘制实现，平移翻页则是简单坐标平移变化），这里提供一些参考链接。<br><a href="https://www.jianshu.com/p/d02362fbd9f2" target="_blank" rel="noopener">实现书籍翻页效果</a><br><a href="https://github.com/eschao/android-PageFlip" target="_blank" rel="noopener">Github上的PageFlip库</a></p></blockquote><p>现在要做的就是将翻页动作与 View 结合起来，我们新建一个 <code>PageAnimController</code> 内部实现翻页动画和动画切换，同时设置 <code>PageCarver</code> 来监听翻页动作，目的是为了能够让 view 检测到翻页动作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PageCarver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">drawPage</span><span class="params">(Canvas canvas, <span class="keyword">int</span> index)</span></span>;<span class="comment">//绘制页内容</span></span><br><span class="line">       <span class="function">Integer <span class="title">requestPrePage</span><span class="params">()</span></span>;<span class="comment">//请求翻到上一页</span></span><br><span class="line">       <span class="function">Integer <span class="title">requestNextPage</span><span class="params">()</span></span>;<span class="comment">//请求翻到下一页</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">requestInvalidate</span><span class="params">()</span></span>;<span class="comment">//刷新界面</span></span><br><span class="line">       <span class="function">Integer <span class="title">getCurrentPageIndex</span><span class="params">()</span></span>;<span class="comment">//获取当前页</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 开始动画的回调</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> isCancel 是否是取消动画</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">onStartAnim</span><span class="params">(<span class="keyword">boolean</span> isCancel)</span></span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 结束动画的回调</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> isCancel 是否是取消动画</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">onStopAnim</span><span class="params">(<span class="keyword">boolean</span> isCancel)</span></span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>新建 <code>BaseReaderView</code> 作为阅读器的基础视图，两者结合以便控制阅读器的翻页效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseReaderView</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">PageAnimController</span>.<span class="title">PageCarver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将View的绘制事件传送给 PageAnimController 实现动画绘制过程中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> canvas</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pageAnimController == <span class="keyword">null</span> || !pageAnimController.dispatchDrawPage(canvas, <span class="keyword">this</span>)) &#123;</span><br><span class="line">            drawPage(canvas, currentPageIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将View的触摸事件传送给 PageAnimController 以便实现翻页动画 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        pageAnimController.dispatchTouchEvent(event, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在翻页动画中是需要无数次的调用 <code>drawPage</code> 来绘制界面的，为了减少界面计算的开支必须要有一个 Bitmap  缓存来降低消耗。复用时可以直接使用已经生成的bitmap.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 页面快照，用来存储阅读器每一页的内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cpacm 2017/10/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageSnapshot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageIndex;</span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap;</span><br><span class="line">    <span class="keyword">private</span> Canvas mCanvas;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Canvas <span class="title">beginRecording</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBitmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_4444);</span><br><span class="line">            mCanvas = <span class="keyword">new</span> Canvas(mBitmap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCanvas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mBitmap) &#123;</span><br><span class="line">            canvas.drawBitmap(mBitmap, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBitmap != <span class="keyword">null</span> &amp;&amp; !mBitmap.isRecycled()) &#123;</span><br><span class="line">            mBitmap.recycle();</span><br><span class="line">            mBitmap = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基础模型如下图所示：<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E6%A8%A1%E5%9E%8B.webp" alt="页面切换模型"></p><p>现在我们来总结一下，这一部分我们搭建了阅读器最基础的框架，包括<br>(1) 翻页动画与阅读器视图的结合，能够确保在View中正确监听翻页动作，<br>保证整个翻页动作的准确性。<br>(2) 利用 Bitmap 缓存优化绘图流程，保证翻页动画的流畅性。而后包括文字，图片等元素的显示都是绘制在这个 Bitmap 上的。</p><h2 id="书页——组合模式，保证阅读器高度可定制化"><a href="#书页——组合模式，保证阅读器高度可定制化" class="headerlink" title="书页——组合模式，保证阅读器高度可定制化"></a>书页——组合模式，保证阅读器高度可定制化</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E9%98%85%E8%AF%BB%E5%99%A8%E6%A8%A1%E5%9D%97%E5%9B%BE.webp" alt="阅读器模块图"></p><p>一般来说，阅读器获取数据都是一章一章来的，不管是从网络上还是本地。而获取过来的数据阅读器要进行分页才能展示。如上图所示，书页展示由 <code>PageElement</code> 模块负责，该模块接收从 <code>BookReaderView</code> 传入的章节数据，然后再经底下的4个模块计算来分页。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E9%A1%B5%E6%A8%A1%E5%9D%97.png" alt="分页模块"></p><ul><li>PageElement，分页模块：功能包括将传入的章节数据分成数个 <code>PageData</code> (生成的 <code>PageData</code> 个数即为该章节页数，<code>PageData</code> 记录了每一页开头文字在章节的位置，同时包含该页面<code>HeaderData</code>, <code>LineData</code>,<code>HeadrData</code> 和 <code>FooterData</code> 数据等。各个 Data 里面记录了相应的文字信息，可以快速的定位到章节内容中。)；绘制页面；缓存章节数据以便无缝切换章节。</li><li>HeaderElement,页头部分：显示章节的标题；绘制每一页的头部。</li><li>LineElement,文字行部分：测量一行文字需要的字数；测量行高；绘制行文字；绘制笔记内容；测量每一个字在屏幕中的位置，用于笔记功能；</li><li>ImageElement,图片部分：测量图片的宽高；绘制图片。</li><li>FooterElement,页尾部分：绘制每一页的页尾,包括进度，时间和电量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//摘自 PageElement 的 onDraw 方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = drawPageIndex - startPageIndex;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= pages.size()) <span class="keyword">return</span>;</span><br><span class="line">    BookPageData bookPageData = pages.get(index);</span><br><span class="line">    <span class="keyword">int</span> offsetX = bookSettingParams.paddingLeft;</span><br><span class="line">    <span class="keyword">int</span> offsetY = bookSettingParams.paddingTop;</span><br><span class="line">    <span class="keyword">if</span> (bookPageData == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    canvas.drawColor(bookSettingParams.getBgColor());</span><br><span class="line">    bookHeaderElement.setChapterTitle(bookPageData.getChapterName());</span><br><span class="line">    bookHeaderElement.setX(offsetX);</span><br><span class="line">    bookHeaderElement.setY(offsetY);</span><br><span class="line">    <span class="keyword">if</span> (bookPageData.isChapterFirstPage()) &#123;</span><br><span class="line">        bookHeaderElement.drawFirstPage(canvas);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bookHeaderElement.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bookFooterElement.setProgress(bookPageData.getPageIndex(), bookPageData.getPageNums());</span><br><span class="line">    bookFooterElement.setX(offsetX);</span><br><span class="line">    bookFooterElement.setY(offsetY + getHeight() - bookFooterElement.getHeight());</span><br><span class="line">    bookFooterElement.draw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bookPageData.getDataList().size(); i++) &#123;</span><br><span class="line">        BookData bookData = bookPageData.getDataList().get(i);</span><br><span class="line">        <span class="keyword">if</span> (bookData <span class="keyword">instanceof</span> BookLineData) &#123;</span><br><span class="line">            BookLineData bookLineData = (BookLineData) bookData;</span><br><span class="line">            bookLineElement.setLineText(bookLineData.getContent());</span><br><span class="line">            bookLineElement.setX(bookLineData.getPosition().x);</span><br><span class="line">            bookLineElement.setY(bookLineData.getPosition().y);</span><br><span class="line">            bookLineElement.drawWithDigests(canvas, bookLineData, bookReaderView.getCurrentDigests(index));</span><br><span class="line">            <span class="comment">//bookLineElement.draw(canvas);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bookData <span class="keyword">instanceof</span> BookImageData) &#123;</span><br><span class="line">            BookImageData bookImageData = (BookImageData) bookData;</span><br><span class="line">            bookImageElement.setX(bookImageData.getPosition().x);</span><br><span class="line">            bookImageElement.setY(bookImageData.getPosition().y);</span><br><span class="line">            bookImageElement.syncDrawWithinBitmap(canvas, bookImageData, bookReaderView.getCacheBitmap(drawPageIndex));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将书页分成几部分组合起来可以有效的减少代码的耦合，而且可以自由的控制每一部分的修改，添加和移除。比如当以后我想要加个批注的功能，可以再添加一个新的 Element ,再复写其测量方法和绘制方法，就可以很方便的使用了。</p><p>总结一下：<br>（1） <code>PageElement</code> 利用各个 <code>Element</code> 模块将章节数据进行测量分页，每一页 <code>PageData</code> 记录着 <code>LineData</code>,<code>ImageData</code>,<code>HeaderData</code>和<code>FooterData</code>信息。绘图时需要将各个信息填入 <code>Element</code> 中<br>（2） 绘图时调用 <code>PageElement</code> 的 draw 方法，其 draw 方法再调用 各个 <code>Element</code> 的 draw 方法以完成整个绘图流程。</p><p>另外还需要提到的一点是阅读器内部维护了一个书页的队列，该队列缓存了由三个章节数据转化而来的书页列表。比如说你正在阅读第六章，那么队列里面缓存的就是第五章，第六章和第七章的数据，这样就能实现上下章翻页的无缝切换而不需要在翻至下一章时因为等待新的章节数据加载而中断整个阅读体验。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 章节缓存构成方案如下：</span></span><br><span class="line"><span class="comment"> * | -6,-5,-4,-3,-2,-1,0 | 1,2,3,4,5,6,7,8,9 | 10,11,12,13,14,15 | = pages</span></span><br><span class="line"><span class="comment"> * |    cacheChapter1    |   cacheChapter2   |   cacheChapter3   |</span></span><br><span class="line"><span class="comment"> * startPageIndex = pageIndex:-6  endPageIndex = pageIndex:16</span></span><br><span class="line"><span class="comment"> * currentChapterStartIndex =&gt; pageIndex:1  =&gt; pages[7]</span></span><br><span class="line"><span class="comment"> * currentChapterEndIndex =&gt; pageIndex:10 =&gt;  pages[16]</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><h2 id="书签，笔记——记录阅读进度"><a href="#书签，笔记——记录阅读进度" class="headerlink" title="书签，笔记——记录阅读进度"></a>书签，笔记——记录阅读进度</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E4%B9%A6%E7%AD%BE.webp" alt="书签"></p><p>书签的本质就是记录当前页的第一个文字在整章文本的位置，然后再加上书籍的id,章节的id（或序号）就能准确定位。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E7%AC%94%E8%AE%B0.gif" alt="笔记"></p><p>要记录笔记就需要文字选择器来选择文字，这个时候就需要知道每一个字在当前的坐标位置（之前用 <code>LineElement</code> 测量文字时已经生成每个文字的位置）。</p><p>为了达到上图的效果，就必须要处理在当前页的触摸事件：</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E6%96%87%E5%AD%97%E9%80%89%E6%8B%A9%E6%B5%81%E7%A8%8B.webp" alt="文字选择流程"></p><blockquote><p>有些细节的处理没有放到流程中，但大致意思是能明白的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TextSelectorElement 上的触摸分发方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(<span class="keyword">final</span> MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key = ev.getAction();</span><br><span class="line">    currentTouchPoint.set(ev.getX(), ev.getY());</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            isPressInvalid = <span class="keyword">false</span>;</span><br><span class="line">            hasConsume = <span class="keyword">true</span>;</span><br><span class="line">            isDown = <span class="keyword">true</span>;</span><br><span class="line">            mTouchDownPoint.set(ev.getX(), ev.getY());</span><br><span class="line">            <span class="comment">// 该方法中会记录isBookDigestDown的值</span></span><br><span class="line">            checkIsPressDigests(ev.getX(), ev.getY());</span><br><span class="line">            <span class="comment">//判断是否处于选择模式</span></span><br><span class="line">            <span class="keyword">if</span> (!isSelect) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isBookDigestDown == <span class="number">0</span>) &#123;</span><br><span class="line">                    postLongClickPerform(<span class="number">0</span>);<span class="comment">//提交长按时间</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 判断是否触摸到选择光标上，若是则可以拖动光标移动</span></span><br><span class="line">                checkCurrentMoveCursor(ev);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="keyword">float</span> move = PointF.length(ev.getX() - mTouchDownPoint.x, ev.getY() - mTouchDownPoint.y);</span><br><span class="line">            <span class="keyword">if</span> (move &gt; moveSlop) &#123;</span><br><span class="line">                isPressInvalid = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPressInvalid) &#123;</span><br><span class="line">                removeLongPressPerform();</span><br><span class="line">                <span class="keyword">if</span> (isSelect) &#123;</span><br><span class="line">                    <span class="comment">// 关闭弹窗（包括笔记编辑框等）</span></span><br><span class="line">                    onCloseView();</span><br><span class="line">                    <span class="comment">// 移动光标</span></span><br><span class="line">                    onMove(ev);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//未处于选择模式下，相当于一个普通的点击事件</span></span><br><span class="line">                    onPress(ev);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            hasConsume = <span class="keyword">false</span>;</span><br><span class="line">            removeLongPressPerform();</span><br><span class="line">            <span class="keyword">if</span> (isSelect) &#123;</span><br><span class="line">                <span class="comment">// -1 表示为未触摸到光标</span></span><br><span class="line">                <span class="keyword">if</span> (moveCursor == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 取消选择模式</span></span><br><span class="line">                    setSelect(<span class="keyword">false</span>);</span><br><span class="line">                    hasConsume = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//停止移动时，会打开笔记生成弹框</span></span><br><span class="line">                    onOpenDigestsView();</span><br><span class="line">                &#125;</span><br><span class="line">                moveCursor = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isBookDigestDown == <span class="number">1</span>) &#123;</span><br><span class="line">                    onOpenNoteView();</span><br><span class="line">                    hasConsume = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBookDigestDown == <span class="number">2</span>) &#123;</span><br><span class="line">                    onOpenEditView();</span><br><span class="line">                    hasConsume = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 模拟成一个普通的点击事件，会取消当前的选择模式</span></span><br><span class="line">                    onPress(ev);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            invalidate();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            hasConsume = <span class="keyword">false</span>;</span><br><span class="line">            removeLongPressPerform();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断选择器是否消耗了当前事件</span></span><br><span class="line">    <span class="keyword">return</span> hasConsume || isSelect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，笔记也要记录当前选择的书籍id,章节id(或序号)，文字在章节中的位置这些信息，方便定点跳转。</p><h2 id="设置——为阅读器添砖加瓦"><a href="#设置——为阅读器添砖加瓦" class="headerlink" title="设置——为阅读器添砖加瓦"></a>设置——为阅读器添砖加瓦</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E9%98%85%E8%AF%BB%E5%99%A8%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2.webp" alt="阅读器设置界面"></p><p>阅读器的设置一般包括：界面亮度的调整，字体大小的调整，上下章的跳转，书籍目录笔记和书签的展示，翻页动画的更改，日夜主题的更改。当一些设置需要阅读器能够在参数变化时及时响应，就得需要在设置变化时能及时更新 <code>BookReaderView</code> 下的各个 <code>Element</code> 模块。<br>这里我是通过一个辅助类贯穿整个阅读器来帮助更新各个模块，该类记录了阅读器内部所有可设置的属性，当各个模块被通知需要更新时重新从该类中读取参数并设置（比如画笔的颜色，页面的间距，字体的大小等）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 摘自 PageElement 下的设置属性变化方法</span></span><br><span class="line"><span class="comment">// BookSettingParams 即为记录阅读器设置属性的辅助类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ReaderSettingParams params)</span> </span>&#123;</span><br><span class="line">    bookSettingParams = (BookSettingParams) params;</span><br><span class="line">    bookHeaderElement.update(bookSettingParams);</span><br><span class="line">    bookFooterElement.update(bookSettingParams);</span><br><span class="line">    bookLineElement.update(bookSettingParams);</span><br><span class="line">    bookImageElement.update(bookSettingParams);</span><br><span class="line"></span><br><span class="line">    initPageElement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="语音朗读——为阅读器添加辅助功能"><a href="#语音朗读——为阅读器添加辅助功能" class="headerlink" title="语音朗读——为阅读器添加辅助功能"></a>语音朗读——为阅读器添加辅助功能</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E8%AF%AD%E9%9F%B3%E6%9C%97%E8%AF%BB.webp" alt="语音朗读"></p><p>此处的语音朗读使用的是讯飞的TTS引擎。如何使用引入TTS我这里就不具体描述了，重要的是在TTS的 <code>onSpeakProgress(int progress, int beginPos, int endPos)</code> 方法中可以获取当前句子的朗读进度。</p><blockquote><p>当我们传入一章文字时，TTS会自动帮助我们分段（会以，。等标点符号切割整篇文字），然后按段落来进行朗读。上面 progress 代表该段落在整篇文字的进度，beginPos 代表该段落的起始字符在整篇文字的位置，endPos 代表该段落的末尾字符在整篇文字的位置。</p></blockquote><p>既然能够知道朗读的位置，那就能知道朗读时文字在屏幕的位置了（之前有说过 <code>LineData</code> 记录了每个字符在屏幕中的位置），那剩下的就是怎么绘制的问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 听书tts播放模组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cpacm 2017/12/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookSpeechElement</span> <span class="keyword">extends</span> <span class="title">ResElement</span> <span class="keyword">implements</span> <span class="title">SynthesizerListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// .... 省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从每一页数据 PageData 中的 LineData 列表中获取要绘制的区域</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateDrawRect</span><span class="params">(<span class="keyword">int</span> startPos, <span class="keyword">int</span> endPos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (endPos &lt;= offsetPosition || endPos == <span class="keyword">this</span>.endPos) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.endPos = endPos;</span><br><span class="line">        <span class="keyword">this</span>.tempPos = startPos;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="keyword">this</span>.startPos + startPos + bookPageData.getStartPos() - offsetPosition;</span><br><span class="line">        <span class="keyword">int</span> e = <span class="keyword">this</span>.startPos + endPos + bookPageData.getStartPos() - offsetPosition;</span><br><span class="line">        drawRect.clear();</span><br><span class="line">        <span class="keyword">for</span> (BookLineData line : lineData) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.startPos &gt; e || line.endPos &lt;= s) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (line.startPos &lt;= s &amp;&amp; line.endPos &lt;= e) &#123;</span><br><span class="line">                Rect startRect = line.getCharArea().get(s);</span><br><span class="line">                Rect endRect = line.getCharArea().get(line.endPos - <span class="number">1</span>);</span><br><span class="line">                Rect rect = <span class="keyword">new</span> Rect(startRect.left, startRect.top, endRect.right, endRect.bottom);</span><br><span class="line">                drawRect.add(rect);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (line.startPos &gt; s &amp;&amp; line.endPos &lt;= e) &#123;</span><br><span class="line">                Rect startRect = line.getCharArea().get(line.startPos);</span><br><span class="line">                Rect endRect = line.getCharArea().get(line.endPos - <span class="number">1</span>);</span><br><span class="line">                Rect rect = <span class="keyword">new</span> Rect(startRect.left, startRect.top, endRect.right, endRect.bottom);</span><br><span class="line">                drawRect.add(rect);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (line.startPos &gt; s &amp;&amp; line.endPos &gt; e) &#123;</span><br><span class="line">                Rect startRect = line.getCharArea().get(line.startPos);</span><br><span class="line">                Rect endRect = line.getCharArea().get(e);</span><br><span class="line">                Rect rect = <span class="keyword">new</span> Rect(startRect.left, startRect.top, endRect.right, endRect.bottom);</span><br><span class="line">                drawRect.add(rect);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (line.startPos &lt;= s &amp;&amp; line.endPos &gt; e) &#123;</span><br><span class="line">                Rect startRect = line.getCharArea().get(s);</span><br><span class="line">                Rect endRect = line.getCharArea().get(e);</span><br><span class="line">                Rect rect = <span class="keyword">new</span> Rect(startRect.left, startRect.top, endRect.right, endRect.bottom);</span><br><span class="line">                drawRect.add(rect);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 刷新当前书页</span></span><br><span class="line">        bookReaderView.flashCurrentPageSnapshot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSpeaking()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (Rect rect : drawRect) &#123;</span><br><span class="line">            canvas.drawLine(rect.left, rect.bottom, rect.right, rect.bottom, paint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        exitTts();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*################## 语音合成的回调 ###################*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakBegin</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBufferProgress</span><span class="params">(<span class="keyword">int</span> progress, <span class="keyword">int</span> beginPos, <span class="keyword">int</span> endPos, String info)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakPaused</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakResumed</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakProgress</span><span class="params">(<span class="keyword">int</span> progress, <span class="keyword">int</span> beginPos, <span class="keyword">int</span> endPos)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据朗读的进度更新UI</span></span><br><span class="line">        updateDrawRect(beginPos, endPos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">(SpeechError speechError)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2, Bundle bundle)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先声明一点，整篇文章只是阐述了我自己从零开始做书籍阅读器时一些思路和使用的一些技巧，并没有覆盖到阅读器的各个角落。如果你想要自己实现一款阅读器，那你必须要有扎实的基础知识，比如View的绘制流程和事件分发流程，Canvas的绘图知识等，这篇文章也只是给大家提个思路而已。如果有问题或者新的想法欢迎交流！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十九）——说说 Android 里的 Handler 的机制</title>
      <link href="/2017/04/26/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%E8%AF%B4%E8%AF%B4%20Android%20%E9%87%8C%E7%9A%84%20Handler%20%E7%9A%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/04/26/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%E8%AF%B4%E8%AF%B4%20Android%20%E9%87%8C%E7%9A%84%20Handler%20%E7%9A%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Q：什么是 Handler</strong><br>A：Handler 是 Android 系统里的消息处理机制，下面的一段文字是在 Handler 源码上的注释，它阐述了 Handler 作为消息处理机制的作用。</p><blockquote><p>Handler 是一个可以通过关联一个消息队列来发送或处理消息,Runnable对象。每个Handler都关联一个单个的线程和消息队列.当你创建一个新的Handler的时候它就将被绑定到一个线程或线程上的消息队列,从那时起,这个Handler就将为这个消息队列提供消息或Runnable对象,处理消息队列释放出来的消息或Runnable对象.</p></blockquote><a id="more"></a><p><strong>Q：Handler 的主要用途</strong><br>A：（1）能够定时执行消息和Runable对象；（2）可以将一个执行的动作放在不同的线程中。</p><p><strong>Q：Handler 的主要用法</strong><br>A：通过一系列的 post、send 方法发送消息，通过 <code>handleMessage</code> 来处理消息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post(Runnable r)</span><br><span class="line">postAtTime(Runnable r, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">postDelayed(Runnable r, <span class="keyword">long</span> delayMillis)</span><br><span class="line">sendEmptyMessage(<span class="keyword">int</span> what)</span><br><span class="line">sendMessage(Message msg)</span><br><span class="line">sendMessageAtTime(Message msg, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">sendMessageDelayed(Message msg, <span class="keyword">long</span> delayMillis)</span><br></pre></td></tr></table></figure></p><p><strong>Q：与 Handler 相关的一些类</strong><br>A：与 Handler 相关的主要是 Message，MessageQueue，Looper这些类。</p><blockquote><p>Message:消息的载体。<br>MessageQueue:消息队列，主要功能是向消息池中投递消息和取走消息。<br>Looper:线程的消息循环处理器。</p></blockquote><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><p><strong>Q：各个类的对应关系</strong><br>A：每个线程只允许包含一个 Looper，每个 Looper 包含一个 MessageQueue。每个线程上可以生成多个Handler,Handler默认使用的是当前线程上的 Looper 。</p><p><strong>Q：如何确保每个线程上只有一个 Looper,且各个线程之间互不干扰</strong><br>A：Looper 类的实例必须通过方法 <code>prepare()</code> 创建，一个线程中多次调用 <code>prepare()</code> 方法将会抛出异常。Looper 实例将会保存在静态变量 ThreadLocal 中，ThreadLocal 实现了线程本地存储的功能，这样放入 ThreadLocal 对象的 Looper 对象就与线程关联在一起。</p><p><strong>Q：消息是如何按时间分发的</strong><br>A：向 MessageQueue 发消息使用的 <code>enqueueMessage</code> 方法，其方法在插入消息时根据时间来排序，时间早的插在前面。消息队列的组织利用了 Message 类中的 next 指针形成一个从头指向尾的单向链表，插入时计算是否需要唤醒处理线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果新来的消息时间比队列头的消息短则成为新的队列头，唤醒处理线程</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">    <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">    msg.next = p;</span><br><span class="line">    mMessages = msg;</span><br><span class="line">    needWake = mBlocked;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Q：消息队列是如何挂起，又是如何唤醒的</strong><br>A：MessageQueue 中的消息循环在方法 next() 中，而挂起和唤醒则是通过 native 层来实现。在 native 层的 Looper 类构造函数中创建了管道，同时使用 epoll 来监听读管道。epoll 的作用是监听管道上的数据，管道则用于线程间通信。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nativePollOnce(ptr, nextPollTimeoutMillis);</span><br></pre></td></tr></table></figure></p><p>在 MessageQueue 的 next() 方法中会调用 <code>nativePollOnce()</code> 方法，该方法最后通过调用 epoll_wait()来执行等待操作。<br>同样，调用 nativeWake() 可以唤醒处理线程。nativeWake()最终会调用到 native 层的 Looper 类的 wake()方法。wake() 方法通过向管道中写入数据来唤醒消息处理线程。</p><p><strong>Q：SyncBarrier 是什么</strong><br>A：SyncBarrier 或者叫“同步分割栏”，在 MessageQueue 类中有一个方法叫 <code>enqueueSyncBarrier(long when)</code>,可以调用这个方法在消息队列中插入一条没有 Handler 对象的消息，这条不带 Handler 对象的消息就称为 “SyncBarrier”（开发者需要调用Looper的postSyncBarrier()来打入）。</p><p>SyncBarrier就像一个卡子，卡在消息链表中的某个位置，当消息循环不断从消息链表中摘取消息并进行处理时，一旦遇到那么即使在分割栏之后还有若干已经到时的普通Message，也不会摘取这些消息了。此时如果还有消息需要处理，可以使用 <code>setAsynchronous()</code> 方法给消息做上标志。这也是‘普通Message’和‘异步Message’的区别了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>概括的描述，无非就是通过 Handler 向 Looper 的 MessageQueue 发送 Message 消息，再由 Looper 在消息循环里处理。关于 Android 的消息机制能说的暂时就那么多了，详情可以结合代码源代码细细思考。</p><hr><p>一篇更详细的 Handler 机制——<a href="https://my.oschina.net/youranhongcha/blog/492591" target="_blank" rel="noopener">聊一聊Android的消息机制 </a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源项目：更多功能的 FloatingMusicMenu</title>
      <link href="/2017/04/10/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%9A%84%20FloatingMusicMenu/"/>
      <url>/2017/04/10/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%9A%84%20FloatingMusicMenu/</url>
      
        <content type="html"><![CDATA[<p>这次给大家带来的是一款可用于音乐播放器的悬浮菜单按钮，它是基于 <code>FloatingActionButton</code> 上完成，能够联动音乐播放器显示歌曲的进度，设置歌曲的封面和通过封面的旋转来展示播放的状态（停止或者播放）。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/fmm.webp" alt="与音乐播放器的联动"></p><p>除此之外，它可以设置一组按钮作为菜单展示，支持上下左右四个方位显示，更方便的是可以在代码中动态的添加按钮或者移除按钮。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/fmm2.webp" alt="作为菜单的功能"></p><p>制作这个自定义控件初衷是想要一个小型的音乐播放器能够在应用的首页显示，它能够展示当前音乐的播放状态，也能够对音乐播放器进行一些操作，比如播放暂停，上下曲切换等。</p><p>具体的代码和如何引用请移步到 Github 上的项目地址上：<a href="https://github.com/cpacm/FloatingMusicMenu" target="_blank" rel="noopener">FloatingMusicMenu</a></p><a id="more"></a><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>说完作品，我们来讲讲是怎么用代码实现这些效果的吧。</p><h3 id="利用反射使-FloatingActionButton-填充整个按钮"><a href="#利用反射使-FloatingActionButton-填充整个按钮" class="headerlink" title="利用反射使 FloatingActionButton 填充整个按钮"></a>利用反射使 FloatingActionButton 填充整个按钮</h3><p>在 <code>FloatingActionButton</code> 中是没有开放的方法来调整图片大小的，所以这时候就想到了使用反射的方法来调整。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用反射重新定义fab图片的大小，使其充满整个fab</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxImageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clazz = getClass().getSuperclass();</span><br><span class="line">        Method sizeMethod = clazz.getDeclaredMethod(<span class="string">"getSizeDimension"</span>);</span><br><span class="line">        sizeMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> size = (Integer) sizeMethod.invoke(<span class="keyword">this</span>);</span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"mMaxImageSize"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(<span class="keyword">this</span>, size);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    postInvalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中通过 <code>getSizeDimension</code> 可以获得 <code>FloatingActionButton</code> 的实际大小，而 <code>mMaxImageSize</code> 则是图片的指定大小，所以可以重新赋值 <code>mMaxImageSize</code> 来调整图片的大小。</p><p>具体代码则是在 <code>FloatingMusicButton</code> 中。</p><h3 id="一个可以旋转的-Drawable-图片"><a href="#一个可以旋转的-Drawable-图片" class="headerlink" title="一个可以旋转的 Drawable 图片"></a>一个可以旋转的 Drawable 图片</h3><p>这里要实现的效果有点多，首先要将图片的形状变成圆形，其次要在图片的周围留出一定的边距以便显示进度条，最后让图片转起来。</p><p>圆形图片有多种方式可以实现，这里我们通过 <code>BitmapShader</code> 来进行变换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 圆形</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">circleBitmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BitmapShader bitmapShader = <span class="keyword">new</span> BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class="line">    mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">    mPaint.setShader(bitmapShader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>BitmapShader 通过设置给mPaint，然后用这个mPaint绘图时，就会根据你设置的TileMode，对绘制区域进行着色。<br><code>mBitmapShader = new BitmapShader(bitmap, TileMode.CLAMP, TileMode.CLAMP);</code></p></blockquote><p>绘制进度条可以通过 <code>canvas.drawArc()</code> 来实现，记得要先将之前的图片缩小，防止进度条覆盖在图片之上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> progressWidth = mWidth * progressPercent / <span class="number">100f</span>;</span><br><span class="line">    <span class="keyword">float</span> halfWidth = progressWidth / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 画背景图</span></span><br><span class="line">    canvas.save();</span><br><span class="line">    canvas.rotate(mRotation, getBounds().centerX(), getBounds().centerY());</span><br><span class="line">    <span class="keyword">float</span> scale = <span class="number">1</span> - progressWidth * <span class="number">2.0f</span> / mWidth;</span><br><span class="line">    canvas.scale(scale, scale, mWidth / <span class="number">2.0f</span>, mWidth / <span class="number">2.0f</span>);</span><br><span class="line">    canvas.drawCircle(mWidth / <span class="number">2</span>, mWidth / <span class="number">2</span>, mWidth / <span class="number">2</span>, mPaint);</span><br><span class="line">    canvas.restore();</span><br><span class="line">    <span class="comment">// 画进度条</span></span><br><span class="line">    rectF.set(halfWidth, halfWidth, mWidth - halfWidth, mWidth - halfWidth);</span><br><span class="line">    canvas.drawArc(rectF, -<span class="number">90</span>, progress, <span class="keyword">false</span>, progressPaint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>让图片旋转则是很简单的旋转 canvas 画布，利用 Handler 不断循环发送消息来更新 <code>mRotation</code> 保持旋转的动画。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canvas.rotate(mRotation, getBounds().centerX(), getBounds().centerY());</span><br></pre></td></tr></table></figure></p><p>具体代码在 <code>RotatingProgressDrawable</code> 中。</p><h3 id="可展开和收缩的-ViewGroup"><a href="#可展开和收缩的-ViewGroup" class="headerlink" title="可展开和收缩的 ViewGroup"></a>可展开和收缩的 ViewGroup</h3><p>自定义 ViewGroup 首先要做的两件事是测量控件的宽高和子控件的摆放，由于控件可以四个方向自由摆放，所以需要针对不同的方向进行不同的计算和摆放。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    <span class="keyword">switch</span> (floatingDirection) &#123;</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_UP:</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_DOWN:</span><br><span class="line">            onMeasureVerticalDirection();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_LEFT:</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_RIGHT:</span><br><span class="line">            onMeasureHorizontalDirection();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (floatingDirection) &#123;</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_UP:</span><br><span class="line">            onUpDirectionLayout(l, t, r, b);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_DOWN:</span><br><span class="line">            onDownDirectionLayout(l, t, r, b);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_LEFT:</span><br><span class="line">            onLeftDirectionLayout(l, t, r, b);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLOATING_DIRECTION_RIGHT:</span><br><span class="line">            onRightDirectionLayout(l, t, r, b);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控件的大小和位置确定好后就需要为每个子视图添加动画，比较简单的做法是将动画相关的变量放入 LayoutParams 中，方便管理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuLayoutParams</span> <span class="keyword">extends</span> <span class="title">LayoutParams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ObjectAnimator expandDirAnim = <span class="keyword">new</span> ObjectAnimator();</span><br><span class="line">        <span class="keyword">private</span> ObjectAnimator expandAlphaAnim = <span class="keyword">new</span> ObjectAnimator();</span><br><span class="line">        <span class="keyword">private</span> ObjectAnimator collapseDirAnim = <span class="keyword">new</span> ObjectAnimator();</span><br><span class="line">        <span class="keyword">private</span> ObjectAnimator collapseAlphaAnim = <span class="keyword">new</span> ObjectAnimator();</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同时要重写 <code>generateLayoutParams()</code> 方法，使其在 <code>addView()</code> 时能够将 <code>MenuLayoutParams</code> 赋给每个子视图。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateDefaultLayoutParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MenuLayoutParams(<span class="keyword">super</span>.generateDefaultLayoutParams());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MenuLayoutParams(<span class="keyword">super</span>.generateLayoutParams(attrs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(LayoutParams p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MenuLayoutParams(<span class="keyword">super</span>.generateLayoutParams(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样当在 <code>onLayout()</code> 的方法期间就可以为每个子视图确定动画的距离，方向等属性。</p><p>具体的细节可以查看类 —— <code>FloatingMusicMenu</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个控件是我在写 <code>MoeMusic</code> 项目时就已经存在的，但只有一个向上展开的功能，没有现在这么完整。想到自己好久没有写开源项目了，就把这个控件拎出来完善了一下开源给大家，希望能够喜欢。如果使用过程中有任何问题或者建议可以直接联系！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十八）—— Android 项目规范</title>
      <link href="/2017/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E8%A7%84%E8%8C%83%E4%BD%A0%E7%9A%84%20Android%20%E9%A1%B9%E7%9B%AE/"/>
      <url>/2017/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E8%A7%84%E8%8C%83%E4%BD%A0%E7%9A%84%20Android%20%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>通常我们为了项目的维护会定下一系列的规范开发来提高自己或者团队之间的写代码的效率，正所谓无规矩不成方圆。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/android.jpg" alt="Hello Android.jpg"></p><a id="more"></a><h2 id="Android-Studio的使用"><a href="#Android-Studio的使用" class="headerlink" title="Android Studio的使用"></a>Android Studio的使用</h2><p>Android 开发首选 Android Studio，一个好的IDE能让你事半功倍。编码规范使用 Android Studio 默认的模板规范即可，这也是比较方便的方法。同时也要注意以下几点，可以让你的团队协作更加协调：</p><ol><li>统一调整 IDE 的编码方式为 UTF-8</li><li>编辑完代码后不要忘记<strong>格式化</strong>（即 Ctrl+Alt+L 快捷键）</li><li>尽量保证团队之间的 IDE 版本与 Gradle 版本一致，最好的做法是及时更新保证与官方最新版一致。</li><li>代码提交前进行代码检查（Analyze-&gt;Inspect Code），可以消除代码中的警告，减少不必要的错误。</li><li>擅用 <code>//TODO</code> 注释来标记未做完或需要其他人接手的工作</li><li>善用AS插件来提高开发效率，像 <a href="https://plugins.jetbrains.com/plugin/7654-gsonformat" target="_blank" rel="noopener">GsonFormat</a>——将json字符串转换成一个Java实体类的工具，<a href="https://plugins.jetbrains.com/plugin/7275-codeglance" target="_blank" rel="noopener">CodeGlance</a>——在右边可以预览代码，实现快速定位等工具都是非常棒的。</li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>最有效的命名方式是使用英文拼写和语法，可以让阅读者易于理解，尽量避免使用中文拼音的情况（常见地名和通用名称例外，比如HangZhou,alibaba等）。禁止使用中英文混合或者完全中文的方式。</p><h3 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h3><p>通常一个app需要一个顶级包名，而这个包名通常跟公司的域名相关。一级包名是顶级域名，通常为com,edu,gov,net,org等，二级包名为公司名，三级包名根据应用进行命名。</p><p>比如我的个人域名为 <a href="http://www.cpacm.net">cpacm.net</a>,那么我个人所做的app包名一般为net.cpacm.yourappname。</p><p><strong>再来说如何分包？</strong><br>分包的方式说法不一，有的人喜欢按照层次来分，比如说将所有 <code>Activity</code> 放在同一个包下。有的人喜欢按照功能来分，将一个功能的 <code>Activity</code>、<code>Model</code>和<code>Adapter</code>等一些文件放入同一个包内。具体的例子可以参考谷歌的 <a href="https://github.com/google/iosched/tree/master/android/src/main/java/com/google/samples/apps/iosched" target="_blank" rel="noopener">iosched</a> 样例。</p><p>我个人比较推荐的方式是按照功能进行分包，但同时会将数据层再单独分离出来，详细的例子可以看看我之前写的文章——<a href="http://www.jianshu.com/p/bb97f6b30e5b" target="_blank" rel="noopener">说说我自己常用的 Android 架构</a>。不过每个人的习惯并不一致，所以在这点上可以随意发挥，只要不导致整个项目结构混乱就成。</p><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><p>一个类会包含（按顺序地）：</p><ol><li>许可证或版权信息（如有需要）</li><li>package语句</li><li>import语句</li><li>一个顶级类<br>四个部分用一个空行隔开。</li></ol><p><strong>类名都以 <code>UpperCamelCase</code> 风格编写。</strong></p><p>在 Android 中与系统相关的类通常以组件名为后缀标识。</p><ul><li>Activity 类，命名为 Activity 为后缀，如 <code>LoginActivity</code></li><li>Fragment 类，命名以 Fragment 为后缀，如 <code>LoginFragment</code></li><li>Service 类，命名以 Service 为后缀，如 <code>DownloadService</code></li><li>BroadcastReceiver类，命名以Receiver为后缀，如    <code>JPushReceiver</code></li><li>ContentProvider类, 命名以Provider为后缀，如<code>ShareProvider</code></li><li>Adapter 类，命名以 Adapter 为后缀，如 <code>ListAdapter</code></li></ul><p>其他一些常见的命名：</p><ul><li>工具管理类，命名以 Utils 或者 Manager 为后缀，如 <code>EncryptUtils</code>，<code>UserManager</code></li><li>实体类，命名以 Bean 或者 Info 为后缀，如 <code>UserBean</code></li><li>接口实现类，命名以 Impl 或者 Listener 为后缀，如 <code>ApiImpl</code>  </li><li>数据库类，命名以 Dao 或者 DbHelper 为后缀，如 <code>UserDao</code></li><li>自定义控件类，命名以 View 或者 Layout 为后缀，如 <code>SimpleSliderLayout</code></li></ul><h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><p><strong>方法名都以 <code>lowerCamelCase</code> 风格编写。</strong></p><p>方法名通常是动词或动词短语。下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。并不存在唯一正确的方式来命名测试方法。</p><p>常见的方法名称：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getXX()/setXX()</td><td>获取/设置属性值，如 <code>getUserName()</code></td></tr><tr><td>isXX()/checkXX()/hasXX()</td><td>用于返回 Boolean 值的方法，如 <code>isGirl()</code>,<code>hasPermission()</code></td></tr><tr><td>initXX()</td><td>初始化相关方法，如 <code>initView()</code></td></tr><tr><td>loadXX()/handleXX()</td><td>读取数据或者对数据处理时的方法，如 <code>loadData()</code></td></tr><tr><td>disPlayXX()/showXX()</td><td>显示相关信息，如 <code>showToast()</code></td></tr><tr><td>…</td><td>…</td></tr></tbody></table></div><blockquote><p>一般方法的命名都是以动词为前缀，后面加上动作的对象。</p></blockquote><h3 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h3><p>常量名命名模式为 <code>CONSTANT_CASE</code>，全部字母大写，用下划线分隔单词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constant</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMBER = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Not constant</span></span><br><span class="line"><span class="keyword">static</span> String nonFinal = <span class="string">"non-final"</span>;</span><br></pre></td></tr></table></figure><p><strong>这些名字通常是名词或名词短语。</strong></p><p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。</p><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><blockquote><p>在Google其它编程语言风格中使用的特殊前缀或后缀，如name_, mName, s_name和kName，在Java编程风格中都不再使用。</p></blockquote><p>现在在 Android 非常量字段名的命名有两种方式，一种是在特定的字段名上加上特殊前缀或后缀，如普通成员变量命名以 mCamelCase 样式命名，静态变量以 sCamelCase 命名。另一种则是完全使用 <code>lowerCamelCase</code> 命名，如 camelCase 变量名。</p><p>虽然两种命名方式都可，但切记不要在同一个项目中同时使用，这样只会让代码看得糟糕。当然个人推荐变量名以 <code>lowerCamelCase</code> 风格编写。</p><p><strong>参数名，局部变量名以 <code>lowerCamelCase</code> 风格编写</strong></p><p><strong>临时变量</strong>通常被取名为i、j、k、m和n，它们一般用于整型；c、d、e，它们一般用于字符型。</p><p><strong>类型变量</strong>可用以下两种风格之一进行命名：</p><ol><li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li><li>以类命名方式，后面加个大写的T(如：RequestT, FooBarT)。</li></ol><p>关于Android中相关控件的命名，控件变量命名可以在后缀加上控件名称或者控件名称的缩写，如<code>login</code>+<code>Button</code>=<code>loginButton</code>/<code>loginBtn</code>。平常习惯控件名缩写的话推荐使用控件名称的缩写来作为后缀。</p><h2 id="Android-资源文件"><a href="#Android-资源文件" class="headerlink" title="Android 资源文件"></a>Android 资源文件</h2><p>Android资源文件基本上都采取使用下划线<code>_</code>来连接词语。</p><h3 id="布局文件-layout"><a href="#布局文件-layout" class="headerlink" title="布局文件 layout"></a>布局文件 layout</h3><p><strong>必须全部单词小写，单词间以下划线分割，使用名词或名词词组</strong></p><h4 id="界面相关布局"><a href="#界面相关布局" class="headerlink" title="界面相关布局"></a>界面相关布局</h4><p>命名方式为 <code>界面_模块.xml</code><br>通常 Activity 或者 Fragment 等类名要与其布局文件相对应，如：</p><p><code>LoginActivity.java</code> -&gt; <code>activity_login.xml</code><br><code>BookFragment.java</code> -&gt; <code>fragment_book.xml</code><br><code>DateDialog.java</code> -&gt; <code>dialog_date.xml</code><br><code>SettingPopupWindow.java</code> -&gt; <code>ppw_setting.xml</code></p><h4 id="列表项布局"><a href="#列表项布局" class="headerlink" title="列表项布局"></a>列表项布局</h4><p>命名方式为 <code>控件_模块_item.xml</code></p><p>一般关于列表项的命名则以 item 作为前缀，如：<code>item_user.xml</code> 表示这个布局文件用在用户列表中。</p><p>但我更喜欢下面这种方式的命名：<br> <code>listview_user_item</code> -&gt; 表示这是用于 listview 的用户列表项。<br> <code>recyclerview_user_item</code> -&gt; 表示这是用于 recyclerview 的用户列表项。<br> <code>gridview_user_item</code> -&gt; 表示这是用于 gridview 的用户列表项。</p><p>而此时你自定义了一个 GroupView 需要列表项去填充，比如说一个 <code>RefreshLayout</code>:<br><code>refresh_user_item</code> -&gt; 表示这是用于 RefreshLayout 的用户列表项。</p><h4 id="包含项"><a href="#包含项" class="headerlink" title="包含项"></a>包含项</h4><p>命名方式为 <code>模块_描述.xml</code><br>在界面布局中，如 <code>activity_user_header</code> 表示为用户界面的头部布局。<br>在列表布局中，如 <code>listview_user_header</code> 表示为用户列表的头部布局。</p><h3 id="图片资源-drawable"><a href="#图片资源-drawable" class="headerlink" title="图片资源 drawable"></a>图片资源 drawable</h3><p>全部小写，采用下划线命名法，加前缀区分</p><div class="table-container"><table><thead><tr><th>用途</th><th>命名规则</th><th>名称</th></tr></thead><tbody><tr><td>图标</td><td><code>ic\_模块名[\_用途]</code></td><td>ic_home 或 ic_media_info</td></tr><tr><td>普通文件</td><td><code>模块\_用途[\_状态描述]</code></td><td>search_background 或者 layerlist_progress_horizontal 或者 btn_xx_focused</td></tr></tbody></table></div><h3 id="动画资源-anim"><a href="#动画资源-anim" class="headerlink" title="动画资源 anim"></a>动画资源 anim</h3><p>也是要全部小写，使用下划线来分隔词组。<br>命名规则为 <code>模块_用途[_状态描述]</code>,如：</p><blockquote><p><code>fade_out</code>-&gt;淡出<br> <code>push_down_in</code>-&gt;从下方推入</p></blockquote><h3 id="菜单资源-menu"><a href="#菜单资源-menu" class="headerlink" title="菜单资源 menu"></a>菜单资源 menu</h3><p>命名规则为： <code>menu_模块[_用途]</code><br>如：<code>menu_shelf</code> -&gt; 表示为书架上的菜单选项<br>其中菜单内部的id命名规则为 <code>action_用途</code>，如：<code>action_manage</code></p><p><strong>好吧，其实资源的命名没有那么多死板的规则，只要能看到自己命名的名字能立马明白它的作用就行了。当然不止自己也必须让团队的其他人能明白。</strong></p><h2 id="Values下的命名方式"><a href="#Values下的命名方式" class="headerlink" title="Values下的命名方式"></a>Values下的命名方式</h2><h3 id="色调（color）"><a href="#色调（color）" class="headerlink" title="色调（color）"></a>色调（color）</h3><p>禁止在layout直接使用 “#000000” 赋予颜色，<br>在你的colors.xml文件中应该只是映射颜色的名称一个ARGB值，而没有其它的。不要为特定的UI定义特定的颜色值，这样只会导致颜色值重复定义。</p><p><strong>Don’t</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"chapter_select_area_bg"</span>&gt;</span>#fff5f5f5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"content_text_color"</span>&gt;</span>#ff404040<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"et_hit_text_color"</span>&gt;</span>#ffacacac<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>Do</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 常用字体颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black_alpha"</span>&gt;</span>#8A000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black_alpha_more"</span>&gt;</span>#64000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black_normal"</span>&gt;</span>#DE000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_alpha"</span>&gt;</span>#8AFFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_normal"</span>&gt;</span>#DEFFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_normal_more"</span>&gt;</span>#33FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_less"</span>&gt;</span>#FFFAFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"transparent"</span>&gt;</span>#00000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>一个美观的 app 是不会充斥太多无用的色彩的。</p></blockquote><h3 id="尺寸（dimen）"><a href="#尺寸（dimen）" class="headerlink" title="尺寸（dimen）"></a>尺寸（dimen）</h3><p>尽量遵循 <strong>Material Design</strong> 的设计标准，比如字体的大小，页面左右空白16dp,列表上下间隔8dp等。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"horizontal_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"vertical_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"horizontal_padding"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"vertical_padding"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"fab_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 页面统一间距 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"title_height"</span>&gt;</span>48dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"toolbar_height"</span>&gt;</span>48dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"tab_height"</span>&gt;</span>48dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"bar_height"</span>&gt;</span>56dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"edittext_height"</span>&gt;</span>56dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"caption_height"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"line_height"</span>&gt;</span>8dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"line_height_half"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"line_height_double"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"layout_height"</span>&gt;</span>72dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 字体大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_display3"</span>&gt;</span>56sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_display2"</span>&gt;</span>45sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_display1"</span>&gt;</span>34sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_headline"</span>&gt;</span>24sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_title"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_subhead"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_body"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_caption"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_mini"</span>&gt;</span>10sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_menu"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_button"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_navi"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>尽量不要直接在布局文件里面写上具体的数值。</p></blockquote><h3 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a>字符串（string）</h3><p><code>strings</code>的name命名使用下划线命名法，采用以下规则：<code>模块名+逻辑名称</code>，<br>同样，禁止在代码中或者layout中直接填入字符，请在<code>string.xml</code>加入字符串。最好是按模块来分隔开字符串便于查找和修改，公用的写在最开始位置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>cpacm<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"open_string"</span>&gt;</span>open<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"close_string"</span>&gt;</span>close<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--####################  Home模块  #####################--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bottom navi --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"free"</span>&gt;</span>休闲<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"news"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"beauty"</span>&gt;</span>风采<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"study"</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"contract"</span>&gt;</span>互动<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--#####################  Free模块  #####################--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tab --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"music"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"movie"</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"book"</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>所有文字放在 strings.xml 中可以很方便的转换多国语言。</p></blockquote><h3 id="样式（style）"><a href="#样式（style）" class="headerlink" title="样式（style）"></a>样式（style）</h3><p><code>style</code>的name命名使用大驼峰命名法。<br>当某部分xml属性代码重复过多时，请将其变成 <strong>style</strong> 以便重复利用。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ContentText"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/basic_black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="自定义属性（attr）"><a href="#自定义属性（attr）" class="headerlink" title="自定义属性（attr）"></a>自定义属性（attr）</h3><p><code>attr</code>的name命名使用大驼峰命名法。<br>在自定义控件或其他地方需要自定义属性名称时，除去直接加入<code>attrs.xml</code>中也可以新建一个 <strong>attr</strong> 文件，并在 attr 后加上功能名称。<br>如 <code>attr_slider</code> 表示一个轮播器控件的自定义属性。  </p><h3 id="layout内的id命名"><a href="#layout内的id命名" class="headerlink" title="layout内的id命名"></a>layout内的id命名</h3><p>命名模式为：模块名_view缩写，比如 <code>search_btn</code> </p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h3><p>每个类都必须要写上</p><ol><li>创建时间</li><li>作者</li><li>类的作用描述</li><li>版本和联系方式（可选）<br>这样团队就能知道这个类的作用是什么，原生产者是谁。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     author : cpacm</span></span><br><span class="line"><span class="comment"> *     e-mail : xxx@xx</span></span><br><span class="line"><span class="comment"> *     date   : 2017/03/21</span></span><br><span class="line"><span class="comment"> *     description   : xxxx描述</span></span><br><span class="line"><span class="comment"> *     version: 1.0</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Android Studio 中 <code>Settings → Editor → File and Code Templates → Includes → File Header</code>，输入模板。</p><h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><p>每个成员方法都应该有一个头注释，告诉我们这个方法做了什么，返回了什么。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * snackbar的显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSnackBar</span><span class="params">(View view, @StringRes <span class="keyword">int</span> toast)</span> </span>&#123;</span><br><span class="line">    Snackbar.make(view, getString(toast), Snackbar.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置<code>Fix doc comment(Settings → Keymap → Fix doc comment)</code>快捷键，AS便会生成模板。</p><h3 id="块-行注释"><a href="#块-行注释" class="headerlink" title="块/行注释"></a>块/行注释</h3><p>主要作用是为一些代码进行补充说明，防止自己或团队的其他人无法理解代码的含义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指向书城界面</span></span><br><span class="line">viewPager.setCurrentItem(<span class="number">2</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的规范只是给个参考，适合自己或团队才是最好的。养成好的命名习惯才能写出优美的代码，这需要长时间的坚持才能培养出来。说实话，其实英语基础才是最重要的XD.<br>Java 更多的编写风格可以参考：<a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener">Google Java 命名规范</a></p><hr><p>参考资料：</p><ol><li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener">Google Java 命名规范</a></li><li><a href="https://github.com/Blankj/AndroidStandardDevelop" target="_blank" rel="noopener">安卓开发规范</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十七）—— CoordinatorLayout 上的一些布局技巧</title>
      <link href="/2017/03/09/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94CoordinatorLayout%20%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/03/09/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94CoordinatorLayout%20%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>CoordinatorLayout是一个“加强版”的 FrameLayout，它主要有两个用途：<br>（1） 用作应用的顶层布局管理器<br>（2） 通过为子View指定 behavior 实现自定义的交互行为。<br>在我们做 Material Design 风格的app时通常都使用 CoordinatorLayout 作为布局的根节点，以便实现特定的UI交互行为。<br>那么现在我们来看看如何用已有的一些控件实现一些常见的布局。</p><a id="more"></a><h2 id="Toolbar-TabLayout-实现-TabLayout-置顶效果"><a href="#Toolbar-TabLayout-实现-TabLayout-置顶效果" class="headerlink" title="Toolbar + TabLayout 实现 TabLayout 置顶效果"></a>Toolbar + TabLayout 实现 TabLayout 置顶效果</h2><p>很常见的一种模式是 TabLayout 放在 ToolBar 布局中与其一起置顶在界面上方，而现在的效果是将ToolBar 隐藏而 TabLayout一直置顶在界面上方。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/tablayout.webp" alt="tablayout"></p><p>如何实现呢？首先所在的 Activity 要使用 AppTheme.NoActionBar 风格主题，之后再编写布局文件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|snap"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- toolbar内部布局文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/tab_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"@dimen/tab_height"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:tabTextColor</span>=<span class="string">"@color/white_normal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 主界面布局文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>很重要的两点：</p><ol><li>设置 Toolbar 的 <code>layout_scrollFlags=&quot;scroll|enterAlways|snap&quot;</code> 保证 Toolbar 能随界面滑动向上隐藏。</li><li>TabLayout 与 Toolbar 同级，父节点为 AppBarLayout ，保证 TabLayout 能够能够显示在 Toolbar 外面而不随其一起隐藏。</li></ol><h2 id="浸入式-CollapsingToolbarLayout"><a href="#浸入式-CollapsingToolbarLayout" class="headerlink" title="浸入式 + CollapsingToolbarLayout"></a>浸入式 + CollapsingToolbarLayout</h2><p>CollapsingToolbarLayout 可以包裹 Toolbar , 当其显示完收缩动画时使 Toolbar 显示在顶端。而我们可以再加入浸入式的效果让 CollapsingToolbarLayout 的背景图突破系统的状态栏使界面更加美观同时也不影响 Toolbar 的显示效果。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/CollapsingToolbarLayout.webp" alt="浸入式布局"></p><p>在实现布局文件前要赋予当前的Activity主题为AppTheme.Immersive。<br>其样式要在 v19 与 v21 分别处理，至于v19之前的 android 版本那就无能为力了。<br><code>v19</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Immersive"</span> <span class="attr">parent</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>v21</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Immersive"</span> <span class="attr">parent</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--透明导航栏--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后再来看布局文件，包括了 <code>AppBarLayout</code>，<code>CollapsingToolbarLayout</code> 和 <code>Toolbar</code> 这些控件。<br>同样也是要分为 v19 和 v21 两种布局<br><code>v19</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"220dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed|snap"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:statusBarScrim</span>=<span class="string">"@android:color/transparent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:titleEnabled</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/anime_root"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"220dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.7"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 可伸缩背景图布局文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">"25dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:titleMarginTop</span>=<span class="string">"15dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 界面布局文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>v21</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"220dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed|snap"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:statusBarScrim</span>=<span class="string">"@android:color/transparent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:titleEnabled</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/anime_root"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"220dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.7"</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">&lt;!-- 可伸缩背景图布局文件 --&gt;</span></span><br><span class="line">                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:titleMarginTop</span>=<span class="string">"15dp"</span> /&gt;</span></span><br><span class="line">                </span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 界面布局文件 --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么重点在哪里呢？</p><ol><li>设置你当前的 Activity 的状态栏为透明，4.4之前的机型则无法适配。</li><li>注意每个控件下的 <code>fitsSystemWindows</code> 属性，使系统能够调整 view 的 padding 值使其适配。</li><li>设置 <code>CollapsingToolbarLayout</code> 为可滚动（scroll）,滚动结束后可以设置 <code>statusBarScrim</code> 作为覆盖色。</li><li>背景布局与 Toolbar 同级，布局文件上可以设置滚动的模式，如视差滚动及相应的值。</li><li>注意到 <code>v19</code> 的布局文件上的 Toolbar ，给它赋予了一个 <code>android:layout_marginTop=&quot;25dp&quot;</code>的属性，以便在Android 4.4上时防止被系统的状态栏所覆盖。当然这个值可以在代码中获取到系统状态栏高度再进行设置。</li></ol><blockquote><p><code>fitsSystemWindows</code>详解：这个一个boolean值的内部属性，让view可以根据系统窗口(如status bar)来调整自己的布局，如果值为true,就会调整view的paingding属性来给system windows留出空间。</p></blockquote><h2 id="Fragment-不同风格布局"><a href="#Fragment-不同风格布局" class="headerlink" title="Fragment + 不同风格布局"></a>Fragment + 不同风格布局</h2><p>有时候产品要求在一个 Activity 上显示不同的 Fragment 界面，且 Fragment 上的每一个头部样式都不一样，比如说一个是普通情况下的 Toolbar，另一个却是浸入式的可伸缩头部，像简书app的首页</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/jianshu.gif" alt="jianshu.gif"></p><p>额，我们先不提图中的那个bug，图中的界面主要是两种效果，一个为普通的标题栏+正文，另一个则是浸入式的图片背景+正文。我们也可以利用浸入式的主题来仿照出简书的效果。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/tabhome.webp" alt="各个页面不同样式"></p><p>第一步要做的是给 Fragment 所在的 Activity 套上 <code>AppTheme.Immersive</code> 浸入式主题样式，之后为 Activity 加上布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.ashokvarma.bottomnavigation.BottomNavigationBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bottom_navigation_bar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"56dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.ashokvarma.bottomnavigation.BottomNavigationBar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"56dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>无他，就是一个 ViewPager 容器用来加载 Fragment。</p><p>书城所在的 Fragment 布局如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed|snap"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:statusBarScrim</span>=<span class="string">"@android:color/transparent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:titleEnabled</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 背景布局 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"36dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:minHeight</span>=<span class="string">"36dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 搜索框布局 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 界面主布局 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>布局跟之前的浸入式布局相同，但单单这样布局是有问题的，此时的 Toolbar 会显示在系统的状态栏下。所以我们要修正 Toolbar 的摆放位置，即人为的为其设置 MarginTop 距离。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修正 Toolbar 的位置</span></span><br><span class="line"><span class="comment"> * 在 Android 4.4 版本下无法显示内容在 StatusBar 下，所以无需修正 Toolbar 的位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> toolbar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fixToolbar</span><span class="params">(Toolbar toolbar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">        <span class="keyword">int</span> statusHeight = getStatusBarHeight(getActivity());</span><br><span class="line">        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) toolbar.getLayoutParams();</span><br><span class="line">        layoutParams.setMargins(<span class="number">0</span>, statusHeight, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取系统状态栏高度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    Field field = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, statusBarHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        c = Class.forName(<span class="string">"com.android.internal.R$dimen"</span>);</span><br><span class="line">        obj = c.newInstance();</span><br><span class="line">        field = c.getField(<span class="string">"status_bar_height"</span>);</span><br><span class="line">        x = Integer.parseInt(field.get(obj).toString());</span><br><span class="line">        statusBarHeight = context.getResources().getDimensionPixelSize(x);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> statusBarHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在每个 Fragment 初始化 Toolbar 时都需要调用这个方法来修正位置。</p><p>重点又来了：</p><ol><li>修改为浸入式样式主题，要点见上一个案例。</li><li>人为修正 Toolbar 的距离，保证位置摆放正确。</li><li>注意 Fragment 切换时偶尔出现的一些 Toolbar 问题。</li></ol><h3 id="Fragment-与-Toolbar-的选项菜单问题"><a href="#Fragment-与-Toolbar-的选项菜单问题" class="headerlink" title="Fragment 与 Toolbar 的选项菜单问题"></a>Fragment 与 Toolbar 的选项菜单问题</h3><p>在 Fragment 之间切换的时候很容易遇到 Toolbar 上的菜单无法正确的显示的问题，解决方法也很简单，在 Fragment 的 <code>onCreateView()</code> 方法中添加一行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toolbar.setTitle(<span class="string">"title"</span>);</span><br><span class="line">((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);</span><br><span class="line">fixToolbar(toolbar);</span><br><span class="line">setHasOptionsMenu(<span class="keyword">true</span>); <span class="comment">//重要的一行代码，防止选项菜单错乱</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自从 Google 出了 <code>com.android.support:design</code> 包之后，其多样化的定制给 App 应用带来更加酷炫的效果，布局的变化只不过是其中的一部分而已。文章的开头也说了， CoordinatorLayout 不止是带来了布局的变化，也带给了控件更多的UI交互动作。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十六）—— 常用Android架构</title>
      <link href="/2017/03/01/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8Android%E6%9E%B6%E6%9E%84/"/>
      <url>/2017/03/01/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8Android%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>先列出一些常用的依赖，想必看到下面的依赖大家也能明白接下来要讲的是什么？<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所需依赖</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex.rxjava2:rxjava:2.0.5'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.google.code.gson:gson:2.8.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'</span></span><br></pre></td></tr></table></figure></p><p>没错，就是老生常谈的 MVP 模式。</p><blockquote><p><code>retrofit2</code>作为网络请求，<code>gson</code>作为json解析器。注意这里是用的最新的 <code>rxjava2</code> 和 jakewharton 大大开源的 <code>retrofit2-rxjava2-adapter</code> 作为桥接器。最新的版本可以前往各自的 Github 上查看。</p></blockquote><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/mvp.webp" alt="mvp"></p><a id="more"></a><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p>我个人比较喜欢在项目下新建一个 Android library 的模块，取名为core，主要作用是负责网络层和数据层。像数据实体类，数据库操作，SharedPreferences缓存，网络请求都可以放在 core 模块下，主要目的就是彻底将UI和数据层完全分开（物理层面上）。</p><h3 id="网络模块"><a href="#网络模块" class="headerlink" title="网络模块"></a>网络模块</h3><p>需要一个 <code>RetrofitHelper</code> 单例模块支持，主要是为 OkHttp 设置请求参数属性和初始化 Api 接口服务。</p><h3 id="OkHttp的参数设置"><a href="#OkHttp的参数设置" class="headerlink" title="OkHttp的参数设置"></a>OkHttp的参数设置</h3><p>OkHttp上可以设置的参数很多，像缓存，头部信息，超时时间，重连等信息都可以在 OkHttpClient 初始化设置时统一设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOkHttp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置统一的请求头部参数</span></span><br><span class="line">    builder.addInterceptor(apikey);</span><br><span class="line">    <span class="comment">//设置缓存</span></span><br><span class="line">    builder.addNetworkInterceptor(cacheInterceptor);</span><br><span class="line">    builder.addInterceptor(cacheInterceptor);</span><br><span class="line">    builder.cache(cache);</span><br><span class="line">    <span class="comment">//设置超时</span></span><br><span class="line">    builder.connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    builder.readTimeout(<span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">    builder.writeTimeout(<span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//错误重连</span></span><br><span class="line">    builder.retryOnConnectionFailure(<span class="keyword">true</span>);</span><br><span class="line">    okHttpClient = builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化项目-api-接口"><a href="#初始化项目-api-接口" class="headerlink" title="初始化项目 api 接口"></a>初始化项目 api 接口</h3><p>一般来说，一个项目的网络返回数据都有统一的返回数据，比如有一个定义好的返回码 <code>resultCode</code>，数据返回信息 <code>resultInfo</code>，以及最重要的数据对象 <code>returnObject</code>。所以我们需要一个类来进行网络数据套接。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resultCode;</span><br><span class="line">    <span class="keyword">private</span> T returnObject;</span><br><span class="line">    <span class="keyword">private</span> Object ruturnInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 和 set 方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义好数据类型，就轮到 <code>Retrofit</code> 与网络接口进行联动，首先需要一个能够定义 api 接口的地方 <code>Apis</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Apis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取启动页图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@FormUrlEncoded</span></span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"getSplashImg"</span>)</span><br><span class="line">    Observable&lt;ApiResponse&lt;SplashImageBean&gt;&gt; getStartImg(<span class="meta">@Field</span>(<span class="string">"uid"</span>) String uid,<span class="meta">@Field</span>(<span class="string">"size"</span>) String size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他的api</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后回到 <code>RetrofitHelper</code> 中初始化接口服务。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 接口服务</span><br><span class="line"><span class="symbol">apis</span> = getApiService(HttpUtils.<span class="keyword">BASEURL, </span>Apis.class)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 接口服务初始化方法</span><br><span class="line"><span class="symbol">private</span> &lt;T&gt; T getApiService(<span class="keyword">String </span><span class="keyword">baseUrl, </span>Class&lt;T&gt; <span class="keyword">clz) </span>&#123;</span><br><span class="line">    Retrofit retrofit = new Retrofit.<span class="keyword">Builder()</span></span><br><span class="line"><span class="keyword"> </span>           .<span class="keyword">baseUrl(baseUrl)</span></span><br><span class="line"><span class="keyword"> </span>           .client(okHttpClient)</span><br><span class="line">            .<span class="keyword">addConverterFactory(GsonConverterFactory.create())</span></span><br><span class="line"><span class="keyword"> </span>           .<span class="keyword">addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span></span><br><span class="line"><span class="keyword"> </span>           .<span class="keyword">build();</span></span><br><span class="line"><span class="keyword"> </span>   return retrofit.create(<span class="keyword">clz);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="搭建-MVP-架构"><a href="#搭建-MVP-架构" class="headerlink" title="搭建 MVP 架构"></a>搭建 MVP 架构</h2><p>此方法是从 Google 的开源项目<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="noopener">android-architecture</a> 上的 <a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/" target="_blank" rel="noopener">todo‑mvp‑rxjava</a> 篇演变而来。一样需要定义 View 和 Presenter 接口以及Presenter的实现，只不过加了一层 <code>RxPresenter</code> 对Rxjava的优化，防止内存的泄露。</p><h3 id="MVP的基础类"><a href="#MVP的基础类" class="headerlink" title="MVP的基础类"></a>MVP的基础类</h3><p>首先要为mvp模式定下基础接口 <code>BaseView</code> 和 <code>BasePresenter</code>。<br>Presenter 需要绑定 View 才能回调 View 里面的各种方法，所以直接在类声明的时候将 View 绑定。<br>同理，View 里面需要一个 Presenter 去处理数据，故定义一个   <code>setPresenter()</code> 方法来提醒（所以不设置也行）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Rxjava-在-MVP-上的优化"><a href="#Rxjava-在-MVP-上的优化" class="headerlink" title="Rxjava 在 MVP 上的优化"></a>Rxjava 在 MVP 上的优化</h3><p>之前在写 <a href="https://github.com/cpacm/MoeMusic" target="_blank" rel="noopener">MoeMusic开源项目</a> 的时候完全没有考虑到 Rxjava 在与 Retrofit 结合请求网络请求的时候会存在内存泄露的问题，所以在这个模块上利用 Rxjava 的订阅和取消订阅功能消除内存泄露的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cpacm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/2/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desciption</span> 可取消订阅的 rxpresenter,防止rxjava引起的内存泄露</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RxPresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&gt; <span class="keyword">implements</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> T view;</span><br><span class="line">    <span class="keyword">protected</span> CompositeDisposable compositeDisposable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unDisposable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (compositeDisposable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            compositeDisposable.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addDisposable</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (compositeDisposable == <span class="keyword">null</span>) &#123;</span><br><span class="line">            compositeDisposable = <span class="keyword">new</span> CompositeDisposable();</span><br><span class="line">        &#125;</span><br><span class="line">        compositeDisposable.add(disposable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.view = <span class="keyword">null</span>;</span><br><span class="line">        unDisposable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理很简单，就是使用 CompositeDisposable 来订阅 rxjava 发射的事件，之后在 <code>detachView()</code> 解绑的时候取消订阅。</p><h2 id="MVP-的简单使用"><a href="#MVP-的简单使用" class="headerlink" title="MVP 的简单使用"></a>MVP 的简单使用</h2><p>在使用前，我们先建一个 <code>BaseActivity</code> 作为所有的Activity的基类，并将其生命周期与 MVP 模块关联起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> T presenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setPresenter();</span><br><span class="line">        <span class="keyword">if</span> (presenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            presenter.attachView(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (presenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            presenter.detachView();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>需求：一个 app 的启动页，启动页图片来自服务器。</p><p><code>SplashContract</code> 中定义各个接口要回调的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplashContract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showSplash</span><span class="params">(SplashImageBean bean)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">View</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getSplashData</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>SplashPresenter</code> 中实现网络的请求和view的回调<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashPresenter</span> <span class="keyword">extends</span> <span class="title">RxPresenter</span>&lt;<span class="title">SplashContract</span>.<span class="title">View</span>&gt; <span class="keyword">implements</span> <span class="title">SplashContract</span>.<span class="title">Presenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Apis zqswApis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SplashPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        zqswApis = RetrofitHelper.getInstance().getApis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSplashData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Disposable disposable = zqswApis.getStartImg(<span class="string">""</span>,<span class="string">""</span>)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;ApiResponse&lt;SplashImageBean&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ApiResponse&lt;SplashImageBean&gt; splashImageBean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        view.showSplash(splashImageBean.getReturnObject());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.e(<span class="string">"cpacm"</span>, throwable.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        addDisposable(disposable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>SplashActivity</code> 实现UI完成整个需求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cpacm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/2/16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desciption</span> 启动界面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">SplashPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">SplashContract</span>.<span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView bgView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_splash);</span><br><span class="line">        bgView = (ImageView) findViewById(R.id.background);</span><br><span class="line">        presenter.getSplashData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        presenter = <span class="keyword">new</span> SplashPresenter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSplash</span><span class="params">(SplashImageBean bean)</span> </span>&#123;</span><br><span class="line">        Glide.with(<span class="keyword">this</span>)</span><br><span class="line">                .load(bean.getImageUrl())</span><br><span class="line">                .into(bgView);</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, bean.toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>项目源码见下方链接</strong></p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>整个框架小巧而精致，而且看起来也不怎么复杂，个人项目或者小型的团队项目应付起来应该是绰绰有余了，不过大型的项目应该还需要扩展或者采用其他的架构来应付繁琐的需求。</p><hr><p><a href="https://github.com/cpacm/android_learn/tree/master/MvpDemo" target="_blank" rel="noopener">MvpDemo源码</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十五）—— 音乐播放器要点</title>
      <link href="/2017/02/19/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E8%A6%81%E7%82%B9/"/>
      <url>/2017/02/19/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="一款完整的音乐播放器要具备哪些功能呢？"><a href="#一款完整的音乐播放器要具备哪些功能呢？" class="headerlink" title="一款完整的音乐播放器要具备哪些功能呢？"></a>一款完整的音乐播放器要具备哪些功能呢？</h2><ol><li>能播放音乐，这是最基础的功能；</li><li>能上下首切换，能暂停/播放，能拖动播放条进度，这也是常见的控制功能；</li><li>能在手机后台播放，现在没有这个功能都不好意思叫播放器了；</li><li>能有播放列表，能够进行循环，单曲或随机播放；</li><li>能在通知栏上显示歌曲播放信息；</li><li>能够同步显示歌词；</li><li>能够支持线控，所谓线控是指耳机上的按键能够控制播放器，耳机的插拔实现播放器的播放暂停也算属于这个功能内；</li><li>能在播放时进行音乐锁屏，好吧，其实我很讨厌这个功能，因为有了这个功能后大部分手机解锁时都要滑两次屏，有点画蛇添足的意味。<a id="more"></a></li></ol><p><strong>MusicService</strong>:在 Android 中后台任务一般使用 Service 来实现，所以可以建立一个 MusicService 来后台播放音乐。</p><p><strong>MediaPlayerManager</strong>:同时为了更好的管理 MediaPlayer 可以再创建 MediaPlayerManager 类来管理音乐的控制。</p><p><strong>MusicPlaylist</strong>:播放列表，记录当前要播放歌曲的列表，以便切换歌曲的播放。</p><h2 id="音乐播放器细节备忘录"><a href="#音乐播放器细节备忘录" class="headerlink" title="音乐播放器细节备忘录"></a>音乐播放器细节备忘录</h2><h3 id="MediaPlayer"><a href="#MediaPlayer" class="headerlink" title="MediaPlayer"></a>MediaPlayer</h3><p>一般使用 MediaPlayer 就可以实现多媒体的播放，同时 SetWakeMode 为 <code>PowerManager.PARTIAL_WAKE_LOCK</code> 保证能够在后台运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mediaPlayer = <span class="keyword">new</span> MediaPlayer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure the media player will acquire a wake-lock while</span></span><br><span class="line"><span class="comment">// playing. If we don't do that, the CPU might go to sleep while the</span></span><br><span class="line"><span class="comment">// song is playing, causing playback to stop.</span></span><br><span class="line">mediaPlayer.setWakeMode(mContext, PowerManager.PARTIAL_WAKE_LOCK);</span><br></pre></td></tr></table></figure><p>这里同时要处理一下 AudioFocus 的问题，在播放前去请求硬件资源，播放结束后释放硬件资源。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Try to get the system audio focus.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">audioManager.requestAudioFocus(<span class="keyword">this</span>, AudioManager.STREAM_MUSIC,</span><br><span class="line">                AudioManager.AUDIOFOCUS_GAIN);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Give up the audio focus.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">audioManager.abandonAudioFocus(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p><p>为了防止 Service 在运行一段时间后自动结束，在播放歌曲时要将其设置为前台服务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsForeground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    startForeground(MusicNotification.NOTIFICATION_ID, MusicNotification.getNotification());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeForeground</span><span class="params">(<span class="keyword">boolean</span> removeNotification)</span> </span>&#123;</span><br><span class="line">    stopForeground(removeNotification);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用-MediaSession-来控制播放器"><a href="#使用-MediaSession-来控制播放器" class="headerlink" title="使用 MediaSession 来控制播放器"></a>使用 MediaSession 来控制播放器</h3><p>MediaSession 框架是 Google 推出专门解决媒体播放时界面和服务通讯问题。这个框架可以让我们不再使用广播来控制播放器，而且也能适配耳机，蓝牙等一些其它设备，实现线控的功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mState = <span class="keyword">new</span> PlaybackStateCompat.Builder()</span><br><span class="line">        .setActions(</span><br><span class="line">                ACTION_PLAY |</span><br><span class="line">                        ACTION_PAUSE |</span><br><span class="line">                        ACTION_PLAY_PAUSE |</span><br><span class="line">                        ACTION_SKIP_TO_NEXT |</span><br><span class="line">                        ACTION_SKIP_TO_PREVIOUS |</span><br><span class="line">                        ACTION_STOP |</span><br><span class="line">                        ACTION_PLAY_FROM_MEDIA_ID |</span><br><span class="line">                        ACTION_PLAY_FROM_SEARCH |</span><br><span class="line">                        ACTION_SKIP_TO_QUEUE_ITEM |</span><br><span class="line">                        ACTION_SEEK_TO)</span><br><span class="line">        .setState(state, PLAYBACK_POSITION_UNKNOWN, <span class="number">1.0f</span>, SystemClock.elapsedRealtime())</span><br><span class="line">        .build();</span><br><span class="line">mediaSession.setPlaybackState(mState);</span><br></pre></td></tr></table></figure></p><p>线控的实现，MediaSessionCallback 类继承 MediaSessionCompat.Callback，利用 MusicPlayerManager 来实现 <code>onPlay()</code>,<code>onPause</code>,<code>onSkipToNext()</code>等一系列方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线控</span></span><br><span class="line"><span class="comment"> * 使用 &#123;<span class="doctag">@link</span> MediaButtonReceiver&#125; 来兼容 api21 之前的版本</span></span><br><span class="line"><span class="comment"> * 使用&#123;<span class="doctag">@link</span> MediaSessionCompat#setCallback&#125;控制 api21 之后的版本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpMediaSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ComponentName mbr = <span class="keyword">new</span> ComponentName(getPackageName(), MediaButtonReceiver.class.getName());</span><br><span class="line">    mediaSession = <span class="keyword">new</span> MediaSessionCompat(<span class="keyword">this</span>, <span class="string">"fd"</span>, mbr, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">/* set flags to handle media buttons */</span></span><br><span class="line">    mediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS |</span><br><span class="line">            MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);</span><br><span class="line">    <span class="comment">/* this is need after Lolipop */</span></span><br><span class="line">    mediaSession.setCallback(<span class="keyword">new</span> MediaSessionCallback());</span><br><span class="line">    setState(STATE_NONE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="通知栏"><a href="#通知栏" class="headerlink" title="通知栏"></a>通知栏</h3><p>使用 NotificationCompat 创建通知栏信息就足够了。音乐播放器的通知栏一般选择 <code>MediaStyle</code> 风格就能用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PendingIntent stopServiceIntent = PendingIntent.getBroadcast(musicService, REQ_CODE, <span class="keyword">new</span> Intent(ACTION_STOP), PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(musicService);</span><br><span class="line">        builder.setStyle(</span><br><span class="line">                <span class="keyword">new</span> NotificationCompat.MediaStyle().setShowActionsInCompactView(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                        .setMediaSession(musicService.getMediaSession().getSessionToken()).setShowCancelButton(<span class="keyword">true</span>).setCancelButtonIntent(stopServiceIntent))</span><br><span class="line">                .setSmallIcon(R.drawable.music)</span><br><span class="line">                .setCategory(CATEGORY_TRANSPORT)</span><br><span class="line">                .setVisibility(VISIBILITY_PUBLIC)</span><br><span class="line">                .setDeleteIntent(stopServiceIntent)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setContentIntent(PendingIntent.getActivity(musicService, REQ_CODE,</span><br><span class="line">                        <span class="keyword">new</span> Intent(musicService, SongPlayerActivity.class), PendingIntent.FLAG_CANCEL_CURRENT))</span><br><span class="line">                .setPriority(PRIORITY_MAX);</span><br><span class="line">                </span><br><span class="line"><span class="comment">// 添加按键动作，包括播放/暂停按钮，上一首下一首按钮</span></span><br><span class="line">builder.addAction(R.drawable.ic_play_skip_previous, musicService.getString(R.string.music_previous), PendingIntent.getBroadcast(musicService, REQ_CODE,</span><br><span class="line">                <span class="keyword">new</span> Intent(ACTION_PREV), PendingIntent.FLAG_CANCEL_CURRENT));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (musicService.getState() == STATE_PLAYING) &#123;</span><br><span class="line">    builder.addAction(R.drawable.ic_play, musicService.getString(R.string.music_pause), PendingIntent.getBroadcast(musicService, REQ_CODE,</span><br><span class="line">            <span class="keyword">new</span> Intent(ACTION_PAUSE), PendingIntent.FLAG_CANCEL_CURRENT));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    builder.addAction(R.drawable.ic_pause, musicService.getString(R.string.music_play), PendingIntent.getBroadcast(musicService, REQ_CODE,</span><br><span class="line">            <span class="keyword">new</span> Intent(ACTION_PLAY), PendingIntent.FLAG_CANCEL_CURRENT));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">builder.addAction(R.drawable.ic_play_skip_next, musicService.getString(R.string.music_next), PendingIntent.getBroadcast(musicService, REQ_CODE,</span><br><span class="line">        <span class="keyword">new</span> Intent(ACTION_NEXT), PendingIntent.FLAG_CANCEL_CURRENT));</span><br></pre></td></tr></table></figure><p>当歌曲播放状态发生变化时比如上下首切换，暂停等，都要重新向通知栏发送消息以便实时更新通知栏的歌曲信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationManagerCompat.from(musicService).notify(NOTIFICATION_ID, getNotification());</span><br></pre></td></tr></table></figure></p><blockquote><p>在一些手机上（特别是MIUI）无法设置通知栏的缩略图片，只能通过自定义View 设置给 NotificationCompat 来避免这个问题。</p></blockquote><h3 id="歌词显示"><a href="#歌词显示" class="headerlink" title="歌词显示"></a>歌词显示</h3><p>一般都是利用自己实现的 LrcView 与播放器的进度进行同步，歌词的显示和滚动的效果都是交给 LrcView 处理。<br>步骤：从文件读取 Lrc 歌词，然后根据<code>[00:02.32]</code>解析歌词时间，与 MediaPlayer 进行同步，根据播放时间显示相应的歌词，动画效果和文字的显示则是交给 LrcView 来实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 解析歌词时间 </span></span><br><span class="line"><span class="comment"> * 歌词内容格式如下： </span></span><br><span class="line"><span class="comment"> * [00:02.32]陈奕迅 </span></span><br><span class="line"><span class="comment"> * [00:03.43]好久不见 </span></span><br><span class="line"><span class="comment"> * [00:05.22]歌词制作  王涛 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeStr </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">time2Str</span><span class="params">(String timeStr)</span> </span>&#123;  </span><br><span class="line">    timeStr = timeStr.replace(<span class="string">":"</span>, <span class="string">"."</span>);  </span><br><span class="line">    timeStr = timeStr.replace(<span class="string">"."</span>, <span class="string">"@"</span>);  </span><br><span class="line">      </span><br><span class="line">    String timeData[] = timeStr.split(<span class="string">"@"</span>); <span class="comment">//将时间分隔成字符串数组  </span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//分离出分、秒并转换为整型  </span></span><br><span class="line">    <span class="keyword">int</span> minute = Integer.parseInt(timeData[<span class="number">0</span>]);  </span><br><span class="line">    <span class="keyword">int</span> second = Integer.parseInt(timeData[<span class="number">1</span>]);  </span><br><span class="line">    <span class="keyword">int</span> millisecond = Integer.parseInt(timeData[<span class="number">2</span>]);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//计算上一行与下一行的时间转换为毫秒数  </span></span><br><span class="line">    <span class="keyword">int</span> currentTime = (minute * <span class="number">60</span> + second) * <span class="number">1000</span> + millisecond * <span class="number">10</span>;  </span><br><span class="line">    <span class="keyword">return</span> currentTime;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="本地歌曲"><a href="#本地歌曲" class="headerlink" title="本地歌曲"></a>本地歌曲</h3><p>本地的专辑和歌曲都可以使用 <code>Context.getContentResolver()</code> 来进行查找，甚至连专辑的封面，艺人等信息也可以找到（只要歌曲携带这些信息,没有携带信息的歌曲都会标记为 unknown）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找本地的歌曲</span></span><br><span class="line">Cursor cursor = context.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"title"</span>, <span class="string">"artist"</span>, <span class="string">"album"</span>, <span class="string">"duration"</span>, <span class="string">"track"</span>, <span class="string">"artist_id"</span>, <span class="string">"album_id"</span>, <span class="string">"_data"</span>&#125;, selectionStatement, <span class="keyword">null</span>, MediaStore.Audio.Media.DEFAULT_SORT_ORDER);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找本地的专辑</span></span><br><span class="line">Cursor cursor = context.getContentResolver().query(MediaStore.Audio.Albums.EXTERNAL_CONTENT_URI, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"album"</span>, <span class="string">"artist"</span>, <span class="string">"artist_id"</span>, <span class="string">"numsongs"</span>, <span class="string">"minyear"</span>&#125;, selection, paramArrayOfString, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找本地的艺人</span></span><br><span class="line">Cursor cursor = context.getContentResolver().query(MediaStore.Audio.Artists.EXTERNAL_CONTENT_URI, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"artist"</span>, <span class="string">"number_of_albums"</span>, <span class="string">"number_of_tracks"</span>&#125;, selection, paramArrayOfString, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取album的封面照片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Uri <span class="title">getAlbumArtUri</span><span class="params">(<span class="keyword">long</span> paramInt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ContentUris.withAppendedId(Uri.parse(<span class="string">"content://media/external/audio/albumart"</span>), paramInt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>网络上的歌曲下载到本地时要想及时的出现在本地歌库中，需要手动的去扫描系统的多媒体库。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 媒体扫描，防止下载后在sdcard中获取不到歌曲的信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mp3Scanner</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        MediaScannerConnection.scanFile(CoreApplication.getInstance().getApplicationContext(),</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;path&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面只是列出了一些比较重要的代码，整体的代码可以参考我下面放的 Github 地址，里面有着完整的播放器源码，希望能够帮助你理清如何实现音乐播放的思路。</p><p>我自己写的播放器源码<br><a href="https://github.com/cpacm/MoeMusic" target="_blank" rel="noopener">MoeMusic-基于萌否网站api的音乐管理软件 </a></p><hr><p>其他一些参考的播放器源码：<br><a href="https://github.com/googlesamples/android-UniversalMusicPlayer" target="_blank" rel="noopener">googlesample-android-UniversalMusicPlayer</a><br><a href="https://github.com/naman14/Timber" target="_blank" rel="noopener">Timber-Material Design Music Player</a><br><a href="https://github.com/hefuyicoder/ListenerMusicPlayer" target="_blank" rel="noopener">ListenerMusicPlayer-A Grace Material Design Music Player</a></p><p>关于 MediaSession 的说明<br><a href="http://www.oschina.net/question/2561862_2150611" target="_blank" rel="noopener">Android：MediaSession框架介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十四）——带你解决 WebView 里的常见问题</title>
      <link href="/2017/02/10/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%86%B3%20WebView%20%E9%87%8C%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2017/02/10/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%86%B3%20WebView%20%E9%87%8C%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>通常我们在自己开发的 APP 中打开网页无非两种方法： 一是跳转到系统自带的浏览器，二是使用 WebView 控件加载页面。使用 WebView 控件的好处就是可以通过各种 api 接口来定制各种行为，常用的几个设置地方为 <strong>WebSettings</strong>、<strong>JavaScriptInterface</strong>、<strong>WebViewClient</strong> 和 <strong>WebChromeClient</strong>。平时出现的问题都可以通过修改这些设置来解决。<br><a id="more"></a></p><h3 id="使用了-WebView-还是跳转到了系统自带的浏览器？"><a href="#使用了-WebView-还是跳转到了系统自带的浏览器？" class="headerlink" title="使用了 WebView 还是跳转到了系统自带的浏览器？"></a>使用了 WebView 还是跳转到了系统自带的浏览器？</h3><p>很简单的解决方法，为你的 webview 设置一个新的 WebViewClient。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        view.loadUrl(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或者直接添加，效果是一样的</span></span><br><span class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br></pre></td></tr></table></figure><h3 id="获取网页的标题和图标"><a href="#获取网页的标题和图标" class="headerlink" title="获取网页的标题和图标"></a>获取网页的标题和图标</h3><p>通过 WebChromeClient 可以获取到这些信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onReceivedTitle(view, title);</span><br><span class="line">        setTitle(title);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedIcon</span><span class="params">(WebView view, Bitmap icon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onReceivedIcon(view, icon);</span><br><span class="line">        setIcon(icon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>但是，这里有个问题，当通过 <code>webView.goBack()</code> 方式返回上一级Web页面的时候不会触发这个方法，因此会导致标题无法跟随历史记录返回上一级页面。所以需要在 <code>onPageFinished()</code> 中对界面标题重新设置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">        setTitle(String.valueOf(view.getTitle()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="返回键实现网页的后退键"><a href="#返回键实现网页的后退键" class="headerlink" title="返回键实现网页的后退键"></a>返回键实现网页的后退键</h3><p>在 WebView 中可以通过 goBack() 方法后退到历史记录的上一项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Actvity 中监听返回键按钮</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (webView.canGoBack())</span><br><span class="line">        webView.goBack();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="设置-WebView-的-header"><a href="#设置-WebView-的-header" class="headerlink" title="设置 WebView 的 header"></a>设置 WebView 的 header</h3><p>在 WebView 的 <code>loadUrl()</code> 方法中传入 Header 参数即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadURLWithHTTPHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String url = <span class="string">"http://cpacm.net"</span>;</span><br><span class="line">    WebView webView = <span class="keyword">new</span> WebView(getActivity());</span><br><span class="line">    Map&lt;String,String&gt; extraHeaders = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    extraHeaders.put(<span class="string">"Referer"</span>, <span class="string">"http://www.google.com"</span>);</span><br><span class="line">    webView.loadUrl(url, extraHeaders);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="设置-WebView-的-User-Agent"><a href="#设置-WebView-的-User-Agent" class="headerlink" title="设置 WebView 的 User-Agent"></a>设置 WebView 的 User-Agent</h3><p>不要试图在 Header 里面去修改，而是在 WebSettings 修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.getSettings().setUserAgentString(<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="如何设置-WebView-的缓存"><a href="#如何设置-WebView-的缓存" class="headerlink" title="如何设置 WebView 的缓存"></a>如何设置 WebView 的缓存</h3><p>当需要本地缓存网页的时候就需要打开 WebViewSettings 的缓存开关,这样子当下次进到该页面无网络的情况下也能打开页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WebSettings settings = webView.getSettings();</span><br><span class="line">settings.setAppCacheEnabled(<span class="keyword">true</span>); <span class="comment">//启用应用缓存</span></span><br><span class="line">settings.setDomStorageEnabled(<span class="keyword">true</span>); <span class="comment">//启用或禁用DOM缓存。</span></span><br><span class="line">settings.setDatabaseEnabled(<span class="keyword">true</span>); <span class="comment">//启用或禁用DOM缓存。</span></span><br><span class="line"><span class="keyword">if</span> (SystemUtil.isNetworkConnected()) &#123; <span class="comment">//判断是否联网</span></span><br><span class="line">    settings.setCacheMode(WebSettings.LOAD_DEFAULT); <span class="comment">//默认的缓存使用模式</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    settings.setCacheMode(WebSettings.LOAD_CACHE_ONLY); <span class="comment">//不从网络加载数据，只从缓存加载数据。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无法下载文件？"><a href="#无法下载文件？" class="headerlink" title="无法下载文件？"></a>无法下载文件？</h3><p>在自己写的 WebView 下是无法直接下载文件，需要自己监听下载事件并对下载的动作进行处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 当下载文件时打开系统自带的浏览器进行下载，当然也可以对捕获到的 url 进行处理在应用内下载。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">webView.setDownloadListener(<span class="keyword">new</span> FileDownLoadListener());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDownLoadListener</span> <span class="keyword">implements</span> <span class="title">DownloadListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadStart</span><span class="params">(String url, String userAgent, String contentDisposition, String mimetype, <span class="keyword">long</span> contentLength)</span> </span>&#123;</span><br><span class="line">        Uri uri = Uri.parse(url);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="无法打开文件选择器？"><a href="#无法打开文件选择器？" class="headerlink" title="无法打开文件选择器？"></a>无法打开文件选择器？</h3><p>通过重写 <code>WebChromeClient</code> 来实现点击 <code>&lt;input type=&#39;file&#39;&gt;</code> 来打开系统文件选择器。</p><p><strong>一个完整的Activity示例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Android 5.0以下版本的文件选择回调 */</span></span><br><span class="line">    <span class="keyword">protected</span> ValueCallback&lt;Uri&gt; mFileUploadCallbackFirst;</span><br><span class="line">    <span class="comment">/** Android 5.0及以上版本的文件选择回调 */</span></span><br><span class="line">    <span class="keyword">protected</span> ValueCallback&lt;Uri[]&gt; mFileUploadCallbackSecond;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE_FILE_PICKER = <span class="number">51426</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String mUploadableFileTypes = <span class="string">"image/*"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebView mWebView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        initWebView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mWebView = (WebView) findViewById(R.id.my_webview);</span><br><span class="line"></span><br><span class="line">        mWebView.loadUrl(<span class="string">"file:///android_asset/index.html"</span>);</span><br><span class="line">        mWebView.setWebChromeClient(<span class="keyword">new</span> OpenFileChromeClient());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenFileChromeClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Android 2.2 (API level 8)到Android 2.3 (API level 10)版本选择文件时会触发该隐藏方法</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg)</span> </span>&#123;</span><br><span class="line">            openFileChooser(uploadMsg, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Android 3.0 (API level 11)到 Android 4.0 (API level 15))版本选择文件时会触发，该方法为隐藏方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType)</span> </span>&#123;</span><br><span class="line">            openFileChooser(uploadMsg, acceptType, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Android 4.1 (API level 16) -- Android 4.3 (API level 18)版本选择文件时会触发，该方法为隐藏方法</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span> </span>&#123;</span><br><span class="line">            openFileInput(uploadMsg, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Android 5.0 (API level 21)以上版本会触发该方法，该方法为公开方法</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onShowFileChooser</span><span class="params">(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> allowMultiple = fileChooserParams.getMode() == FileChooserParams.MODE_OPEN_MULTIPLE;<span class="comment">//是否支持多选</span></span><br><span class="line">                openFileInput(<span class="keyword">null</span>, filePathCallback, allowMultiple);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">openFileInput</span><span class="params">(<span class="keyword">final</span> ValueCallback&lt;Uri&gt; fileUploadCallbackFirst, <span class="keyword">final</span> ValueCallback&lt;Uri[]&gt; fileUploadCallbackSecond, <span class="keyword">final</span> <span class="keyword">boolean</span> allowMultiple)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Android 5.0以下版本</span></span><br><span class="line">        <span class="keyword">if</span> (mFileUploadCallbackFirst != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mFileUploadCallbackFirst.onReceiveValue(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mFileUploadCallbackFirst = fileUploadCallbackFirst;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Android 5.0及以上版本</span></span><br><span class="line">        <span class="keyword">if</span> (mFileUploadCallbackSecond != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mFileUploadCallbackSecond.onReceiveValue(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mFileUploadCallbackSecond = fileUploadCallbackSecond;</span><br><span class="line"></span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">        i.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (allowMultiple) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">                i.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i.setType(mUploadableFileTypes);</span><br><span class="line"></span><br><span class="line">        startActivityForResult(Intent.createChooser(i, <span class="string">"选择文件"</span>), REQUEST_CODE_FILE_PICKER);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> <span class="keyword">int</span> resultCode, <span class="keyword">final</span> Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE_FILE_PICKER) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">                <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//Android 5.0以下版本</span></span><br><span class="line">                    <span class="keyword">if</span> (mFileUploadCallbackFirst != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mFileUploadCallbackFirst.onReceiveValue(intent.getData());</span><br><span class="line">                        mFileUploadCallbackFirst = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (mFileUploadCallbackSecond != <span class="keyword">null</span>) &#123;<span class="comment">//Android 5.0及以上版本</span></span><br><span class="line">                        Uri[] dataUris = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (intent.getDataString() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                dataUris = <span class="keyword">new</span> Uri[] &#123; Uri.parse(intent.getDataString()) &#125;;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">16</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (intent.getClipData() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        <span class="keyword">final</span> <span class="keyword">int</span> numSelectedFiles = intent.getClipData().getItemCount();</span><br><span class="line"></span><br><span class="line">                                        dataUris = <span class="keyword">new</span> Uri[numSelectedFiles];</span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numSelectedFiles; i++) &#123;</span><br><span class="line">                                            dataUris[i] = intent.getClipData().getItemAt(i).getUri();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (Exception ignored) &#123; &#125;</span><br><span class="line">                        mFileUploadCallbackSecond.onReceiveValue(dataUris);</span><br><span class="line">                        mFileUploadCallbackSecond = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//这里mFileUploadCallbackFirst跟mFileUploadCallbackSecond在不同系统版本下分别持有了</span></span><br><span class="line">                <span class="comment">//WebView对象，在用户取消文件选择器的情况下，需给onReceiveValue传null返回值</span></span><br><span class="line">                <span class="comment">//否则WebView在未收到返回值的情况下，无法进行任何操作，文件选择器会失效</span></span><br><span class="line">                <span class="keyword">if</span> (mFileUploadCallbackFirst != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mFileUploadCallbackFirst.onReceiveValue(<span class="keyword">null</span>);</span><br><span class="line">                    mFileUploadCallbackFirst = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (mFileUploadCallbackSecond != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mFileUploadCallbackSecond.onReceiveValue(<span class="keyword">null</span>);</span><br><span class="line">                    mFileUploadCallbackSecond = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="怎么为-WebView-的加载添加进度条"><a href="#怎么为-WebView-的加载添加进度条" class="headerlink" title="怎么为 WebView 的加载添加进度条"></a>怎么为 WebView 的加载添加进度条</h3><p>这里的 <code>onPageFinished()</code> 有个问题，不能在这里监听页面是否加载完毕（我自己测试的时候，好像在重定向和加载完 iframes 时都会调用这个方法）。<br>把页面加载完毕的判断放在 <code>onProgressChanged()</code> 里可能会更为准确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        progressBar.setProgress(position);</span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">100</span>) &#123;</span><br><span class="line">            progressBar.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onProgressChanged(view, position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class="line">        progressBar.setVisibility(View.VISIBLE);</span><br><span class="line">        <span class="keyword">super</span>.onPageStarted(view, url, favicon);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="怎样对页面进行-Js-注入？"><a href="#怎样对页面进行-Js-注入？" class="headerlink" title="怎样对页面进行 Js 注入？"></a>怎样对页面进行 Js 注入？</h3><p>首先你要在 WebView 开启 JavaScript,然后搭建桥梁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WebSettings webSettings = webView.getSettings();</span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">webView.addJavascriptInterface(<span class="keyword">new</span> WebAppBridge(<span class="keyword">new</span> WebAppBridge.OauthLoginImpl() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getResult</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//TODO</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="string">"oauth"</span>);</span><br><span class="line">webView.loadUrl(<span class="string">"javascript:"</span> + getAssetsJs(<span class="string">"autologin.js"</span>));</span><br><span class="line">webView.loadUrl(<span class="string">"javascript:adduplistener()"</span>);</span><br></pre></td></tr></table></figure></p><p>WebAppBridge的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppBridge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OauthLoginImpl oauthLogin;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebAppBridge</span><span class="params">(OauthLoginImpl oauthLogin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oauthLogin = oauthLogin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getResult</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oauthLogin != <span class="keyword">null</span>)</span><br><span class="line">            oauthLogin.getResult(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OauthLoginImpl</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getResult</span><span class="params">(String s)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单的说就是向网页注入一段 js, 在这段 js 里面设置回调到java中的方法 <code>getResult()</code>，由 WebAppBridge.getResult 来回收。<br>其中js的核心代码为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oauth.getResult(str);</span><br></pre></td></tr></table></figure></p><p>其中 oauth 这个名称要与 <code>webView.addJavascriptInterface()</code>方法的第二个参数一样。</p><p>具体的代码可以参考这个项目中写的 js 注入逻辑 <a href="https://github.com/cpacm/MoeMusic/blob/master/app/src/main/java/com/cpacm/moemusic/ui/widgets/dialogs/OauthDialog.java" target="_blank" rel="noopener">OauthDialog</a></p><h3 id="如何手动添加-Cookie"><a href="#如何手动添加-Cookie" class="headerlink" title="如何手动添加 Cookie"></a>如何手动添加 Cookie</h3><p>需要获得 CookieManager 的对象并将 cookie 设置进去。<br><strong>从服务器的返回头中取出 cookie 根据Http请求的客户端不同，获取 cookie 的方式也不同，请自行获取。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将cookie设置到 WebView</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url 要加载的 url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cookie 要同步的 cookie</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">syncCookie</span><span class="params">(String url,String cookie)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">        CookieSyncManager.createInstance(context);</span><br><span class="line">    &#125;</span><br><span class="line">    CookieManager cookieManager = CookieManager.getInstance();</span><br><span class="line">    cookieManager.setAcceptCookie(<span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cookie 设置形式</span></span><br><span class="line"><span class="comment">     * cookieManager.setCookie(url, "key=value;" + "domain=[your domain];path=/;")</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    cookieManager.setCookie(url, cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删除 Cookie 的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个两个在 API level 21 被抛弃</span></span><br><span class="line"><span class="comment"> * CookieManager.getInstance().removeSessionCookie();</span></span><br><span class="line"><span class="comment"> * CookieManager.getInstance().removeAllCookie();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 推荐使用这两个， level 21 新加的</span></span><br><span class="line"><span class="comment"> * CookieManager.getInstance().removeSessionCookies();</span></span><br><span class="line"><span class="comment"> * CookieManager.getInstance().removeAllCookies();</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeCookies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CookieManager cookieManager = CookieManager.getInstance();</span><br><span class="line">    cookieManager.removeAllCookie();</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">        cookieManager.flush();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CookieSyncManager.createInstance(Application.getInstance());</span><br><span class="line">        CookieSyncManager.getInstance().sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="如何使-HTML5-video-在-WebView-全屏显示"><a href="#如何使-HTML5-video-在-WebView-全屏显示" class="headerlink" title="如何使 HTML5 video 在 WebView 全屏显示"></a>如何使 HTML5 video 在 WebView 全屏显示</h3><p>当网页全屏播放视频时会调用 <code>WebChromeClient.onShowCustomView()</code> 方法，所以可以通过将 video 播放的视图全屏达到目的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowCustomView</span><span class="params">(View view, CustomViewCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> FrameLayout &amp;&amp; fullScreenView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A video wants to be shown</span></span><br><span class="line">        <span class="keyword">this</span>.videoViewContainer = (FrameLayout) view;</span><br><span class="line">        <span class="keyword">this</span>.videoViewCallback = callback;</span><br><span class="line">        fullScreenView.addView(videoViewContainer, <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</span><br><span class="line">        fullScreenView.setVisibility(View.VISIBLE);</span><br><span class="line">        isVideoFullscreen = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHideCustomView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isVideoFullscreen &amp;&amp; fullScreenView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Hide the video view, remove it, and show the non-video view</span></span><br><span class="line">        fullScreenView.setVisibility(View.INVISIBLE);</span><br><span class="line">        fullScreenView.removeView(videoViewContainer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call back (only in API level &lt;19, because in API level 19+ with chromium webview it crashes)</span></span><br><span class="line">        <span class="keyword">if</span> (videoViewCallback != <span class="keyword">null</span> &amp;&amp; !videoViewCallback.getClass().getName().contains(<span class="string">".chromium."</span>)) &#123;</span><br><span class="line">            videoViewCallback.onCustomViewHidden();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isVideoFullscreen = <span class="keyword">false</span>;</span><br><span class="line">        videoViewContainer = <span class="keyword">null</span>;</span><br><span class="line">        videoViewCallback = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是很多的手机版本在网页视频播放时是不会调用这个方法的，所以这个方法局限性很大。</p><h3 id="Android5-0上-WebView中Http和Https混合问题"><a href="#Android5-0上-WebView中Http和Https混合问题" class="headerlink" title="Android5.0上 WebView中Http和Https混合问题"></a>Android5.0上 WebView中Http和Https混合问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MIXED_CONTENT_ALWAYS_ALLOW：允许从任何来源加载内容，即使起源是不安全的；</span></span><br><span class="line"><span class="comment"> * MIXED_CONTENT_NEVER_ALLOW：不允许Https加载Http的内容，即不允许从安全的起源去加载一个不安全的资源；</span></span><br><span class="line"><span class="comment"> * MIXED_CONTENT_COMPATIBILITY_MODE：当涉及到混合式内容时，WebView 会尝试去兼容最新Web浏览器的风格。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">     webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何避免-WebView-的内存泄露问题"><a href="#如何避免-WebView-的内存泄露问题" class="headerlink" title="如何避免 WebView 的内存泄露问题"></a>如何避免 WebView 的内存泄露问题</h3><ol><li>可以将 Webview 的 Activity 新起一个进程，结束的时候直接System.exit(0);退出当前进程；</li><li>不在xml中定义 WebView，而是在代码中创建，使用 getApplicationgContext() 作为传递的 Conetext；</li><li>在 Activity 销毁的时候，将 WebView 置空<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (webView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        webView.loadDataWithBaseURL(<span class="keyword">null</span>, <span class="string">""</span>, <span class="string">"text/html"</span>, <span class="string">"utf-8"</span>, <span class="keyword">null</span>);</span><br><span class="line">        webView.clearHistory();</span><br><span class="line">        ((ViewGroup) webView.getParent()).removeView(webView);</span><br><span class="line">        webView.destroy();</span><br><span class="line">        webView = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你踩到了 WebView 上的坑，请先默哀一分钟，然后努力找找解决方法吧，总会有人体验过你的悲剧，也会有人重蹈你的覆辙。<br>当然 WebView 里肯定不止我上面列出来的这些问题，如果你有更多的 WebView 问题解决方案欢迎评论交流。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础知识</title>
      <link href="/2017/02/10/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/02/10/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是一篇关于《MySQL技术内幕（第4版）》的阅读笔记，主要是为了从无到有系统的学习下数据库的知识。</p><p>杜波依斯编著的《MySQL技术内幕（第4版）》介绍了MySQL的基础知识及其有别于其他数据库系统的独特功能，包括SQL的工作原理和MySQL API的相关知识；讲述了如何将MySQL与Perl或PHP等语言结合起来，为数据库查询结果生成动态Web页面，如何编写MySQL数据访问程序；详细讨论了数据库管理和维护、数据目录的组织和内容、访问控制、安全连接等。附录还提供了软件的安装信息，罗列了MySQL数据类型、函数、变量、语法、程序、API等重要细节。</p><a id="more"></a><h2 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h2><p>进入数据库</p><blockquote><p>mysql -u root -p</p></blockquote><p>退出</p><blockquote><p>quit</p></blockquote><p>;或\g(go)作为结束符表示终止指令，\G表示为竖排显示数据</p><p>创建名为 acgdb 的数据库</p><blockquote><p>create database acgdb;</p></blockquote><p>可以使用character set 和 collate 子句对数据库属性作出明确的设置</p><blockquote><p>create database acgdb character.set utf8 collate utf8_icelandic_ci;</p></blockquote><p>改变数据库的全局特性</p><blockquote><p>ALTER DATABASE [db_name] [CHARACTER SET charset] [COLLATE collation];</p></blockquote><p>使用语句查看现有数据库的定义</p><blockquote><p>show create database acgdb;</p></blockquote><p>删除数据库</p><blockquote><p>drop database acgdb;</p></blockquote><p>此时并没有数据库再使用，可以用下面指令查看</p><blockquote><p>select database();</p></blockquote><p>使用 acgdb</p><blockquote><p>use acgdb;</p></blockquote><p>也可以在进入数据库的时候携带数据库名称</p><blockquote><p>mysql -p -u root acgdb;</p></blockquote><h3 id="数据引擎"><a href="#数据引擎" class="headerlink" title="数据引擎"></a>数据引擎</h3><p><strong>MyISAM</strong> 和 <strong>InnoDB</strong>的适用场景<br>MyISAM适合：</p><ol><li>做很多 count 的计算；</li><li>插入不频繁，查询非常频繁；</li><li>没有事务。</li></ol><p>InnoDB适合：</p><ol><li>可靠性要求比较高，或者要求事务；</li><li>表更新和查询都相当的频繁，并且表锁定的机会比较大的情况。</li></ol><p><strong>MyISAM</strong> 和 <strong>InnoDB</strong>的区别</p><ol><li>MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持</li><li>mysiam表不支持外键</li><li>在执行数据库写入的操作（insert,update,delete）的时候，mysiam表会锁表，而innodb表会锁行</li><li>当你的数据库有大量的写入、更新操作而查询比较少或者数据完整性要求比较高的时候就选择innodb表。当你的数据库主要以查询为主，相比较而言更新和写 入比较少，并且业务方面数据完整性要求不那么严格，就选择mysiam表。因为mysiam表的查询操作效率和速度都比innodb要快</li></ol><h3 id="查看元数据"><a href="#查看元数据" class="headerlink" title="查看元数据"></a>查看元数据</h3><p>查看服务器的数据库</p><blockquote><p>show databases;</p></blockquote><p>查看给定数据库的 CREATE DATABASE 语句：</p><blockquote><p>show CREATE DATABASE db_name;</p></blockquote><p>列出默认数据库或给定数据库的数据表：</p><blockquote><p>show tables [from db_name];</p></blockquote><p>查看数据表的CREATE TABLE 语句：</p><blockquote><p>show CREATE TABLE tb_name;</p></blockquote><p>查看数据表里的数据列或索引信息：</p><blockquote><p>show COLUMNS FROM tb_name;<br>show INDEX from tb_name;</p></blockquote><p>查看默认数据库或某给定数据库里的数据表的描述性信息：</p><blockquote><p>show table status [from db_name];</p></blockquote><p>show 支持模糊查询和 where 查询并显示</p><blockquote><p>show columns from student LIKE ‘s%’;<br>查询学生表中s字符开头的数据列</p></blockquote><p>另外一种获取元数据的方法是访问 INFORMATION_SCHEMA 数据库。</p><blockquote><p>show tables in INFORMATION_SCHEMA;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| Tables_in_information_schema          |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| CHARACTER_SETS                        |</span><br><span class="line">| COLLATIONS                            |</span><br><span class="line">| COLLATION_CHARACTER_SET_APPLICABILITY |</span><br><span class="line">| COLUMNS                               |</span><br><span class="line">| COLUMN_PRIVILEGES                     |</span><br><span class="line">| ENGINES                               |</span><br><span class="line">| EVENTS                                |</span><br><span class="line">| FILES                                 |</span><br><span class="line">| GLOBAL_STATUS                         |</span><br><span class="line">| GLOBAL_VARIABLES                      |</span><br><span class="line">| KEY_COLUMN_USAGE                      |</span><br><span class="line">| ...                                   |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br></pre></td></tr></table></figure><p>INFORMATION_SCHEMA 数据库记录着 mysql 服务商所有数据库的相关信息。</p><p>在命令行中也可以使用 mysqlshow 命令符查看数据库的信息，用法基本与 show 一致。</p><blockquote><p>mysqlshow db_name tb_name;<br>mysqlshow —keys db_name tb_name;//查看索引信息</p></blockquote><h3 id="联结操作对数据库检索"><a href="#联结操作对数据库检索" class="headerlink" title="联结操作对数据库检索"></a>联结操作对数据库检索</h3><h4 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h4><p>基础操作</p><blockquote><p>select t1.<em>,t2.</em> from t1 INNER JOIN t2;</p></blockquote><p>作用是将两张表的数据列拼在一起并显示</p><p><strong>INNER JOIN,CROSS JOIN, JOIN</strong>作用类似，同时它们还支持另外几种用来表明如何对数据表中的数据列进行匹配的语法变体</p><ul><li>用一条 ON 子句代替 WHERE 子句<blockquote><p>select t1.<em>,t2.</em> from t1 INNER JOIN t2 ON t1.i1 = t2.i2;</p></blockquote></li><li>USING 子句，概念上类似于ON子句，但要求被联结的数据列必须是同名的<blockquote><p>select mytb1.<em>, mytb2.</em> from mytb1 INNER JOIN mytb2 USING (b);</p></blockquote></li></ul><p><strong>为了避免歧义，在联结操作时数据列最好携带数据表的名字，若是同一张数据表则使用 AS 进行别名</strong></p><blockquote><p>select mytb1.col1, m.col2 from mytb1 AS m where mytb1.col1 &gt; m.col1;</p></blockquote><h4 id="外联结-（左联结和右联结）"><a href="#外联结-（左联结和右联结）" class="headerlink" title="外联结 （左联结和右联结）"></a>外联结 （左联结和右联结）</h4><p><strong>LEFT JOIN</strong> 和 <strong>RIGHT JOIN</strong><br><code>LEFT JOIN</code> 的工作情况：用来联结的两张数据表，当来自左数据表的某个数据航与来自由数据表的某个数据行匹配时，那两个数据行内容就会被选取为一个输出数据行，与内联结一样；如果来自左数据表的某个数据行在右数据表找不到匹配，它也会被选取为一个输出行，此时与它联结的是一个来自右数据表的“假”数据行，这个“假”数据行的所有数据列都包含NULL值。<code>RIGHT JOIN</code> 同理。<br>简单来说，左联结时，左数据表的的数据全部输出，右数据表只输出匹配的数据，其他数据为 NULL 值； 右联结时，右数据表的的数据全部输出，左数据表只输出匹配的数据，其他数据为 NULL 值。</p><blockquote><p>select t1.<em>, t2.</em> from t1 LEFT JOIN t1 ON t1.i1 = t2.i2;<br>select t1.<em>, t1.</em> from t2 RIGHT JOIN t1 ON t1.i1 = t2.i1;<br>这两句输出相同</p></blockquote><h3 id="子查询进行多数据表检索"><a href="#子查询进行多数据表检索" class="headerlink" title="子查询进行多数据表检索"></a>子查询进行多数据表检索</h3><p>MySQL支持子查询，也就是把一条SELECT语句用括号括起来嵌入另一个SELECT语句。</p><blockquote><p>select * from score where event_id IN (select event_id from grade_event where category = ‘T’);<br>从 grade_event 数据表里找出对应于考试（‘T’）的event_id,再用它们选取考试的成绩。</p></blockquote><p>子查询可以返回不同类型的信息</p><ul><li>标量子查询将返回一个值，而比较操作符=、&lt;&gt;、&gt;、&gt;=、&lt;和&lt;=只能和标量子查询配合使用，若返回多个值将出错</li><li>可以用IN和NOT_IN操作符来测试某给定值是否包含在子查询的结果集里。主查询里的数据行与子查询所返回的任何一个数据匹配数据，IN 操作符的比较结果为true；反之，都不匹配的话NOT IN操作符的比较结果是true</li><li>可以用ALL、ANY、和 SOME 操作符把某给定值与子查询的结果集进行比较。其中 SOME 和 ANY 是同义词。 IN 等价于 = ANY ; NOT IN 等价于 &lt;&gt;ALL</li><li>EXISTS 和 NOT EXISTS 用于测试某个子查询是否返回了数据行。</li></ul><p>有相当一部分的子查询可以改写为联结查询。</p><blockquote><p>select <em> from table1 where column1 in (select column2a from table2 where column2b = value);<br>这种选取匹配值的子查询可以改写<br>select table1.</em> from table1 INNER JOIN table2 ON table1.column1 = table2.column2a where column2b = value;</p></blockquote><h3 id="UNION-语句进行多数据表检索"><a href="#UNION-语句进行多数据表检索" class="headerlink" title="UNION 语句进行多数据表检索"></a>UNION 语句进行多数据表检索</h3><blockquote><p>select i from t1 UNION select i from t2 UNION select i from t3;</p></blockquote><p>UNION 结果集里的数据列名字来自第一个 SELECT 语句里的数据列的名字。UNION中的第二个和再后面的 select 语句必须选取个数相同的数据列，但各有关数据列不必有同样的名字或数据类型。数据列是一一对应的，根据位置而不是根据名字进行匹配的。<br>在默认情况下，UNION 将从结果集里剔除重复的数据行，UNION DISTINCT = UNION;若不想剔除，则使用 UNION ALL。</p><p>若想对UNION语句输出的数据进行处理，如排序，限制个数等，需要在每个查询语句中加上括号。</p><blockquote><p>(select i, c from t1) UNION (select i,d from t3) order by c;</p></blockquote><h3 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h3><p>视图是一个虚拟的数据表，它们的行为与数据表一样但不包含任何数据。从实现效果来看，更像是数据库语句的快捷方式。<br>比如下面这个语句：</p><blockquote><p>select last_name, first_name, city, state from president;</p></blockquote><p>每次查询都要写出一大串数据列，这时候就可以使用视图来代替，可以实现同样的效果。</p><blockquote><p>CREATE VIEW vpres AS SELECT last_name, first_name, city, state FROM president;<br>SELECT * FROM vpres;</p></blockquote><p>在默认的情况下，视图里的数据列的名字与 select 语句离列出的输出数据列相同。如果你想明确地改用另外的数据列名字，需要在定义视图时再视图名字后面用括号列出新名字。</p><blockquote><p>CREATE VIEW vpres2 (ln, fn) AS SELECT last_name, first_name FROM president;<br>SELECT ln, fn FROM vpres2;</p></blockquote><p>视图内部可以加表达式，联结操作等，亦可以执行更新操作。</p><h3 id="涉及多个数据表的删除和更新操作"><a href="#涉及多个数据表的删除和更新操作" class="headerlink" title="涉及多个数据表的删除和更新操作"></a>涉及多个数据表的删除和更新操作</h3><p>select 语句同样在 delete 语句中可以使用。</p><blockquote><p>DELETE t1, t2 FROM t1 INNER JOIN t2 ON t1.id = t2.id;<br>此时表示两张表同时删除被检索到的数据。</p></blockquote><p>可以使用 USING 子句来联结各有关数据表以确定哪些数据行需要被删除。</p><blockquote><p>DELETE FROM t1, t2 USING t1 INNER JOIN t2 ON t1.id = t2.id;</p></blockquote><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><p>事务是作为一个不可分割的逻辑单元而被执行的一组SQL语句，如有必要，它们的执行效果可以被撤销。<br>事务以 START TRANSACTION 作为开始语句，以 COMMIT 提交结束。</p><blockquote><p>START TRANSACTION;<br>INSERT INTO t SET name = ‘cpacm’;<br>INSERT INTO t SET name = ‘Wallace’;<br>COMMIT;</p></blockquote><p>当事务过程中发生了一个错误时，可以用 ROLLBACK 语句把它删除。</p><blockquote><p>ERROR 1062 (23000):Duplicate entry ‘Wallcae’ for key 1<br>ROLLBACK;</p></blockquote><p>也可以设置自动提交模式，当自动提交模式设为0时，其后所有的任何语句都将成为当前事务的一部分直到你发出一条 COMMIT 或 ROLLBACK。</p><blockquote><p>SET autocommit = 0;<br>SET autocommit = 1;</p></blockquote><p>一些语句会隐形的提交事务，如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span></span><br><span class="line"><span class="keyword">DROP</span> ...</span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure></p><p>可以使用事务保存点对一个事务进行部分回滚。</p><blockquote><p>START TRANSACTION;<br>…<br>SAVEPOINT my_save;<br>…<br>ROLLBACK TO SAVEPOINT my_save;</p></blockquote><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>利用外键关系可以在某个数据表里声明与另一个数据表里的某个索引相关联的索引。</p><p>父表</p><blockquote><p>CREATE TABLE parent (par_id INT NOT NULL, PRIMARY KEY (par_id))</p></blockquote><p>子表</p><blockquote><p>CREATE TABLE child (<br>  par_id INT NOT NULL,<br>  child_id INT NOT NULL,<br>  PRIMARY KEY (par_id, child_id),<br>  FOREIGN KEY (par_id) REFERENCES parent (par_id)<br>      ON DELETE CASCADE<br>      ON UPDATE CASCADE<br>  )</p></blockquote><p>这个例子在定义外键时使用 ON DELETE CASCADE 子句，它指定当parent数据表里的某个数据行被删除时，MySQL将自动从child数据表里把有匹配par_id值的数据行也删掉。ON UPDATE CASCADE子句表明：如果parent数据表里的某个数据行的par_id值被改变了，MySQL将自动地把child数据表里的所有匹配的par_id值也改成新值。即级联操作。</p><h3 id="FULLTEXT索引"><a href="#FULLTEXT索引" class="headerlink" title="FULLTEXT索引"></a>FULLTEXT索引</h3><p>要想对某个数据表进行全文搜索，必须事先为它创建一个 FULLTEXT 索引。</p><ol><li>这种索引只能在MyISAM数据表里建造。FULLTEXT 索引只能由 CHAR、VARVHAR和TEXT这几种组成。</li><li>全文搜索将忽略常见的单词，常见表示“至少在一半的数据行中出现”。</li><li>忽略常见的休止单词，如<code>the</code>、<code>after</code>和<code>other</code>等</li><li>少于设置的长度也会被忽略。</li></ol><blockquote><p>ALTER TABLE apothegm<br>  ADD FULLTEXT (phrase),<br>  ADD FULLTEXT (attrbution),<br>  ADD FULLTEXT (phrase, attribution);</p></blockquote><h4 id="自然搜索"><a href="#自然搜索" class="headerlink" title="自然搜索"></a>自然搜索</h4><p>把搜索字符串解释为一系列单词并查找包含这些单词的数据行。</p><blockquote><p>SELECT * FROM apothegm WHERE MATCH(phrase) AGAINST(‘hardsoft’ IN NATURAL LANGUAGE MODE);</p></blockquote><p>match 里面是将要被搜索的数据列，against里面是要搜索的关键字，数据库默认模式为自然搜索，所以 IN NATURAL LANGUAGE MODE 可以省略不写。</p><h4 id="布尔模式-IN-BOOLEAN-MODE"><a href="#布尔模式-IN-BOOLEAN-MODE" class="headerlink" title="布尔模式 (IN BOOLEAN MODE)"></a>布尔模式 (IN BOOLEAN MODE)</h4><p>把搜索字符串解释为一系列单词，但允许使用一些操作符来‘修饰’这些单词一表明特定的要求，如某给定单词必须出现（或不出现）在匹配数据行里，某个数据行必须包含一个精确的短语。</p><h4 id="查询扩展模式-（WITH-QUERY-EXPANSION）"><a href="#查询扩展模式-（WITH-QUERY-EXPANSION）" class="headerlink" title="查询扩展模式 （WITH QUERY EXPANSION）"></a>查询扩展模式 （WITH QUERY EXPANSION）</h4><p>进行两边搜索，第一遍自然语言搜索，然后将第一遍的结果加上原来的搜索单词进行第二次搜索。</p><h4 id="全文搜索配置"><a href="#全文搜索配置" class="headerlink" title="全文搜索配置"></a>全文搜索配置</h4><ol><li>修改最少单词长度设置： ft_min_word_len 设置为3</li><li>修复现有FULLTEXT索引的现有数据表： REPAIR TABLE tb1_name QUICK;</li></ol><p>查询在概念上是集合操作，在实际设备上操作时查询是要占用时间的，有时候长得让人无法忍受，所以我们要寻找能够加快查询的方法。</p><h2 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h2><p>通常能造成查询速度最大差异的是索引的正确使用。所以优先使用索引来最大程度地改进性能，然后再看是否还有其他技术可以采用。</p><h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><p>一个没有索引的数据表就是一个无序的数据行集合，如果想要找某一行数据就必须要检查数据表的每一个数据行。而添加索引之后，就不用再一行一行地搜索整个数据表来寻找匹配项，可以直接通过扫描索引来查找。而且索引值是经过分类的，比如说当我们读取到14的值时就知道不会有与13相匹配的内容。由此可知，索引可以提高搜索效率的一个原因就是我们知道匹配数据行在什么位置结束，从而跳过其余部分，另外一个原因则是定位算法的使用，它可以不用从索引开始位置经过线性扫描就能直接找到第一个匹配项。</p><p>MySQL 使用索引的几种方式：</p><ol><li>一是在查询操作中把与 WHERE 子句所给出的条件相匹配的数据行尽快找出来；二是在关联操作中把与其他数据表里的数据行相匹配的数据行尽快找出来。</li><li>对于使用<code>MIN()</code>和<code>MAX()</code>函数的查询，如果数据列带索引，那么它的最小值和最大值能够被迅速找到而不是通过逐行检查的方法来查找。</li><li>MySQL经常使用索引来迅速地完成 ORDER BY 子句和 GROUP BY 子句的分类和分组操作。</li><li>可以使用索引来避免为一个查询整体读取数据行。</li></ol><h3 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h3><p>索引加快了检索速度，但却降低了在带索引的数据列里插入、删除以及修改数值的速度。因为在写入一条数据行时还要求所有所以都要做出改变。其次，索引要占据磁盘空间，索引越多空间占用越大。所以如果不需要某个特定的索引来加快查询速度就不要创建它。</p><h3 id="如何挑选索引"><a href="#如何挑选索引" class="headerlink" title="如何挑选索引"></a>如何挑选索引</h3><ol><li>尽量为用来搜索、分类或分组的数据列编制索引。</li><li>综合考虑各数据列的维度势。即索引里面独一无二的值越多，使用的效果就越好。</li><li>对短小的值进行索引。比较“小”的数据类型。</li><li>为字符串值的前缀编索引。</li><li>充分利用最左边的前缀。</li><li>适可而止，不要建立过多的索引。</li><li><p>让索引的类型与你打算进行的比较操作的类型保持匹配。散列索引或者B树。散列索引精确比较操作速度快，但用来查找一个范围的比较操作里表现不佳；B树则在两方面表现都可以。<br>创建一个B树索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> lookup</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>  <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span>    <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> <span class="keyword">USING</span> BTREE (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">MEMORY</span>;</span><br></pre></td></tr></table></figure></li><li><p>利用“慢查询”日志找出性能低劣的查询。</p></li></ol><h2 id="MySQL的查询优化程序"><a href="#MySQL的查询优化程序" class="headerlink" title="MySQL的查询优化程序"></a>MySQL的查询优化程序</h2><p>数据库自带查询优化程序，可以使用 <code>EXPLAIN</code> 查看一个查询语句的详细信息。</p><blockquote><p>EXPLAIN SELECT * FROM tb1_name WHERE FALSE\G</p></blockquote><h2 id="挑选数据类型"><a href="#挑选数据类型" class="headerlink" title="挑选数据类型"></a>挑选数据类型</h2><ol><li>尽量使用数值操作，少使用字符串操作。</li><li>如果“小”类型够用就不要选用“大”类型。</li><li>选择最适用于你的存储引擎的格式。</li><li>尽量把数据列声明为 NOT NULL。</li><li>考虑使用 ENUM 类型</li><li><p>利用 PROCEDURE ANALYSE()来分析数据表</p><blockquote><p>SELECT * FROM tb1_name PROCEDURE ANALYSE();</p></blockquote></li><li><p>对容易产生碎片的数据表进行整理。定期使用 OPTIMIZE TABLE 语句有助于防止数据表查询性能的降低。</p></li><li>把数据压缩到 BLOB 或 TEXT 数据列里。</li><li>使用人造索引。</li><li>尽量避免对很大的 BLOB 或 TEXT 进行检索。</li><li>把 BLOB 或 TEXT 数据列剥离到单独一个数据表里。</li></ol><h2 id="有效加载数据"><a href="#有效加载数据" class="headerlink" title="有效加载数据"></a>有效加载数据</h2><ol><li>批量加载的效率比单数据行加载的效率高；</li><li>加载有索引的数据表比加载无索引的数据表快一些；</li><li>较短的 SQL 语句的数据加载快。</li></ol><h2 id="调度和锁定问题"><a href="#调度和锁定问题" class="headerlink" title="调度和锁定问题"></a>调度和锁定问题</h2><p>MySQL 的默认调度策略：</p><ol><li>写入比读取有着更高的优先权。</li><li>对数据表的写操作必须按照“写”请求先来后到的顺序一个接一个地进行。</li><li>对同一个数据表进行的读操作可以同时进行。</li></ol><h2 id="系统管理员所完成的优化"><a href="#系统管理员所完成的优化" class="headerlink" title="系统管理员所完成的优化"></a>系统管理员所完成的优化</h2><ol><li>在内存中访问数据比从磁盘上访问数据块。</li><li>在内存中尽可能长地保存数据可以减少磁盘活动量。</li><li>保留索引的信息要比保留数据行的内容更加重要。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十三）—— 正确的启动页设置姿势</title>
      <link href="/2017/01/19/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Android%20%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B5/"/>
      <url>/2017/01/19/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Android%20%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>启动页是一个 APP  启动时用户第一眼看到的界面，通常我们是将产品的logo或者名称放在上面，以便加深用户的产品印象。一个好的产品体验从你点开 APP 图标就开始了，通常我们为了防止启动应用时出现卡顿，需要对启动页进行一些优化。<br><a id="more"></a></p><h2 id="普通的-SplashActivity"><a href="#普通的-SplashActivity" class="headerlink" title="普通的 SplashActivity"></a>普通的 SplashActivity</h2><p>通常情况下，我们只需要设置 <code>SplashActivity</code> 为启动页并将其全屏，之后在 <code>SpalshActivity</code> 中贴上背景图就行了。这也是大家经常使用的方法。</p><p>首先在 <code>style.xml</code> 文件中创建全屏的主题属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Full"</span> <span class="attr">parent</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在 <code>AndroidManifest.xml</code> 中使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SplashActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.Full"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后就可以在 <code>SplashActivity</code> 设置产品的logo图片以及其他要展现的说明。</p><h2 id="启动时黑屏（或者白屏）了怎么办？"><a href="#启动时黑屏（或者白屏）了怎么办？" class="headerlink" title="启动时黑屏（或者白屏）了怎么办？"></a>启动时黑屏（或者白屏）了怎么办？</h2><p>为什么会黑屏或者白屏呢？因为从用户点击 APP 图标进去到第一个 Activity，系统会经过一系列的 FrameWork 层操作，其中包括 Application 的初始化，如果在 Application 初始化过程中做了过多操作，就会导致应用已经启动了却迟迟没有界面显示出来。</p><p>一种优化方案是将黑屏或者白屏透明化，也就是说当你打开应用时你会在桌面上停留一会（恩，看起来就像系统卡主了一样），当应用准备好之后自然就会跳到第一个启动 Activity。</p><p>实现透明化也很简单，我们再新建一个主题样式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Splash"</span> <span class="attr">parent</span>=<span class="string">"AppTheme.Full"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackgroundCacheHint"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中 <strong>android:windowIsTranslucent</strong> 为关键，将其设置为 true。</p><p>在代码里为先前的 <code>SplashActivity</code> 的 theme 设置为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:theme="@style/AppTheme.Splash"</span><br></pre></td></tr></table></figure></p><p>另一种方案是用一张图片替换原来的默认的黑色背景（或白色），将上面的 <code>Splash</code> 样式修改一下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Splash"</span> <span class="attr">parent</span>=<span class="string">"AppTheme.Full"</span>&gt;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/splash_bg<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>注意，如果图片的尺寸没有适配机型的话图片会被拉伸。</em></p><p>这样子做的优点是可以完全用 <code>windowBackground</code> 来替换 <code>SplashActivity</code>，但缺点也很明显，这样做很死板，无法自定义启动页，比如说给其加一个动画效果什么的都不能实现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种方案：</p><h3 id="使用普通的-SplashActivity"><a href="#使用普通的-SplashActivity" class="headerlink" title="使用普通的 SplashActivity"></a>使用普通的 <code>SplashActivity</code></h3><p>作为启动页，你可以拥有一个自由的页面，可以在上面肆意妄为，但记住不要在 Application 创建时做太多工作，以免拖慢启动速度。</p><ul><li>尽量不将一些业务逻辑放于 Application 中；</li><li>不以静态变量的方式在 Application 中保存应用数据；</li><li>不要把文件、数据库的操作放在 Application 中。  </li></ul><h3 id="使用-windowBackground-代替-SplashActivity"><a href="#使用-windowBackground-代替-SplashActivity" class="headerlink" title="使用 windowBackground 代替 SplashActivity"></a>使用 <code>windowBackground</code> 代替 <code>SplashActivity</code></h3><p>你可以完全不用操心启动页如何实现了，只要做好背景图片对不同分辨率机型的适配就行了。你可以在 Application 加上一些必需的初始化，再也不怕 Application 过长的初始化时间拖慢应用的启动时间了。</p><p>不同的需求选择不同的方案，当然也有人说我两种都用可以吗？当然可以！嘛，你开心就好。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Centos下部署python环境</title>
      <link href="/2016/12/22/%E5%9C%A8Centos%E4%B8%8B%E9%83%A8%E7%BD%B2python%E7%8E%AF%E5%A2%83/"/>
      <url>/2016/12/22/%E5%9C%A8Centos%E4%B8%8B%E9%83%A8%E7%BD%B2python%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="1、下载并安装git"><a href="#1、下载并安装git" class="headerlink" title="1、下载并安装git"></a>1、下载并安装git</h3><p><a href="http://git-scm.com/download" target="_blank" rel="noopener">http://git-scm.com/download</a> 或者直接使用命令下载  </p><blockquote><p>$ yum install git</p></blockquote><a id="more"></a><ol><li>生成ssh-key<br>进入 ~/.ssh文件夹  <blockquote><p>ssh-keygen -t rsa -C “348515494@qq.com”  即可生成</p></blockquote></li></ol><h3 id="2、安装ruby"><a href="#2、安装ruby" class="headerlink" title="2、安装ruby"></a>2、安装ruby</h3><blockquote><p>yum install ruby<br>yum install ruby-irb</p></blockquote><h3 id="3、安装mysql"><a href="#3、安装mysql" class="headerlink" title="3、安装mysql"></a>3、安装mysql</h3><blockquote><p>yum install mysql-server mysql-devel mysql</p></blockquote><p>执行下面的命令启动mysql： </p><blockquote><p>service mysqld start</p></blockquote><p>进入mysql</p><blockquote><p>mysql -u root </p></blockquote><p>改变当前数据库为mysql：</p><blockquote><p>use mysql</p></blockquote><p>设置从本地主机登录的root帐号密码：</p><blockquote><p>update user set password=’your password’ where user=’root’ and host=’localhost’;</p></blockquote><p>删除匿名帐号： </p><blockquote><p>delete from user where user=’’ ;</p></blockquote><p>删除密码为空的帐号：</p><blockquote><p>delete from user where password=’’;</p></blockquote><p>删除允许非localhost主机登录的帐号：</p><blockquote><p>delete from user where host&lt;&gt;’localhost’;</p></blockquote><p>执行下面的命令使更改生效：</p><blockquote><p>flush privileges ; </p></blockquote><p>执行下面的命令退出mysql命令行：</p><blockquote><p>quit或/q</p></blockquote><h3 id="4、安装wget"><a href="#4、安装wget" class="headerlink" title="4、安装wget"></a>4、安装wget</h3><blockquote><p>yum install wget</p></blockquote><h3 id="5、安装Redis"><a href="#5、安装Redis" class="headerlink" title="5、安装Redis"></a>5、安装Redis</h3><p><a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a></p><blockquote><p>$ wget <a href="http://download.redis.io/releases/redis-3.0.4.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-3.0.4.tar.gz</a><br>$ tar xzf redis-3.0.4.tar.gz<br>$ cd redis-3.0.4<br>$ make  </p></blockquote><p>启动redis</p><blockquote><p>$ src/redis-server</p></blockquote><p>ctrl+c退出redis系统。</p><h3 id="6、（windows）xftp5"><a href="#6、（windows）xftp5" class="headerlink" title="6、（windows）xftp5"></a>6、（windows）xftp5</h3><p>注册码：101210-450789-147200<br>Xftp5.exeputty.exe<br>连接： ip地址 + 21 端口<br>选择 sftp连接<br>方法： Password  </p><h3 id="7、nginx"><a href="#7、nginx" class="headerlink" title="7、nginx"></a>7、nginx</h3><p>安装：<a href="http://www.cnblogs.com/jtlgb/p/5809808.html" target="_blank" rel="noopener">http://www.cnblogs.com/jtlgb/p/5809808.html</a></p><ol><li>要有gcc的环境<blockquote><h1 id="yum-install-gcc"><a href="#yum-install-gcc" class="headerlink" title="yum install gcc"></a>yum install gcc</h1></blockquote></li><li><p>安装PCRE,zlib,openssl环境</p><blockquote><h1 id="yum-install-y-pcre-pcre-devel"><a href="#yum-install-y-pcre-pcre-devel" class="headerlink" title="yum install -y pcre pcre-devel"></a>yum install -y pcre pcre-devel</h1><h1 id="yum-install-y-zlib-zlib-devel"><a href="#yum-install-y-zlib-zlib-devel" class="headerlink" title="yum install -y zlib zlib-devel"></a>yum install -y zlib zlib-devel</h1><h1 id="yum-install-y-openssl-openssl-devel"><a href="#yum-install-y-openssl-openssl-devel" class="headerlink" title="yum install -y openssl openssl-devel"></a>yum install -y openssl openssl-devel</h1></blockquote></li><li><p>准备 nginx安装包 下载地址：<br><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p></li><li>利用xftp将文件传入服务器，并进入nginx当前目录</li><li><p>进入目录-&gt;下载（如已经通过ftp传输略过）-&gt;解压-&gt;进入源文件目录-&gt;编译，安装</p><blockquote><h1 id="mkdir-nginx-src-amp-amp-cd-nginx-src"><a href="#mkdir-nginx-src-amp-amp-cd-nginx-src" class="headerlink" title="mkdir nginx-src &amp;&amp; cd nginx-src"></a>mkdir nginx-src &amp;&amp; cd nginx-src</h1><h1 id="wget-http-nginx-org-download-nginx-1-7-3-tar-gz"><a href="#wget-http-nginx-org-download-nginx-1-7-3-tar-gz" class="headerlink" title="wget http://nginx.org/download/nginx-1.7.3.tar.gz"></a>wget <a href="http://nginx.org/download/nginx-1.7.3.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.7.3.tar.gz</a></h1><h1 id="tar-xzf-nginx-1-7-3-tar-gz"><a href="#tar-xzf-nginx-1-7-3-tar-gz" class="headerlink" title="tar xzf nginx-1.7.3.tar.gz"></a>tar xzf nginx-1.7.3.tar.gz</h1><h1 id="cd-nginx-1-7-3"><a href="#cd-nginx-1-7-3" class="headerlink" title="cd nginx-1.7.3"></a>cd nginx-1.7.3</h1><h1 id="configure"><a href="#configure" class="headerlink" title="./configure"></a>./configure</h1><h1 id="make"><a href="#make" class="headerlink" title="make"></a>make</h1><h1 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h1><h1 id="whereis-nginx"><a href="#whereis-nginx" class="headerlink" title="whereis nginx"></a>whereis nginx</h1><p>nginx: /usr/local/nginx  </p></blockquote></li><li><p>默认的安装路径为：/usr/local/nginx；<br>跳转到其目录下sbin路径下，便可以启动或停止它了。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">启动：nginx</span><br><span class="line">停止：nginx -s stop</span><br><span class="line"># ./nginx -h</span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">11</span>.<span class="number">7</span></span><br><span class="line"><span class="function">Usage: <span class="title">nginx</span> [-?<span class="title">hvVtTq</span>] [-<span class="title">s</span> <span class="title">signal</span>] [-<span class="title">c</span> <span class="title">filename</span>] [-<span class="title">p</span> <span class="title">prefix</span>] [-<span class="title">g</span> <span class="title">directives</span>]</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Options</span>:</span></span><br><span class="line"><span class="function">          -?,-<span class="title">h</span>         : <span class="title">this</span> <span class="title">help</span></span></span><br><span class="line"><span class="function">          -<span class="title">v</span>            : <span class="title">show</span> <span class="title">version</span> <span class="title">and</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function">          -<span class="title">V</span>            : <span class="title">show</span> <span class="title">version</span> <span class="title">and</span> <span class="title">configure</span> <span class="title">options</span> <span class="title">then</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function">          -<span class="title">t</span>            : <span class="title">test</span> <span class="title">configuration</span> <span class="title">and</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function">          -<span class="title">T</span>            : <span class="title">test</span> <span class="title">configuration</span>, <span class="title">dump</span> <span class="title">it</span> <span class="title">and</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function">          -<span class="title">q</span>            : <span class="title">suppress</span> <span class="title">non</span>-<span class="title">error</span> <span class="title">messages</span> <span class="title">during</span> <span class="title">configuration</span> <span class="title">testing</span></span></span><br><span class="line"><span class="function">          -<span class="title">s</span> <span class="title">signal</span>     : <span class="title">send</span> <span class="title">signal</span> <span class="title">to</span> <span class="title">a</span> <span class="title">master</span> <span class="title">process</span>: <span class="title">stop</span>, <span class="title">quit</span>, <span class="title">reopen</span>, <span class="title">reload</span></span></span><br><span class="line"><span class="function">          -<span class="title">p</span> <span class="title">prefix</span>     : <span class="title">set</span> <span class="title">prefix</span> <span class="title">path</span> (<span class="title">default</span>: /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/)</span></span><br><span class="line"><span class="function">          -<span class="title">c</span> <span class="title">filename</span>   : <span class="title">set</span> <span class="title">configuration</span> <span class="title">file</span> (<span class="title">default</span>: <span class="title">conf</span>/<span class="title">nginx.conf</span>)</span></span><br><span class="line"><span class="function">          -<span class="title">g</span> <span class="title">directives</span> : <span class="title">set</span> <span class="title">global</span> <span class="title">directives</span> <span class="title">out</span> <span class="title">of</span> <span class="title">configuration</span> <span class="title">file</span></span></span><br></pre></td></tr></table></figure></li><li><p>启动 nginx</p><blockquote><h1 id="service-nginx-start"><a href="#service-nginx-start" class="headerlink" title="service nginx start"></a>service nginx start</h1><p>(题外话 如何重启nginx 需要先kill了进程 ps -ef|grep nginx ps kill -9 进程号)<br>(题外话 查看端口被占用 lsof -i tcp:80)</p></blockquote></li></ol><h3 id="8、python-安装"><a href="#8、python-安装" class="headerlink" title="8、python 安装"></a>8、python 安装</h3><ol><li>访问 <a href="https://www.python.org/ftp/python" target="_blank" rel="noopener">https://www.python.org/ftp/python</a> ，下载python安装文件</li><li><p>解压，编译，安装 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar Jxvf Python-<span class="number">3</span>.<span class="number">5</span>.<span class="number">0</span>.tar.xz </span><br><span class="line"><span class="built_in">cd</span> Python-<span class="number">3</span>.<span class="number">5</span>.<span class="number">0</span> ./configure --prefix=/usr/local/python3 //安装地址 </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm /usr/bin/python</span><br><span class="line">ln -sv /usr/local/python3/bin/python3.<span class="number">5</span> /usr/bin/python</span><br></pre></td></tr></table></figure></li></ol><p>这样做的目的是在系统任意目录敲入python调用的是python3的命令，而非系统默认2.6.6的 但是这样同时这会导致依赖python2.6的yum不能使用，因此还要修改yum配置。</p><ol><li>更新yum配置<blockquote><p>vim /usr/bin/yum </p></blockquote></li></ol><p>通过vim修改yum的配置 </p><h1 id="usr-bin-python改为-usr-bin-python2-6"><a href="#usr-bin-python改为-usr-bin-python2-6" class="headerlink" title="!/usr/bin/python改为#!/usr/bin/python2.6"></a>!/usr/bin/python改为#!/usr/bin/python2.6</h1><p>保存退出。 完成了python3的安装。</p><ol><li>pip更新<blockquote><p>pip install —upgrade pip</p></blockquote></li></ol><h3 id="9、virtualenv"><a href="#9、virtualenv" class="headerlink" title="9、virtualenv"></a>9、virtualenv</h3><p>安装</p><blockquote><p>pip3 install virtualenv</p></blockquote><p>配置环境变量 </p><blockquote><p>export PATH=$PATH:/usr/local/python3/bin</p></blockquote><p>创建虚拟python环境</p><blockquote><p>virtualenv acgn_env</p></blockquote><p>启动虚拟环境</p><blockquote><p>source acgn_env/bin/activate</p></blockquote><p>虚拟环境下用deactivate退出</p><blockquote><p>deactivate</p></blockquote><h3 id="10、uwsgi安装-虚拟环境下"><a href="#10、uwsgi安装-虚拟环境下" class="headerlink" title="10、uwsgi安装(虚拟环境下)"></a>10、uwsgi安装(虚拟环境下)</h3><blockquote><p>pip install uwsgi #使用pip安装uwsgi</p><p>./uwsgi —version #检是否安装成功</p></blockquote><p>安装完毕后，利用配置文件配置uwsgi<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"># uwsgi 启动时所使用的地址与端口</span><br><span class="line">socket = 127.0.0.1:8001 </span><br><span class="line"># 指向网站目录</span><br><span class="line">chdir = /acgn/acgn/ </span><br><span class="line"># python 启动程序文件</span><br><span class="line">wsgi-file = manage.py </span><br><span class="line"># python 程序内用以启动的 application 变量名</span><br><span class="line">callable = app </span><br><span class="line"># 处理器数</span><br><span class="line">processes = 4</span><br><span class="line"># 线程数</span><br><span class="line">threads = 2</span><br><span class="line">#状态检测地址</span><br><span class="line">stats = 127.0.0.1:9191</span><br><span class="line"></span><br><span class="line">daemonize = /acgn/logs/acgn.log</span><br><span class="line"></span><br><span class="line">#用于重启进程</span><br><span class="line">pidfile = /tmp/uwsgi.pid</span><br><span class="line"></span><br><span class="line">vacuum = true</span><br><span class="line"></span><br><span class="line">log-maxsize = 50000000</span><br><span class="line"></span><br><span class="line">disable-logging = true</span><br></pre></td></tr></table></figure></p><blockquote><p>$ uwsgi uwsgi_config.ini</p></blockquote><p>最后uwsgi读取配置并成功启动</p><p>ctrl+c 退出</p><h3 id="11、nginx-uwsgi"><a href="#11、nginx-uwsgi" class="headerlink" title="11、nginx + uwsgi"></a>11、nginx + uwsgi</h3><p>编辑nginx的配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    include      uwsgi_params;</span><br><span class="line">    uwsgi_pass   127.0.0.1:8001;  # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理</span><br><span class="line">    uwsgi_param UWSGI_PYHOME /acgn/acgn_env; # 指向虚拟环境目录</span><br><span class="line">    uwsgi_param UWSGI_CHDIR  /acgn/acgn; # 指向网站根目录</span><br><span class="line">    uwsgi_param UWSGI_SCRIPT manage:app; # 指定启动程序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动nginx</p><blockquote><p>service nginx start</p></blockquote><p>启动uwsgi</p><blockquote><p>uwsgi uwsgi_config.ini</p></blockquote><p>重启uwsgi</p><blockquote><p>kill -HUP /tmp/uwsgi.pid</p></blockquote><p>至此，python部署完成。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想阅读笔记</title>
      <link href="/2016/11/29/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/11/29/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章（对象导论）"><a href="#第一章（对象导论）" class="headerlink" title="第一章（对象导论）"></a>第一章（对象导论）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello every one,I'm cpacm"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一章是java的整体介绍，让我们先熟悉了java是什么。其具体的内容都会在后面介绍。</p><h3 id="面向基本语言的五大特性"><a href="#面向基本语言的五大特性" class="headerlink" title="面向基本语言的五大特性"></a>面向基本语言的五大特性</h3><ul><li>万物皆为对象。</li><li>程序是对象的集合，它们通过发送消息来告知彼此所要做的。</li><li>每个对象都拥有其类型。</li><li>某一特定类型的所有对象都可以接收同样的消息。</li></ul><h2 id="第二章（一切都是对象）"><a href="#第二章（一切都是对象）" class="headerlink" title="第二章（一切都是对象）"></a>第二章（一切都是对象）</h2><h3 id="一、存储"><a href="#一、存储" class="headerlink" title="一、存储"></a>一、存储</h3><p>栈（堆栈）：存放基本类型变量和对象引用变量。位于RAM区<br>堆：存放new得到的对象和数组。也位于RAM区<br>常量存储：存放常量，包括静态变量。</p><h3 id="二、基本类型"><a href="#二、基本类型" class="headerlink" title="二、基本类型"></a>二、基本类型</h3><p>基本数据类型在没有初始化的时候会获得一个默认值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">基本数据类型</th><th style="text-align:center">默认值</th><th style="text-align:center">大小</th></tr></thead><tbody><tr><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center">未确定</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">null</td><td style="text-align:center">16bits</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">0</td><td style="text-align:center">8bits</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">0</td><td style="text-align:center">16bits</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">0</td><td style="text-align:center">32bits</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">0f</td><td style="text-align:center">32bits</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">0L</td><td style="text-align:center">64bits</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">0d</td><td style="text-align:center">64bits</td></tr></tbody></table></div><p><em>tip1:String不是基本数据类型</em><br><em>tip2:上面的初始默认值并不适用于方法内部变量。其默认初始化值未知。当使用未初始化的变量编译器会返回错误</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseType</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> b;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span> bt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">short</span> s;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> f;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> l;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"类变量——"</span>+<span class="string">"boolean:"</span>+b+<span class="string">" char:"</span>+c+<span class="string">" byte:"</span>+bt+<span class="string">" short:"</span>+s+<span class="string">" int:"</span>+i+<span class="string">" float:"</span>+f+<span class="string">" long:"</span>+l+<span class="string">" double:"</span>+d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类变量——boolean:false char:  byte:0 short:0 int:0 float:0.0 long:0 double:0.0</span></span><br></pre></td></tr></table></figure></p><h2 id="第三章（操作符）"><a href="#第三章（操作符）" class="headerlink" title="第三章（操作符）"></a>第三章（操作符）</h2><h3 id="一、别名现象"><a href="#一、别名现象" class="headerlink" title="一、别名现象"></a>一、别名现象</h3><p>当两个变量包含的是同一个引用时，修改其中一个变量的值另一个变量的值也同时改变。记住new出来的对象的=赋值都是只传递引用。<br><em>Tip:减少为对象赋值。</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Assigment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t1 = <span class="keyword">new</span> T();</span><br><span class="line">T t2 = <span class="keyword">new</span> T();</span><br><span class="line">t1.i = <span class="number">5</span>;</span><br><span class="line">t2.i = <span class="number">8</span>;</span><br><span class="line">t1 = t2;</span><br><span class="line">t1.i = <span class="number">10000</span>;</span><br><span class="line">System.out.println(t2.i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10000</span></span><br></pre></td></tr></table></figure></p><h3 id="二、equals方法"><a href="#二、equals方法" class="headerlink" title="二、equals方法"></a>二、equals方法</h3><p>在自定义的对象中使用equals方法时需要覆盖此方法，否则默认是<em>比较引用</em>。</p><h3 id="三、短路"><a href="#三、短路" class="headerlink" title="三、短路"></a>三、短路</h3><p>其现象本质为：当已经确定一个逻辑表达式的结果时不会再计算剩余的部分。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortCircuit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">boolean</span> flag1 = test1()&amp;&amp;test2()||test3()&amp;&amp;test4();</span><br><span class="line">System.out.println(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">boolean</span> flag2 = test1()&amp;&amp;test3()||test2()&amp;&amp;test4();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"test1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"test2"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"test3"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"test4"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">test1</span></span><br><span class="line"><span class="comment">test2</span></span><br><span class="line"><span class="comment">test3</span></span><br><span class="line"><span class="comment">test4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">test1</span></span><br><span class="line"><span class="comment">test3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>boolean flag2 = test1()&amp;&amp;test3()||test2()&amp;&amp;test4();<br>若test1为true,test3为true时，因为前面这部分已经确定为true,所以后面部分不会被调用。</p><h3 id="四、e"><a href="#四、e" class="headerlink" title="四、e"></a>四、e</h3><p>科学与工程领域中，”e”代表自然对数的基数，为2.718。<br>而在C,C++和java（或者更多的语言）中，”e”代表“10的幂次”<br>$1.39e-43f  =  1.39*10^{-43}$</p><h3 id="五、位操作"><a href="#五、位操作" class="headerlink" title="五、位操作"></a>五、位操作</h3><p>与，或，异或，非 <code>&amp;,|,^,~</code><br>与：所有的位都为1则输出1，否则输出0；<br>或：只要有一个位是1就输出1；<br>异或：两个位值相等时输出1；<br>非：1输出0,0输出1.<br><em>位运算不会出现短路现象。</em><br>移位操作符：<br>$&lt;&lt;$:操作数向左移动，低位补0；<br>$&gt;&gt;$:操作数向右移动，(1)符号为正时，高位补0，(2)符号为负时，高位补1；<br>$&gt;&gt;&gt;$:java独有操作符，操作数向右移动，高位统一补0。<br>char，byte，short进行移位操作时先会转成int类型，即32位<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URShift</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1024</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i));</span><br><span class="line">i &gt;&gt;= <span class="number">10</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i));</span><br><span class="line">i = -<span class="number">1</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i));</span><br><span class="line">i &gt;&gt;&gt;= <span class="number">10</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i));</span><br><span class="line">i &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i));</span><br><span class="line"><span class="keyword">short</span> s = -<span class="number">1</span>;</span><br><span class="line">s &gt;&gt;&gt;= <span class="number">10</span>;<span class="comment">//s移位后得到的结果在赋值时会强行转为int,所以移位后的s已经是int型</span></span><br><span class="line">System.out.println(Integer.toBinaryString(s));</span><br><span class="line">s = -<span class="number">1</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(s&gt;&gt;&gt;<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10000000000</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">11111111111111111111111111111111</span></span><br><span class="line"><span class="comment">1111111111111111111111</span></span><br><span class="line"><span class="comment">11111111111111111111110</span></span><br><span class="line"><span class="comment">11111111111111111111111111111111</span></span><br><span class="line"><span class="comment">1111111111111111111111</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="六、截尾"><a href="#六、截尾" class="headerlink" title="六、截尾"></a>六、截尾</h3><p>将float或double转型为整数值时，总是对数字进行截尾，不会进行四舍五入。如果想要得到舍入的结果可以使用Math.round()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CastingNumbers</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.7</span>d;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)d;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i = (<span class="keyword">int</span>) Math.round(d);</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><h2 id="第四章（控制执行流程）"><a href="#第四章（控制执行流程）" class="headerlink" title="第四章（控制执行流程）"></a>第四章（控制执行流程）</h2><h3 id="一、goto-标签"><a href="#一、goto-标签" class="headerlink" title="一、goto 标签"></a>一、<del>goto</del> 标签</h3><p>goto关键词，在java中则是使用标签代替臭名昭著的goto。其实在java中也是最好不要用标签来跳转语句，太伤智商。。</p><p><em>写法</em><br>outer:<br>并放在迭代语句前。<br>（1）continue 标签<br>跳出所有循环，并到标签位置的语句，但会重新进入紧接后面的循环里。<br>（2）break 标签<br>跳出所有循环，且不再进入紧接后面的循环里。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LabeledFor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"测试continue————————————"</span>);</span><br><span class="line">label:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">"外部for循环"</span>+i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span> label;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"内部循环"</span>+j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"测试break————————————————"</span>);</span><br><span class="line">    label2:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">3</span>;m++)&#123;</span><br><span class="line">System.out.println(<span class="string">"外部for循环"</span>+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">3</span>;n++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">break</span> label2;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"内部循环"</span>+n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 测试continue————————————</span></span><br><span class="line"><span class="comment">外部for循环0</span></span><br><span class="line"><span class="comment">内部循环0</span></span><br><span class="line"><span class="comment">外部for循环1</span></span><br><span class="line"><span class="comment">内部循环0</span></span><br><span class="line"><span class="comment">外部for循环2</span></span><br><span class="line"><span class="comment">内部循环0</span></span><br><span class="line"><span class="comment">测试break————————————————</span></span><br><span class="line"><span class="comment">外部for循环0</span></span><br><span class="line"><span class="comment">内部循环0*/</span></span><br></pre></td></tr></table></figure></p><h2 id="第五章（初始化与清理）"><a href="#第五章（初始化与清理）" class="headerlink" title="第五章（初始化与清理）"></a>第五章（初始化与清理）</h2><h3 id="一、重载"><a href="#一、重载" class="headerlink" title="一、重载"></a>一、重载</h3><p>重载主要以传入参数及顺序来区别。不能通过返回值来区别<br>以基本数据类型传入时:自动包装机制<br>（1）若传入的数据类型小于方法中声明的形式参数类型，实际数据类型就会提升。<br>byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double<br>（2）如果传入的实际参数较大，就得通过类型转换执行窄化转换。</p><h3 id="二、垃圾回收机制"><a href="#二、垃圾回收机制" class="headerlink" title="二、垃圾回收机制"></a>二、垃圾回收机制</h3><p><em>标记-清扫（Android中使用这个技术）</em><br>从堆栈和存储区出发，遍历所有的引用，进而找出所有存活的对象，并给与标记。遍历完成后，清理所有未被标记的对象。<br><em>停止-复制</em><br>先暂停程序的运行，然后将所有存活的对象复制到另一个堆，而没有复制的是可回收的内存。</p><h3 id="三、初始化顺序"><a href="#三、初始化顺序" class="headerlink" title="三、初始化顺序"></a>三、初始化顺序</h3><p>所有的变量都会在任何方法（包括构造器）被调用之前得到初始化。<br>无论创建多少对象，静态数据都只占用一份存储区域，static不能作用于局部变量。且静态初始化动作只执行一次。</p><h3 id="四、可变参数列表。"><a href="#四、可变参数列表。" class="headerlink" title="四、可变参数列表。"></a>四、可变参数列表。</h3><p><code>void method(Object... args){}</code></p><p>调用:<br>method();或method(new Object[]{1,2,3,4});</p><h2 id="第六章（访问权限控制）"><a href="#第六章（访问权限控制）" class="headerlink" title="第六章（访问权限控制）"></a>第六章（访问权限控制）</h2><h3 id="一、访问权限途径"><a href="#一、访问权限途径" class="headerlink" title="一、访问权限途径"></a>一、访问权限途径</h3><p>取得某一成员的访问权限途径：</p><ul><li>（1）该成员访问权限为public，这样谁都可以访问该成员。</li><li>（2）不加访问权限修饰词并将其他类放置于同一个包内的方式给成员赋予包访问权。于是包内的其他类也可以访问。</li><li>（3）继承的类可以访问public和protected方法。</li><li>（4）通过提供访问器set,get来读取和改变值。</li></ul><h2 id="第七章（复用类）"><a href="#第七章（复用类）" class="headerlink" title="第七章（复用类）"></a>第七章（复用类）</h2><h3 id="一、toString-的自动调用"><a href="#一、toString-的自动调用" class="headerlink" title="一、toString()的自动调用"></a>一、toString()的自动调用</h3><p>有时候编译器会自动帮你调用toString()方法。<br>“source”+ source;这时候会自动调用source对象的toString方法。</p><h3 id="二、构造函数调用顺序"><a href="#二、构造函数调用顺序" class="headerlink" title="二、构造函数调用顺序"></a>二、构造函数调用顺序</h3><p>构造函数总是从基类开始。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Insert</span></span>&#123;</span><br><span class="line">Insert()&#123;</span><br><span class="line">System.out.println(<span class="string">"Insert"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beetle</span> <span class="keyword">extends</span> <span class="title">Insert</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Beetle()&#123;</span><br><span class="line">System.out.println(<span class="string">"Beetle"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Beetle b = <span class="keyword">new</span> Beetle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Insert</span></span><br><span class="line"><span class="comment">//Beetle</span></span><br></pre></td></tr></table></figure></p><h3 id="三、final"><a href="#三、final" class="headerlink" title="三、final"></a>三、final</h3><p>对于基本类型，final使数值恒定不变；而用于对象引用，final使引用恒定不变，但对象本身是可以改变的。<br>private 属于 final 方法<br>static final是属于类属性，即能被类调用，不用实例化<br>final则需要实例化。</p><h3 id="四、组合模式"><a href="#四、组合模式" class="headerlink" title="四、组合模式"></a>四、组合模式</h3><p>组合模式可以看做是一颗树，每个枝干都可以长出新的枝干，它们的结构都是相同的。<br>将枝干抽象为一个类，里面包含链接下一个节点的方法，若需要不断的链接下一个节点只需要继承这个方法并实现。<br><em>示例：导航菜单</em><br>组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tab</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Tab</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Tab tab)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">romove</span><span class="params">(Tab tab)</span></span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardTab</span> <span class="keyword">extends</span> <span class="title">Tab</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CardTab</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(title);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Tab&gt; tabs;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Tab tab)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">tabs.add(tab);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">romove</span><span class="params">(Tab tab)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">tabs.remove(tab);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TabView</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">CardTab rootTab = <span class="keyword">new</span> CardTab(<span class="string">"roottab"</span>);</span><br><span class="line">CardTab tab1 = <span class="keyword">new</span> CardTab(<span class="string">"tab1"</span>);</span><br><span class="line">CardTab tab2 = <span class="keyword">new</span> CardTab(<span class="string">"tab2"</span>);</span><br><span class="line">CardTab tab3 = <span class="keyword">new</span> CardTab(<span class="string">"tab3"</span>);</span><br><span class="line">rootTab.add(tab1);</span><br><span class="line">rootTab.add(tab2);</span><br><span class="line">rootTab.add(tab3);</span><br><span class="line">CardTab tab4 = <span class="keyword">new</span> CardTab(<span class="string">"tab1-1"</span>);</span><br><span class="line">CardTab tab5 = <span class="keyword">new</span> CardTab(<span class="string">"tab1-2"</span>);</span><br><span class="line">tab1.add(tab4);</span><br><span class="line">tab1.add(tab5);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这样子Tab组成了一个导航列表,这就是一个简单的组合模式.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="第八章（多态）"><a href="#第八章（多态）" class="headerlink" title="第八章（多态）"></a>第八章（多态）</h2><p>多态是一项让程序员“将改变的事物与未变的事物分离开来”的重要技术。</p><h3 id="一、多态缺陷"><a href="#一、多态缺陷" class="headerlink" title="一、多态缺陷"></a>一、多态缺陷</h3><p>缺陷1：只有非private方法才可以被覆盖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> field = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getField</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> field;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> field = <span class="number">1</span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getField</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> field; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuperField</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">super</span>.field; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiledAccess</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Super sup = <span class="keyword">new</span> Sub(); <span class="comment">// Upcast</span></span><br><span class="line">        System.out.println(<span class="string">"sup.field = "</span> + sup.field +</span><br><span class="line">          <span class="string">", sup.getField() = "</span> + sup.getField());</span><br><span class="line">        Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(<span class="string">"sub.field = "</span> +</span><br><span class="line">          sub.field + <span class="string">", sub.getField() = "</span> +</span><br><span class="line">          sub.getField() +</span><br><span class="line">          <span class="string">", sub.getSuperField() = "</span> +</span><br><span class="line">          sub.getSuperField());</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">sup.field = <span class="number">0</span>, sup.getField() = <span class="number">1</span></span><br><span class="line">sub.field = <span class="number">1</span>, sub.getField() = <span class="number">1</span>, sub.getSuperField() = <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>缺陷2：域和静态方法直接在编译时候进行解析，所以多态不会对其产生作用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">staticGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Base staticGet()"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">dynamicGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Base dynamicGet()"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticSub</span> <span class="keyword">extends</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">staticGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Derived staticGet()"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">dynamicGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Derived dynamicGet()"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticPolymorphism</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StaticSuper sup = <span class="keyword">new</span> StaticSub(); <span class="comment">// Upcast</span></span><br><span class="line">    System.out.println(sup.staticGet());</span><br><span class="line">    System.out.println(sup.dynamicGet());</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">Base staticGet()</span></span><br><span class="line"><span class="comment">Derived dynamicGet() */</span></span><br></pre></td></tr></table></figure></p><h3 id="二、断言"><a href="#二、断言" class="headerlink" title="二、断言"></a>二、断言</h3><p>@Override作用：<br>断言，如果我们使用了这种annotation在一个没有覆盖父类方法的方法时，java编译器将以一个编译错误来警示</p><h3 id="三、构造器构造顺序"><a href="#三、构造器构造顺序" class="headerlink" title="三、构造器构造顺序"></a>三、构造器构造顺序</h3><p>构造器在多态时的构造顺序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">    Meal() &#123;</span><br><span class="line">        P.print(<span class="string">"Meal()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bread</span> </span>&#123;</span><br><span class="line">    Bread() &#123;</span><br><span class="line">        P.print(<span class="string">"Bread()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheese</span> </span>&#123;</span><br><span class="line">    Cheese() &#123;</span><br><span class="line">        P.print(<span class="string">"Cheese()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lettuce</span> </span>&#123;</span><br><span class="line">    Lettuce() &#123;</span><br><span class="line">        P.print(<span class="string">"Lettuce()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lunch</span> <span class="keyword">extends</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">    Lunch() &#123;</span><br><span class="line">        P.print(<span class="string">"Lunch()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PortableLunch</span> <span class="keyword">extends</span> <span class="title">Lunch</span> </span>&#123;</span><br><span class="line">    PortableLunch() &#123;</span><br><span class="line">        P.print(<span class="string">"PortableLunch()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sandwich</span> <span class="keyword">extends</span> <span class="title">PortableLunch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bread b = <span class="keyword">new</span> Bread();</span><br><span class="line">    <span class="keyword">private</span> Cheese c = <span class="keyword">new</span> Cheese();</span><br><span class="line">    <span class="keyword">private</span> Lettuce l = <span class="keyword">new</span> Lettuce();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sandwich</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        P.print(<span class="string">"Sandwich()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Sandwich();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">Meal()</span><br><span class="line">Lunch()</span><br><span class="line">PortableLunch()</span><br><span class="line">Bread()</span><br><span class="line">Cheese()</span><br><span class="line">Lettuce()</span><br><span class="line">Sandwich()</span><br></pre></td></tr></table></figure></p><p>解释说明：<br>一个继承类实例化的时候必须要确保所使用的成员已经构建完毕，所以必须先调用基类的构造器，所以当实例化Sandwich对象时先调用其基类的构造方法：<br>Meal()<br>Lunch()<br>PortableLunch()<br>其次对成员变量进行初始化<br>Bread()<br>Cheese()<br>Lettuce()<br>最后调用构造器<br>Sandwich()</p><h3 id="三、构造器初始化"><a href="#三、构造器初始化" class="headerlink" title="三、构造器初始化"></a>三、构造器初始化</h3><p>初始化的过程：<br>（1）在所有事物发生之前，将分配给对象的存储空间初始化为二进制的零。<br>（2）调用基类构造器。<br>（3）按照声明顺序调用成员的初始化方法。<br>（4）调用导出类（本体）的构造器主体。</p><h2 id="第九章（接口）"><a href="#第九章（接口）" class="headerlink" title="第九章（接口）"></a>第九章（接口）</h2><p>任何抽象性都应该是应真正的需求而产生的。</p><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>interface如果不加public关键字，则只具有包访问权限。</p><h3 id="重名"><a href="#重名" class="headerlink" title="重名"></a>重名</h3><p>可以通过extends来扩展接口，但在实现多重继承时要注意不能实现签名或返回类型不同的接口方法，除非其传入参数不一样。最好避免使用同一个方法名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">M</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menace</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">kill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Danger</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menace</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">kill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Vampire</span> <span class="keyword">extends</span> <span class="title">Danger</span>,<span class="title">M</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monster</span> <span class="keyword">implements</span> <span class="title">Vampire</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello,every one,I'm cpacm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menace</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">menace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>tip:切勿过渡设计</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>去商店去买东西，可以选择不同的出行方式但都能达到买东西的目的，这种选择模式就是策略模式。<br>把出行方式抽象为一个接口，实现公交车，自行车，走路，出租车等实例，最后自己决定使用哪种方式。</p><p>策略模式：定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。也称为政策模式(Policy)。策略模式把对象本身和运算规则区分开来，其功能非常强大，因为这个设计模式本身的核心思想就是面向对象编程的多形性的思想。<br>环境类(Context):用一个ConcreteStrategy对象来配置。维护一个对Strategy对象的引用。可定义一个接口来让Strategy访问它的数据。<br>抽象策略类(Strategy):定义所有支持的算法的公共接口。 Context使用这个接口来调用某ConcreteStrategy定义的算法。<br>具体策略类(ConcreteStrategy):以Strategy接口实现某具体算法。<br><img src="http://7xi4up.com1.z0.glb.clouddn.com/%E7%AD%96%E7%95%A5.bmp" alt="策略模式"></p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。<br>在Android中常用到的各种Adapter就是用的适配器模式思想。<br><img src="http://7xi4up.com1.z0.glb.clouddn.com/%E9%80%82%E9%85%8D%E5%99%A8.png" alt="适配器模式"></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式主要用以下几种形态：</p><ol><li>简单工厂（Simple Factory）: 主要代码由一个Factory管理，每添加一个产品都需要在factory类中修改代码；</li><li>工厂方法（Factory Method）:一种产品对应一个工厂，增加一种产品就同时增加一个工厂；</li><li>抽象工厂（Abstract Factory）:通常用于多种产品且每种都有不同型号的情况下，针对型号建立工厂，每个工厂只生产该型号的产品。</li></ol><p>抽象工厂和工厂可以根据不同情况下相互转化。</p><h2 id="第十章（内部类）"><a href="#第十章（内部类）" class="headerlink" title="第十章（内部类）"></a>第十章（内部类）</h2><h3 id="一、访问权"><a href="#一、访问权" class="headerlink" title="一、访问权"></a>一、访问权</h3><p>内部类拥有其外围类的所有元素的访问权。<br>意思是通过内部类能够获得其外部类的内存信息（参数值）。<br>故不能直接通过创建普通对象的方法创建内部类，必须要通过外部类才能创建。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotThis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DotThis.f()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DotThis <span class="title">outer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> DotThis.<span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// A plain "this" would be Inner's "this"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DotThis dt = <span class="keyword">new</span> DotThis();</span><br><span class="line">        DotThis.Inner dti = dt.inner();</span><br><span class="line">        dti.outer().f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二、-new"><a href="#二、-new" class="headerlink" title="二、.new"></a>二、.new</h3><p>.new语法，可以直接创建其内部类，但前提也是要提供其外部类的引用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DotNew dn = <span class="keyword">new</span> DotNew();</span><br><span class="line">        DotNew.Inner dti = dn.new Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当内部类向上转型为基类或接口时，往往是为了隐藏实现细节。</p><h3 id="三、局部"><a href="#三、局部" class="headerlink" title="三、局部"></a>三、局部</h3><p>内部类可以嵌入在任何堆作用域内，但只在其作用域内可用。称作为局部内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inTrack</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TrackSlip</span></span>&#123;</span><br><span class="line">                <span class="keyword">private</span> String id;</span><br><span class="line">                TrackSlip(String s)&#123;</span><br><span class="line">                    id = s;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function">String <span class="title">getSlip</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            TrackSlip ts = <span class="keyword">new</span> TrackSlip(<span class="string">"slip"</span>);</span><br><span class="line">            String s = ts.getSlip();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TrackSlip ts = new TrackSlip("slip"); //run error</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">track</span><span class="params">()</span></span>&#123;</span><br><span class="line">        inTrack(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Parcel6 p = <span class="keyword">new</span> Parcel6();</span><br><span class="line">        p.track();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="四、匿名内部类"><a href="#四、匿名内部类" class="headerlink" title="四、匿名内部类"></a>四、匿名内部类</h3><p>匿名内部类是一个没有名字的内部类，通常使用它来简化代码编写，同时必须继承一个父类或实现一个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 2 3 4 5</span></span><br></pre></td></tr></table></figure></p><p>tip:常用的扩展是将只使用一次的工厂类作为匿名内部类放在生产类上。</p><h3 id="五、嵌套类"><a href="#五、嵌套类" class="headerlink" title="五、嵌套类"></a>五、嵌套类</h3><p>将内部类声明为static时，此时就作为嵌套类使用。创建嵌套类的对象并不需要外围对象，同时也不能从嵌套类的对象中访问非静态的外围对象。</p><h3 id="六、接口内部类"><a href="#六、接口内部类" class="headerlink" title="六、接口内部类"></a>六、接口内部类</h3><p>在接口中可以放入嵌套类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClassInInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">ClassInInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"Howdy!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Test().howdy();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、内部类作用"><a href="#七、内部类作用" class="headerlink" title="七、内部类作用"></a>七、内部类作用</h3><p>使用内部类的一些好处</p><ol><li>可以解决多重继承的问题，因为内部类可以访问外围类的信息，所以获得内部类相当于获得外围类和内部类两种信息。</li><li>在一个外围类中，可以让多个内部类以不同的方式实现同一个接口或类从而实现不同的特性。</li></ol><h3 id="八、模版模式"><a href="#八、模版模式" class="headerlink" title="八、模版模式"></a>八、模版模式</h3><p>模板方法模式：定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br>模板模式需要一个抽象类和继承该抽象类的子类来实现。同样使用出门买东西的情景：出门-&gt;买东西-&gt;回来。</p><p>我们不关心怎么出去和回来，所以把出门和回来的方法写在抽象类中，然后将买东西这个方法抽象化放在抽象类中以便子类实现。<br>接着创建子类继承抽象类，买一种东西可以创建一个新类，从而实现抽象方法。</p><p>而策略模式是使用委托方法实现的，需要一个用来实现<br>方法的接口存在。<br>模板模式和策略模式通常可以互相替换。</p><h3 id="九、命令设计模式"><a href="#九、命令设计模式" class="headerlink" title="九、命令设计模式"></a>九、命令设计模式</h3><p>命令模式的结构<br>        顾名思义，命令模式就是对命令的封装，首先来看一下命令模式类图中的基本结构：<br>Command类：是一个抽象类，类中对需要执行的命令进行声明，一般来说要对外公布一个execute方法用来执行命令。<br>ConcreteCommand类：Command类的实现类，对抽象类中声明的方法进行实现。<br>Client类：最终的客户端调用类。<br>        以上三个类的作用应该是比较好理解的，下面我们重点说一下Invoker类和Recevier类。<br>Invoker类：调用者，负责调用命令。<br>Receiver类：接收者，负责接收命令并且执行命令。<br>命令模式的精髓所在：把命令的调用者与执行者分开，使双方不必关心对方是如何操作</p><h3 id="十、继承内部类"><a href="#十、继承内部类" class="headerlink" title="十、继承内部类"></a>十、继承内部类</h3><p>当继承内部类的时候必须在构造器中传入外围类的引用和外围类的super；</p><h2 id="第十一章（持有对象）"><a href="#第十一章（持有对象）" class="headerlink" title="第十一章（持有对象）"></a>第十一章（持有对象）</h2><h3 id="一、各个容器"><a href="#一、各个容器" class="headerlink" title="一、各个容器"></a>一、各个容器</h3><p>ArrayList LinkedList 都是按插入顺序存放数据<br>ArrayList在随机访问速度上比较快，而LinkedList在插入和删除数据比较有优势，具有Queue，Stack的特性。<br>HashSet TreeSet LinkedHashSet<br>HashMap TreeMap LinkedHashMap<br>通用点：Hash开头的容器都是通过Hash值来查找数据，所以特点是无序但速度快;<br>Tree开头的容器都会将存入的数据进行升序排列；<br>Linked则是按插入的顺序进行排序。<br>（后面17章会介绍其原理）</p><h3 id="二、迭代器"><a href="#二、迭代器" class="headerlink" title="二、迭代器"></a>二、迭代器</h3><p>迭代器具有以下特性：<br>1）创建代价小<br>2）单向移动<br>3）next()获取下一个对象，hasNext()判断是否具有下一个对象，remove()移除当前对象。</p><p><strong>（ListIterator作为List特有的迭代器，具有双向移动功能，其对应方法为hasPrevious(),previous()）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrossContainerIteration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Iterator&lt;Pet&gt; it)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Pet p = it.next();</span><br><span class="line">            System.out.println(p.id() + <span class="string">":"</span> + p + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        List&lt;Pet&gt; pets = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        pets.add(<span class="keyword">new</span> Pet(<span class="string">"cat"</span>));</span><br><span class="line">        pets.add(<span class="keyword">new</span> Pet(<span class="string">"dog"</span>));</span><br><span class="line">        pets.add(<span class="keyword">new</span> Pet(<span class="string">"bird"</span>));</span><br><span class="line">        pets.add(<span class="keyword">new</span> Pet(<span class="string">"fish"</span>));</span><br><span class="line">        pets.add(<span class="keyword">new</span> Pet(<span class="string">"pig"</span>));</span><br><span class="line">        LinkedList&lt;Pet&gt; petsLL = <span class="keyword">new</span> LinkedList&lt;&gt;(pets);</span><br><span class="line">        HashSet&lt;Pet&gt; petsHS = <span class="keyword">new</span> HashSet&lt;&gt;(pets);</span><br><span class="line">        TreeSet&lt;Pet&gt; petsTS = <span class="keyword">new</span> TreeSet&lt;&gt;(pets);</span><br><span class="line"></span><br><span class="line">        display(pets.iterator());</span><br><span class="line">        display(petsLL.iterator());</span><br><span class="line">        display(petsHS.iterator());</span><br><span class="line">        display(petsTS.iterator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*0:Pet cat </span></span><br><span class="line"><span class="comment">1:Pet dog </span></span><br><span class="line"><span class="comment">2:Pet bird </span></span><br><span class="line"><span class="comment">3:Pet fish </span></span><br><span class="line"><span class="comment">4:Pet pig </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0:Pet cat </span></span><br><span class="line"><span class="comment">1:Pet dog </span></span><br><span class="line"><span class="comment">2:Pet bird </span></span><br><span class="line"><span class="comment">3:Pet fish </span></span><br><span class="line"><span class="comment">4:Pet pig </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3:Pet fish </span></span><br><span class="line"><span class="comment">1:Pet dog </span></span><br><span class="line"><span class="comment">4:Pet pig </span></span><br><span class="line"><span class="comment">2:Pet bird </span></span><br><span class="line"><span class="comment">0:Pet cat </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2:Pet bird </span></span><br><span class="line"><span class="comment">0:Pet cat </span></span><br><span class="line"><span class="comment">1:Pet dog </span></span><br><span class="line"><span class="comment">3:Pet fish </span></span><br><span class="line"><span class="comment">4:Pet pig */</span></span><br></pre></td></tr></table></figure><h3 id="二、栈"><a href="#二、栈" class="headerlink" title="二、栈"></a>二、栈</h3><p>后进先出<br>通常可以使用LinkedList来实现Stack的功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;T&gt; storge = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line">        storge.addFirst(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storge.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storge.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storge.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三、队列"><a href="#三、队列" class="headerlink" title="三、队列"></a>三、队列</h3><p>Queue 先进先出<br>同样可以使用LinkedList来实现功能，由于其实现了Queue接口，可以将其向上转型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printQ</span><span class="params">(Queue queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.peek() != <span class="keyword">null</span>)</span><br><span class="line">            System.out.print(queue.remove() + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            queue.offer(rand.nextInt(i + <span class="number">10</span>));</span><br><span class="line">        printQ(queue);</span><br><span class="line">        Queue&lt;Character&gt; qc = <span class="keyword">new</span> LinkedList&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : <span class="string">"Brontosaurus"</span>.toCharArray())</span><br><span class="line">            qc.offer(c);</span><br><span class="line">        printQ(qc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Output: 8 1 1 1 5 14 3 1 0 1 B r o n t o s a u r u s</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><h3 id="三、优先队列"><a href="#三、优先队列" class="headerlink" title="三、优先队列"></a>三、优先队列</h3><p>PriorityQueue<br>简单来说就是具有排序功能的队列，下一个弹出的元素是在队列中优先级最高的一个。使用Comparator比较器来进行比较。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;();</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            priorityQueue.offer(rand.nextInt(i + <span class="number">10</span>));</span><br><span class="line">        QueueDemo.printQ(priorityQueue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Output: 0 1 1 1 1 1 3 5 8 14 1 1 2 3 3 9 9 14 14 18 18 20 21 22 23 25 25 25</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; ints = Arrays.asList(<span class="number">25</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">                <span class="number">3</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>);</span><br><span class="line">        priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(ints);</span><br><span class="line">        QueueDemo.printQ(priorityQueue);</span><br><span class="line">        priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(ints.size(),</span><br><span class="line">                Collections.reverseOrder());</span><br><span class="line">        priorityQueue.addAll(ints);</span><br><span class="line">        QueueDemo.printQ(priorityQueue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 25 23 22 21 20 18 18 14 14 9 9 3 3 2 1 1 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String fact = <span class="string">"EDUCATION SHOULD ESCHEW OBFUSCATION"</span>;</span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(fact.split(<span class="string">""</span>));</span><br><span class="line">        PriorityQueue&lt;String&gt; stringPQ = <span class="keyword">new</span> PriorityQueue&lt;String&gt;(strings);</span><br><span class="line">        QueueDemo.printQ(stringPQ);</span><br><span class="line">        stringPQ = <span class="keyword">new</span> PriorityQueue&lt;String&gt;(strings.size(),</span><br><span class="line">                Collections.reverseOrder());</span><br><span class="line">        stringPQ.addAll(strings);</span><br><span class="line">        QueueDemo.printQ(stringPQ);</span><br><span class="line"></span><br><span class="line">        Set&lt;Character&gt; charSet = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : fact.toCharArray())</span><br><span class="line">            charSet.add(c); <span class="comment">// Autoboxing</span></span><br><span class="line">        PriorityQueue&lt;Character&gt; characterPQ = <span class="keyword">new</span> PriorityQueue&lt;Character&gt;(</span><br><span class="line">                charSet);</span><br><span class="line">        QueueDemo.printQ(characterPQ);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * A A B C C C D D E E E F H H I I L N</span></span><br><span class="line"><span class="comment">        * N O O O O S S S T T U U U W W U U U T T S S S O O O O N N L I I H H F E E E D</span></span><br><span class="line"><span class="comment">        * D C C C B A A A B C D E F H I L N O S T U W</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>总结：四种容器List Set Queue Map</strong></p><h2 id="第十二章（通过异常处理错误）"><a href="#第十二章（通过异常处理错误）" class="headerlink" title="第十二章（通过异常处理错误）"></a>第十二章（通过异常处理错误）</h2><p><strong>Java的基本理念是“结构不佳的代码不能运行</strong></p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>我们可以继承Exception类来自定义异常，在自定义异常类中可以添加一些动作，比如写入日志等等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span> </span>&#123; <span class="keyword">super</span>(msg); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullConstructors</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Throwing MyException from f()"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Throwing MyException from g()"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"Originated in g()"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      f();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(MyException e) &#123;</span><br><span class="line">      e.printStackTrace(System.out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      g();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(MyException e) &#123;</span><br><span class="line">      e.printStackTrace(System.out);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">Throwing MyException from f()</span></span><br><span class="line"><span class="comment">MyException</span></span><br><span class="line"><span class="comment">        at FullConstructors.f(FullConstructors.java:11)</span></span><br><span class="line"><span class="comment">        at FullConstructors.main(FullConstructors.java:19)</span></span><br><span class="line"><span class="comment">Throwing MyException from g()</span></span><br><span class="line"><span class="comment">MyException: Originated in g()</span></span><br><span class="line"><span class="comment">        at FullConstructors.g(FullConstructors.java:15)</span></span><br><span class="line"><span class="comment">        at FullConstructors.main(FullConstructors.java:24)</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure></p><p>异常也是类的一种，所以我们可以扩展使其获得更强大的功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException2</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException2</span><span class="params">(String msg, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">val</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Detail Message: "</span> + x + <span class="string">" "</span> + <span class="keyword">super</span>.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraFeatures</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Throwing MyException2 from f()"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Throwing MyException2 from g()"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">"Originated in g()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">throws</span> MyException2 </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Throwing MyException2 from h()"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException2(<span class="string">"Originated in h()"</span>, <span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException2 e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">            System.out.println(<span class="string">"e.val() = "</span> + e.val());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/*</span></span><br><span class="line"><span class="comment"> Throwing MyException2 from f()</span></span><br><span class="line"><span class="comment">chapter12.MyException2: Detail Message: 0 null</span></span><br><span class="line"><span class="comment">    at chapter12.ExtraFeatures.f(ExtraFeatures.java:32)</span></span><br><span class="line"><span class="comment">    at chapter12.ExtraFeatures.main(ExtraFeatures.java:47)</span></span><br><span class="line"><span class="comment">Throwing MyException2 from g()</span></span><br><span class="line"><span class="comment">chapter12.MyException2: Detail Message: 0 Originated in g()</span></span><br><span class="line"><span class="comment">    at chapter12.ExtraFeatures.g(ExtraFeatures.java:37)</span></span><br><span class="line"><span class="comment">    at chapter12.ExtraFeatures.main(ExtraFeatures.java:52)</span></span><br><span class="line"><span class="comment">Throwing MyException2 from h()</span></span><br><span class="line"><span class="comment">chapter12.MyException2: Detail Message: 47 Originated in h()</span></span><br><span class="line"><span class="comment">    at chapter12.ExtraFeatures.h(ExtraFeatures.java:42)</span></span><br><span class="line"><span class="comment">    at chapter12.ExtraFeatures.main(ExtraFeatures.java:57)</span></span><br><span class="line"><span class="comment">e.val() = 47</span></span><br><span class="line"><span class="comment"> */</span><span class="comment">// :~</span></span><br></pre></td></tr></table></figure></p><p>所有的异常都可以由Exception进行捕获，可以通过Exception打印发生错误时所获取的信息。</p><h3 id="Rethrow"><a href="#Rethrow" class="headerlink" title="Rethrow"></a>Rethrow</h3><p>可以通过throw将catch到的异常重新抛出，不过异常里面是原来异常抛出的调用栈信息。可以使用 fillInStackTrace()更新，调用 fillInStackTrace那一行就成了异常的新发生地。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rethrowing</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"originating the exception in f()"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"thrown from f()"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      f();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside g(),e.printStackTrace()"</span>);</span><br><span class="line">      e.printStackTrace(System.out);</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      f();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside h(),e.printStackTrace()"</span>);</span><br><span class="line">      e.printStackTrace(System.out);</span><br><span class="line">      <span class="keyword">throw</span> (Exception)e.fillInStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      g();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"main: printStackTrace()"</span>);</span><br><span class="line">      e.printStackTrace(System.out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      h();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"main: printStackTrace()"</span>);</span><br><span class="line">      e.printStackTrace(System.out);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">originating the exception in f()</span></span><br><span class="line"><span class="comment">Inside g(),e.printStackTrace()</span></span><br><span class="line"><span class="comment">java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">        at Rethrowing.f(Rethrowing.java:7)</span></span><br><span class="line"><span class="comment">        at Rethrowing.g(Rethrowing.java:11)</span></span><br><span class="line"><span class="comment">        at Rethrowing.main(Rethrowing.java:29)</span></span><br><span class="line"><span class="comment">main: printStackTrace()</span></span><br><span class="line"><span class="comment">java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">        at Rethrowing.f(Rethrowing.java:7)</span></span><br><span class="line"><span class="comment">        at Rethrowing.g(Rethrowing.java:11)</span></span><br><span class="line"><span class="comment">        at Rethrowing.main(Rethrowing.java:29)</span></span><br><span class="line"><span class="comment">originating the exception in f()</span></span><br><span class="line"><span class="comment">Inside h(),e.printStackTrace()</span></span><br><span class="line"><span class="comment">java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">        at Rethrowing.f(Rethrowing.java:7)</span></span><br><span class="line"><span class="comment">        at Rethrowing.h(Rethrowing.java:20)</span></span><br><span class="line"><span class="comment">        at Rethrowing.main(Rethrowing.java:35)</span></span><br><span class="line"><span class="comment">main: printStackTrace()</span></span><br><span class="line"><span class="comment">java.lang.Exception: thrown from f()</span></span><br><span class="line"><span class="comment">        at Rethrowing.h(Rethrowing.java:24)</span></span><br><span class="line"><span class="comment">        at Rethrowing.main(Rethrowing.java:35)</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure></p><h3 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h3><p>Throwable的子类可以接受一个cause对象作为参数，cause表示原始异常，这样可以通过把原始异常传递给新的异常使得可以追踪所有连接起来的异常。<br>在Throwable子类中，只有三种基本的异常类提供了带cause参数的构造器，分别为Error,Exception和RuntimeException。如果要把其他类型的异常链接起来，应该使用initCause()方法。</p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>return 与 fianl共用时，即使在try里面实行return,finally里面的代码还是会运行，<br>而在final里面使用热力return 的话，即使抛出了异常也不会产生任何输出。</p><h3 id="异常使用指南"><a href="#异常使用指南" class="headerlink" title="异常使用指南"></a>异常使用指南</h3><ol><li>在恰当的级别处理问题。</li><li>解决问题并且重新调用产生异常的方法。</li><li>进行少许修补，然后绕过异常发生的地方继续执行。</li><li>用别的数据进行计算，以代替异常发生的地方继续执行。</li><li>吧当前运行环境下能做的事情尽量做完，然后将相同的异常重抛到更高层。</li><li>吧当前运行环境下能做的事情尽量做完，然后将不同的异常重抛到更高层。</li><li>终止程序</li><li>进行简化。</li><li>蓝类库和程序更安全。</li></ol><h2 id="第十三章（字符串）"><a href="#第十三章（字符串）" class="headerlink" title="第十三章（字符串）"></a>第十三章（字符串）</h2><p>字符串具有不可变性。</p><h3 id="格式修饰符"><a href="#格式修饰符" class="headerlink" title="格式修饰符"></a>格式修饰符</h3><p>对字符串进行可变操作时尽量使用StringBuilder.</p><p>在插入数据时，如果想要控制空格与其对其，则需要更精细复杂的格式修饰符。</p><p><code>%[argument_index$][flags][width][.precision]conversion</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receipt</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> Formatter f = <span class="keyword">new</span> Formatter(System.out);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10s\n"</span>, <span class="string">"Item"</span>, <span class="string">"Qty"</span>, <span class="string">"Price"</span>);</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10s\n"</span>, <span class="string">"- - - -"</span>, <span class="string">"- - -"</span>, <span class="string">"- - - - -"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String name, <span class="keyword">int</span> qty, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">f.format(<span class="string">"%-15.15s %5d %10.2f\n"</span>, name, qty, price);</span><br><span class="line">total += price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10.2f\n"</span>, <span class="string">"Tax"</span>, <span class="string">""</span>, total + <span class="number">0.06</span>);</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10s\n"</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">"- - - - -"</span>);</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10.2f\n"</span>, <span class="string">"Total"</span>, <span class="string">""</span>, total * <span class="number">1.06</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receipt receipt = <span class="keyword">new</span> Receipt();</span><br><span class="line">        receipt.printTitle();</span><br><span class="line">        receipt.print(<span class="string">"Jack's Magic Beans"</span>, <span class="number">4</span>, <span class="number">4.25</span>);</span><br><span class="line">        receipt.print(<span class="string">"Princess Peas"</span>, <span class="number">5</span>, <span class="number">5.1</span>);</span><br><span class="line">        receipt.print(<span class="string">"Three Bears Porridge"</span>, <span class="number">1</span>, <span class="number">14.29</span>);</span><br><span class="line">        receipt.printTotal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">Item              Qty      Price</span></span><br><span class="line"><span class="comment">- - - -         - - -  - - - - -</span></span><br><span class="line"><span class="comment">Jack's Magic Be     4       4.25</span></span><br><span class="line"><span class="comment">Princess Peas       5       5.10</span></span><br><span class="line"><span class="comment">Three Bears Por     1      14.29</span></span><br><span class="line"><span class="comment">Tax                        23.70</span></span><br><span class="line"><span class="comment">                       - - - - -</span></span><br><span class="line"><span class="comment">Total                      25.06</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Formatter转换表格<br>|     符号    |    定义    |<br>|:—————:|:—————:|<br>| d      | 整数型（十进制） |<br>| c      | Uncode字符 |<br>| b      | Boolean值 |<br>| s      | String |<br>| f      | 浮点数（十进制） |<br>| e      | 浮点数（科学计数） |<br>| x      | 整数（十六进制） |<br>| h      | 散列码（十六进制） |<br>| %      | 字符“%” |</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式<br>使用Pattern和Matcher实现正则表达式</p><p>这里列了正则表达式简单的表格，详细的可以在网上找找教程。</p><p>Matcher.find()用来查找多个匹配，可以像迭代器一样不断向前搜索匹配的字符串。</p><p>组是用括号划分的正则表达式，可以根据组的编号来引用某个组，组号为0表示整个表达式，组号1表示被第一对括号括起的组，依次类推。比如说：A(B(C))D有三个组<br>组0是ABCD，组1是BC，组2是C。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Groups</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">final</span> String POEM =</span><br><span class="line"><span class="string">"Twas brillig, and the slithy toves\n"</span> +</span><br><span class="line"><span class="string">"Did gyre and gimble in the wabe.\n"</span> +</span><br><span class="line"><span class="string">"All mimsy were the borogoves,\n"</span> +</span><br><span class="line"><span class="string">"And the mome raths outgrabe.\n\n"</span> +</span><br><span class="line"><span class="string">"Beware the Jabberwock, my son,\n"</span> +</span><br><span class="line"><span class="string">"The jaws that bite, the claws that catch.\n"</span> +</span><br><span class="line"><span class="string">"Beware the Jubjub bird, and shun\n"</span> +</span><br><span class="line"><span class="string">"The frumious Bandersnatch."</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Matcher m =</span><br><span class="line">                Pattern.compile(<span class="string">"(?m)(\\S+)\\s+((\\S+)\\s+(\\S+))$"</span>)</span><br><span class="line">                        .matcher(POEM);</span><br><span class="line"><span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m.groupCount(); j++)</span><br><span class="line">                System.out.println(<span class="string">"["</span> + m.group(j) + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[the slithy toves]</span></span><br><span class="line"><span class="comment">[the]</span></span><br><span class="line"><span class="comment">[slithy toves]</span></span><br><span class="line"><span class="comment">[slithy]</span></span><br><span class="line"><span class="comment">[toves]</span></span><br><span class="line"><span class="comment">[in the wabe.]</span></span><br><span class="line"><span class="comment">[in]</span></span><br><span class="line"><span class="comment">[the wabe.]</span></span><br><span class="line"><span class="comment">[the]</span></span><br><span class="line"><span class="comment">[wabe.]</span></span><br><span class="line"><span class="comment">[were the borogoves,]</span></span><br><span class="line"><span class="comment">[were]</span></span><br><span class="line"><span class="comment">[the borogoves,]</span></span><br><span class="line"><span class="comment">[the]</span></span><br><span class="line"><span class="comment">[borogoves,]</span></span><br><span class="line"><span class="comment">[mome raths outgrabe.]</span></span><br><span class="line"><span class="comment">[mome]</span></span><br><span class="line"><span class="comment">[raths outgrabe.]</span></span><br><span class="line"><span class="comment">[raths]</span></span><br><span class="line"><span class="comment">[outgrabe.]</span></span><br><span class="line"><span class="comment">[Jabberwock, my son,]</span></span><br><span class="line"><span class="comment">[Jabberwock,]</span></span><br><span class="line"><span class="comment">[my son,]</span></span><br><span class="line"><span class="comment">[my]</span></span><br><span class="line"><span class="comment">[son,]</span></span><br><span class="line"><span class="comment">[claws that catch.]</span></span><br><span class="line"><span class="comment">[claws]</span></span><br><span class="line"><span class="comment">[that catch.]</span></span><br><span class="line"><span class="comment">[that]</span></span><br><span class="line"><span class="comment">[catch.]</span></span><br><span class="line"><span class="comment">[bird, and shun]</span></span><br><span class="line"><span class="comment">[bird,]</span></span><br><span class="line"><span class="comment">[and shun]</span></span><br><span class="line"><span class="comment">[and]</span></span><br><span class="line"><span class="comment">[shun]</span></span><br><span class="line"><span class="comment">[The frumious Bandersnatch.]</span></span><br><span class="line"><span class="comment">[The]</span></span><br><span class="line"><span class="comment">[frumious Bandersnatch.]</span></span><br><span class="line"><span class="comment">[frumious]</span></span><br><span class="line"><span class="comment">[Bandersnatch.]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>Matcher的详细用法，推荐看看这篇博文<br><a href="http://www.itzhai.com/java-notes-regex-matches-and-lookingat.html" target="_blank" rel="noopener">http://www.itzhai.com/java-notes-regex-matches-and-lookingat.html</a></p><h2 id="第十四章（类型信息）"><a href="#第十四章（类型信息）" class="headerlink" title="第十四章（类型信息）"></a>第十四章（类型信息）</h2><p>运行时类型信息使得你可以在程序运行时发现和使用类型信息。</p><p>RTTI：RunTime Type Identification.</p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>类是程序的一部分，每个类都有一个Class对，每一个类都会被保存在一个同名的.class文件中。</p><p>所有的类都是在对其第一次使用时，动态加载到JVM中的。static初始化是在类加载时进行的。此时类加载器就会去检查这个类的Class是否被加载。</p><p>Class类包含很多有用的方法：（所有Class对象都属于这个类）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">""</span>):<span class="comment">//取得Class对象引用的一种方法。</span></span><br><span class="line">Class cc;</span><br><span class="line">cc.getName();<span class="comment">//获取全限定的类名</span></span><br><span class="line">cc.isInterface();<span class="comment">//是否表示为接口</span></span><br><span class="line">cc.getSimpleName();<span class="comment">//不含包名的类名</span></span><br><span class="line">cc.getInterfaces();<span class="comment">//返回Class对象，表示cc对象中包含的接口</span></span><br><span class="line">cc.getSuperclass();<span class="comment">//查询基类</span></span><br><span class="line">cc.newInstasnce();<span class="comment">//实现“虚拟构造器”来创建自己</span></span><br></pre></td></tr></table></figure></p><p>使用 .class 来创建对Class对象的引用。此时并不会初始化该对象，初始化被延迟到了对静态方法（构造器隐式的是静态的）或非常熟静态域进行首次引用时才执行。</p><h3 id="类使用"><a href="#类使用" class="headerlink" title="类使用"></a>类使用</h3><p>类使用的三个步骤：<br>1、加载，由类加载器执行，查找字节码，并从这些字节码中创建一个Class对象。<br>2、链接，验证类中的字节码，为静态域分配存储空间<br>3、初始化，执行静态初始化器和静态初始化块（包括超类）</p><h3 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h3><p>如果一个 static final 值是 “编译期常量”（像 static final int Y = 1），那么这个值不需要对这个类进行初始化就可以被读取。但是，如果static final 是一个非常数静态域还是会进行类的初始化。</p><p>如果一个static 域不是 final的，那么访问前必须先进行链接和初始化行为。</p><p>可以使用Class&lt;?&gt; 和 Class&lt;? extends 具体类&gt; 来限制类型，提供编译期的检查。</p><p>利用 instanceif 在类型转换前进行检查</p><h3 id="Java之外观模式（Facade-Pattern）"><a href="#Java之外观模式（Facade-Pattern）" class="headerlink" title="Java之外观模式（Facade Pattern）"></a>Java之外观模式（Facade Pattern）</h3><p>1.概念<br>为子系统中的一组接口提供一个统一接口。Facade模式定义了一个高层接口，这个接口使得这子系统更容易使用。</p><p>2.代码<br>下面是一个具体案例的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> facade;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawerOne</span> </span>&#123;  </span><br><span class="line"><span class="function">publicvoid <span class="title">open</span><span class="params">()</span></span>&#123;  </span><br><span class="line">       System.out.println(<span class="string">"第一个抽屉被打开了"</span>);  </span><br><span class="line">       getKey();  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="function">publicvoid <span class="title">getKey</span><span class="params">()</span></span>&#123;  </span><br><span class="line">       System.out.println(<span class="string">"得到第二个抽屉的钥匙"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawerTwo</span></span>&#123;  </span><br><span class="line"><span class="function">publicvoid <span class="title">open</span><span class="params">()</span></span>&#123;  </span><br><span class="line">       System.out.println(<span class="string">"第二个抽屉被打开了"</span>);  </span><br><span class="line">       getFile();  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="function">publicvoid <span class="title">getFile</span><span class="params">()</span></span>&#123;  </span><br><span class="line">       System.out.println(<span class="string">"得到这个重要文件"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawerFacade</span></span>&#123;  </span><br><span class="line">    DrawerOne darwerOne=<span class="keyword">new</span> DrawerOne();  </span><br><span class="line">    DrawerTwo darwerTwo=<span class="keyword">new</span> DrawerTwo();  </span><br><span class="line"><span class="function">publicvoid <span class="title">open</span><span class="params">()</span></span>&#123;  </span><br><span class="line">       darwerOne.open();  </span><br><span class="line">       darwerTwo.open();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">publicclass DrawerClient&#123;  </span><br><span class="line"><span class="function">publicstaticvoid <span class="title">main</span><span class="params">(String []args)</span></span>&#123;  </span><br><span class="line">       DrawerFacade drawer=<span class="keyword">new</span> DrawerFacade();  </span><br><span class="line">       drawer.open();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.应用场景<br>1）为一个复杂子系统提供一个简单接口。<br>2）提高子系统的独立性。<br>3）在层次化结构中，可以使用Facade模式定义系统中每一层的入口。</p><h3 id="RTTI和反射的区别"><a href="#RTTI和反射的区别" class="headerlink" title="RTTI和反射的区别"></a>RTTI和反射的区别</h3><p>RTTI和反射的根本区别：<br>RTTI是在编译时打开和检查.class文件，而对于反射来说.class文件在编译时期是不可获取的，所以是在运行时打开和检查.class文件</p><h3 id="class内部方法"><a href="#class内部方法" class="headerlink" title="class内部方法"></a>class内部方法</h3><p>利用Class的getMethods()和getConstructors()方法获得对象的方法和构造器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowMethods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern p = Pattern.compile(<span class="string">"\\w+\\."</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; c = Class.forName(<span class="string">"chapter13.Groups"</span>);</span><br><span class="line">            Method[] methods = c.getMethods();</span><br><span class="line">            Constructor[] ctors = c.getConstructors();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Method method : methods)</span><br><span class="line">print(</span><br><span class="line">p.matcher(method.toString()).replaceAll(<span class="string">""</span>));</span><br><span class="line"><span class="keyword">for</span> (Constructor ctor : ctors)</span><br><span class="line">print(p.matcher(ctor.toString()).replaceAll(<span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">print(<span class="string">"No such class: "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     public static void main(String[])</span></span><br><span class="line"><span class="comment">     public final void wait() throws InterruptedException</span></span><br><span class="line"><span class="comment">     public final void wait(long,int) throws InterruptedException</span></span><br><span class="line"><span class="comment">     public final native void wait(long) throws InterruptedException</span></span><br><span class="line"><span class="comment">     public boolean equals(Object)</span></span><br><span class="line"><span class="comment">     public String toString()</span></span><br><span class="line"><span class="comment">     public native int hashCode()</span></span><br><span class="line"><span class="comment">     public final native Class getClass()</span></span><br><span class="line"><span class="comment">     public final native void notify()</span></span><br><span class="line"><span class="comment">     public final native void notifyAll()</span></span><br><span class="line"><span class="comment">     public Groups()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>使用代理角色来操作真实角色，并对外声明统一接口。</p><p>比如说操作数据库，我们可以声明代理类，实现数据库的增删改查操作。</p><p>所谓代理模式就是让使用者与真实对象耦合开来，使用代理者来做中间沟通。比如说一个消费者购买商品，其中商店就是代理者，生产商就是真实对象，但消费者和生产商其实并没有联系。</p><p>真实角色和代理角色继承同一个接口，代理角色调用真实角色，使用者调用真实角色。</p><h3 id="反射修改"><a href="#反射修改" class="headerlink" title="反射修改"></a>反射修改</h3><p>人类已经无法阻止反射了。。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用method方法</span></span><br><span class="line">Method g = a.getClass().getDeclaredMethod(methodname);</span><br><span class="line">g.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">g.invoke(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改field值</span></span><br><span class="line">Field f = pf.getClass().getDeclaredField(fieldname);</span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">f.set(pf,<span class="string">""</span>);<span class="comment">// or</span></span><br><span class="line">f.setInt(pf,<span class="number">233</span>);</span><br></pre></td></tr></table></figure></p><p>但final域是安全的，不会遭到修改。</p><h2 id="第十五章（泛型）"><a href="#第十五章（泛型）" class="headerlink" title="第十五章（泛型）"></a>第十五章（泛型）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>泛型的核心概念：告诉编译器想使用什么类型，然后编译器帮你处理一切细节。</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>利用泛型创建元组，可以将一组对象直接打包存储于其中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoTuple</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoTuple</span><span class="params">(A a, B b)</span> </span>&#123;</span><br><span class="line">        first = a;</span><br><span class="line">        second = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span> + first + <span class="string">", "</span> + second + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以使用继承机制实现长度更长的元组。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeTuple</span>&lt;<span class="title">A</span>,<span class="title">B</span>,<span class="title">C</span>&gt; <span class="keyword">extends</span> <span class="title">TwoTuple</span>&lt;<span class="title">A</span>,<span class="title">B</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> C third;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreeTuple</span><span class="params">(A a, B b, C c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(a, b);</span><br><span class="line">        third = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span> + first + <span class="string">", "</span> + second + <span class="string">", "</span> + third +<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="局限1"><a href="#局限1" class="headerlink" title="局限1"></a>局限1</h3><p>基本类型不能作为泛型的类型参数</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局限2-擦除"><a href="#局限2-擦除" class="headerlink" title="局限2-擦除"></a>局限2-擦除</h3><p>在泛型代码内部，无法获得任何有关泛型参数类型的信息。<br>在c++中，当模板被实例化时，模板代码知道其模板参数的类型。java泛型由于擦除局限存在无法做到，所以必须利用&lt;? extends &gt;来限定边界以便实现。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">Manipulator</span> &#123;</span></span><br><span class="line">  T obj;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Manipulator(T x) &#123; obj = x; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">manipulate</span><span class="params">()</span> </span>&#123; obj.f(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasF</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"HasF::f()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  HasF hf;</span><br><span class="line">  Manipulator&lt;HasF&gt; manipulator(hf);</span><br><span class="line">  manipulator.manipulate();</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">HasF::f()</span></span><br><span class="line"><span class="comment">///:~</span></span><br></pre></td></tr></table></figure></p><p>在java中实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manipulator2</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">HasF</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> T obj;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Manipulator2</span><span class="params">(T x)</span> </span>&#123; obj = x; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manipulate</span><span class="params">()</span> </span>&#123; obj.f(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>“?”代表未知类型</p><p>extends关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</p><p>super关键字声明了类型的下界，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至Object</p><h3 id="参数化接口"><a href="#参数化接口" class="headerlink" title="参数化接口"></a>参数化接口</h3><p>一个类不能实现同一个泛型接口的两种泛型，由于擦除的特性，这两个接口变体会被视为相同的接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: generics/MultipleInterfaceVariants.java</span></span><br><span class="line"><span class="comment">// &#123;CompileTimeError&#125; (Won't compile)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Payable</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Payable</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hourly</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">Payable</span>&lt;<span class="title">Hourly</span>&gt; </span>&#123;&#125; <span class="comment">///:~</span></span><br></pre></td></tr></table></figure></p><p>同时重载，转型等也会受到影响。</p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ol><li><p>又名包装(Wrapper)模式，装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。</p></li><li><p>装饰模式以对客户端透明的方式动态的给一个对象附加上更多的责任。换言之客户端并不会觉的对象在装饰前和装饰后有什么区别。</p></li><li><p>装饰模式可以在不创造更多的子类的模式下，将对象的功能加以扩展。</p></li><li><p>装饰模式与类继承的区别：</p><p>  4-1. 装饰模式是一种动态行为，对已经存在类进行随意组合，而类的继承是一种静态的行为，一个类定义成什么样的，该类的对象便具有什么样的功能，无法动态的改变。</p><p>  4-2.  装饰模式扩展的是对象的功能，不需要增加类的数量，而类继承扩展是类的功能，在继承的关系中，如果我们想增加一个对象的功能，我们只能通过继承关系，在子类中增加两个方法。</p><p>  4-3. 装饰模式是在不改变原类文件和使用继承的情况下，动态的扩展一个对象的功能，它是通过创建一个包装对象，也就是装饰来包裹真是的对象。</p></li><li><p>装饰模式把对客户端的调用委派给被装饰的类，装饰模式的关键在于这种扩展完全透明的。</p></li></ol><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>1．　装饰对象和真实对象具有相同的接口，这样客户端对象就可以以真实对象的相同的方式和装饰对象交互。</p><p>2．　装饰对象包含一个真实对象的引用(reference).</p><p>3．　装饰对象接受所有来自客户端的请求，它把这些请求转发给真实的对象。</p><p>4．  装饰对象可以在转发这些请求以前或者以后增加一些附加的功能。这样就能确保在运行时，不用修改给定对象结构就可以在外部增加附加的功能。在面向对象的程序设计中，通常是使用继承的关系来扩展给定类的功能。</p><p><strong>tip:使用代理模式，代理和真实对象之间的的关系通常在编译时就已经确定了，而装饰者能够在运行时递归地被构造。</strong></p><h3 id="潜在类型机制"><a href="#潜在类型机制" class="headerlink" title="潜在类型机制"></a>潜在类型机制</h3><p>上面说到的c++在编译时期检查参数类型，以及python运行时期检查参数类型，所以可以判断类型。这就形成了潜在类型机制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Arf!"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Sitting"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reproduce</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> “Click!”;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Clank"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oilChange</span><span class="params">(self)</span></span></span><br><span class="line"><span class="function">        <span class="title">pass</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">perform</span><span class="params">(anything)</span>:</span></span><br><span class="line">    anything.speak()</span><br><span class="line">    anything.sit()</span><br><span class="line">    </span><br><span class="line">a = Dog()</span><br><span class="line">b = Robot()</span><br><span class="line">perform(a)</span><br><span class="line">perform(b)</span><br></pre></td></tr></table></figure></p><h2 id="第十六章（数组）"><a href="#第十六章（数组）" class="headerlink" title="第十六章（数组）"></a>第十六章（数组）</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>数组是一个简单的线性序列，访问速度快，但数组对象的大小被固定。</p><p>数组的初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BerylliumSphere[] a; <span class="comment">// Local uninitialized variable</span></span><br><span class="line">a = <span class="keyword">new</span> BerylliumSphere[]&#123;</span><br><span class="line">        <span class="keyword">new</span> BerylliumSphere(), <span class="keyword">new</span> BerylliumSphere(),&#125;;</span><br><span class="line">BerylliumSphere[] b = <span class="keyword">new</span> BerylliumSphere[<span class="number">5</span>];</span><br><span class="line">BerylliumSphere[] d = &#123;<span class="keyword">new</span> BerylliumSphere(),</span><br><span class="line">        <span class="keyword">new</span> BerylliumSphere(), <span class="keyword">new</span> BerylliumSphere()&#125;;</span><br></pre></td></tr></table></figure></p><p>对象数组保存的是引用，基本类型数组是直接保存基本类型的值。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>粗糙数组：数组中构成矩阵的每个向量都可以具有任意的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RaggedArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">        <span class="comment">// 3-D array with varied-length vectors:</span></span><br><span class="line">        <span class="keyword">int</span>[][][] a = <span class="keyword">new</span> <span class="keyword">int</span>[rand.nextInt(<span class="number">7</span>)][][];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = <span class="keyword">new</span> <span class="keyword">int</span>[rand.nextInt(<span class="number">5</span>)][];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length; j++)</span><br><span class="line">                a[i][j] = <span class="keyword">new</span> <span class="keyword">int</span>[rand.nextInt(<span class="number">5</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(Arrays.deepToString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">[[], [[0], [0], [0, 0, 0, 0]], [[], [0, 0], [0, 0]], [[0, 0, 0], [0], [0, 0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0], []], [[0], [], [0]]]</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### deepToString</span><br><span class="line">Arrays.deepTotring()可以输出数组，对象数组和基本类型数组都其作用。</span><br><span class="line"></span><br><span class="line">### fill()</span><br><span class="line">Arrays.fill() 可以用数字填充数组。</span><br><span class="line"></span><br><span class="line">### 常用数组操作</span><br><span class="line">* **System.arraycopy()** 用于复制数组，注意这只是浅复制。</span><br><span class="line">* **Arrays.equals()** 用来比较数组是否相等，两者个数不仅相等，且每个位置上的每个元素都要相等。</span><br><span class="line">* **Comparable** 利用此接口进行比较，compareTo()方法中，当前对象小于参数返回负值，等于返回零。</span><br><span class="line">* **Arrays.sort()** 进行排序，前提是数组内对象实现了Comparable 接口。使用内置的排序方法，可以对任意的基本类型数组排序。</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringSorting</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] sa = Generated.array(<span class="keyword">new</span> String[<span class="number">20</span>],</span><br><span class="line">      <span class="keyword">new</span> RandomGenerator.String(<span class="number">5</span>));</span><br><span class="line">    print(<span class="string">"Before sort: "</span> + Arrays.toString(sa));</span><br><span class="line">    Arrays.sort(sa);<span class="comment">//字典排序，大写排在小写前面</span></span><br><span class="line">    print(<span class="string">"After sort: "</span> + Arrays.toString(sa));</span><br><span class="line">    Arrays.sort(sa, Collections.reverseOrder());<span class="comment">//反向</span></span><br><span class="line">    print(<span class="string">"Reverse sort: "</span> + Arrays.toString(sa));</span><br><span class="line">    Arrays.sort(sa, String.CASE_INSENSITIVE_ORDER);忽略大小写</span><br><span class="line">    print(<span class="string">"Case-insensitive sort: "</span> + Arrays.toString(sa));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Arrays.binarySearch()</strong> 排序后才可以使用该方法进行快速查找。找到目标返回值，大于等于零，否则返回负值。负值 = -（插入点）-1；<br>若使用了自定义的Comparable,则需要将Comparable作为参数传入方法中。</p><p><strong>优先使用容器而不是数组</strong></p><h2 id="第十七章（容器深入研究）"><a href="#第十七章（容器深入研究）" class="headerlink" title="第十七章（容器深入研究）"></a>第十七章（容器深入研究）</h2><p><img src="http://images.cnitblog.com/blog/685583/201411/091813238311297.png" alt="java容器"></p><p>除此以外还添加了 queue , ConcurrentMap  接口以及相应实现的 <strong>PriorityQueue</strong>,<strong>BlockingQueue</strong> 和 <strong>ConcurrentHashMap</strong>等容器。<br>同时在 <strong>Collections</strong> 类中有着对容器进行操作方便的方法。</p><p>Collection是集合类的上级接口，子接口主要有Set 和List、Map。Collections是针对集合类的一个帮助类，提供了操作集合的工具方法：一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>retainAll()方法:取得两个List的交集<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list1.add(<span class="string">"g"</span>);</span><br><span class="line">list1.add(<span class="string">"s"</span>);</span><br><span class="line">list1.add(<span class="string">"a"</span>);</span><br><span class="line">list1.add(<span class="string">"f"</span>);</span><br><span class="line">list2.add(<span class="string">"g"</span>);</span><br><span class="line">list2.add(<span class="string">"c"</span>);</span><br><span class="line">list2.add(<span class="string">"b"</span>);</span><br><span class="line">list2.add(<span class="string">"a"</span>);</span><br><span class="line">list1.retainAll(list2);</span><br><span class="line">System.out.print(list1);</span><br><span class="line"><span class="comment">//[g, a]</span></span><br></pre></td></tr></table></figure></p><p><code>ListIterator.add()</code>方法<br>把新元素插入由next()所返回的那个元素之前，previous()所返回的元素之后<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; alpha = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">alpha.add(<span class="string">"a"</span>);</span><br><span class="line">alpha.add(<span class="string">"b"</span>);</span><br><span class="line">alpha.add(<span class="string">"c"</span>);</span><br><span class="line">alpha.add(<span class="string">"d"</span>);</span><br><span class="line">alpha.add(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">ListIterator&lt;String&gt; listIterator = alpha.listIterator();</span><br><span class="line">listIterator.next();</span><br><span class="line">listIterator.add(<span class="string">"1"</span>);</span><br><span class="line">listIterator.add(<span class="string">"2"</span>);</span><br><span class="line">System.out.println(alpha.toString());</span><br><span class="line">listIterator.next();</span><br><span class="line">listIterator.add(<span class="string">"3"</span>);</span><br><span class="line">System.out.println(alpha.toString())</span><br></pre></td></tr></table></figure></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>存入 Set 的每个元素都必须是唯一的，因为Set不保存重复元素。加入Set的元素必须定义equal()方法以确保对象的唯一性。<br><code>HashSet</code> 为快速查找而设计的Set,存入HashSet的元素必须定义hashCode()<br><code>TreeSet</code> 保持次序的Set,底层为树结构，使用它可以从Set中提取有序的序列，元素必须实现Comparable接口<br><code>LinkedHashSet</code> 具有HashSet的查询速度，且内部使用链表维护元素的顺序，元素也必须定义hashCode()方法</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p><code>LinkedList</code> 和 <code>PriorityQueue</code><br>其他的还有<br><code>ArrayBlockingQueue</code>,<code>ConcurrentLinkedQueue</code>,<code>LinkedBlockingQueue</code>,<code>PriorityBlockingQueue</code>。</p><p>优先级队列<code>PriorityQueue</code> 需要元素继承 Comparable 接口。返回+,表示被比较的排在当前的后面，0表示相等，返回-则相反</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map中最重要的是用散列码代替对象的int值，散列表是通过将对象的某些信息进行转换而生成。hashCode()是根类Object中的方法，而HashMap就是使用对象的hashCode()进行快速查询。<br>任何键都必须具有一个equals()方法，如果键被用于散列Map,则必须具有恰当的hashCode()方法，如果用于TreeMap，还必须实现Compareable。</p><p><strong>注意</strong>：基本常量，特别是new String()，看上去像是生成了一个新的对象，但内存地址可能是一样的。</p><p>通过一个特定容量的数组来保存键，但不是保存键本身，而是通过键对象生成的一个数字，将这个数字作为数组的下标，而数组本身是保存值的list。这样我们就可以通过键对象的hashCode获得数组的下标，根据下标找到保存在数组里值list的位置，再通过对象的equals方法去线性比较list的值。</p><h3 id="容器选择"><a href="#容器选择" class="headerlink" title="容器选择"></a>容器选择</h3><p>ArrayList便于查询，内部使用数组实现。因为增加的时候会涉及到扩容，会导致数值的复制操作所以效率低。<br>LinkedList便于增加和删除</p><p>HashSet的性能基本上总是比TreeSet好，特别是添加和查询元素时，而需要排序功能时才会考虑使用TreeSet</p><p>HashMap是第一选择，需要排序时使用TreeMap,而需要保持插入顺序时使用LinkedHashMap</p><p><code>负载因子</code> 尺寸/容量</p><h3 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line"><span class="comment">//其他容器同理</span></span><br></pre></td></tr></table></figure><p>直接将新生成的容器容器传递给了适当的“同步”方法，这样就不会有任何机会暴露出不同步的版本。</p><h3 id="持有引用"><a href="#持有引用" class="headerlink" title="持有引用"></a>持有引用</h3><p>普通的引用即为强引用，GC不会回收。</p><p><strong>SoftReference</strong><br>软引用是当内存不足时GC回收，构建缓存系统</p><p><strong>WeakReference</strong><br>弱引用是每次GC时都会回收，减少人工清理引用<br>WeakHashMap被用来保存weakReference</p><p>虚引用在监视垃圾回收时使用</p><h2 id="第十八章（Java-IO-系统）"><a href="#第十八章（Java-IO-系统）" class="headerlink" title="第十八章（Java IO 系统）"></a>第十八章（Java IO 系统）</h2><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p><strong>File 不仅代表一个特定文件的名称，也能代表一个目录下的一组文件的名称</strong></p><p>File的list()方法可以传入 <code>FilenameFilter()</code>对文件进行筛选。<br>renameTo()用来把一个文件重命名（或移动）到由参数所指示的另一个完全不同的新路径（也就是另一个File对象）下面。<br>mkdirs()可以产生任意复杂的目录路径。</p><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><div class="table-container"><table><thead><tr><th>字节流类</th><th>功能简单介绍</th></tr></thead><tbody><tr><td>DataInputStream</td><td>包含了读取Java标准数据类型的输入流</td></tr><tr><td>DataOutputStream</td><td>包含了写Java标准数据类型的输出流</td></tr><tr><td>ByteArrayInputStream</td><td>从字节数组读取的输入流</td></tr><tr><td>ByteArrayOutputStream</td><td>写入字节数组的输出流</td></tr><tr><td>FileInputStream</td><td>从文件读入的输入流</td></tr><tr><td>FileOutputStream</td><td>写入文件的输出流</td></tr><tr><td>PrintStream</td><td>包含最常见的Print（）和Println（）的输出流</td></tr><tr><td>PushbackInputStream</td><td>返回一个字节到输入流，主要用于编译器的实现</td><td></td><td>PipedInputStream</td><td>输出管道</td></tr><tr><td>PipedOutputStream</td><td>输入管道</td></tr><tr><td>SequenceInputStream</td><td>将n个输入流联合起来，一个接一个按一定顺序读取</td></tr><tr><td>RandomAccessFile</td><td>随机访问文件</td></tr><tr><td>BufferInputStream</td><td>缓冲输入流</td></tr><tr><td>BufferOutputStream</td><td>缓冲输出流</td></tr><tr><td>FilterInputStream</td><td>实现了InputStream Interface</td></tr><tr><td>FilterOutputStream</td><td>实现了OutputStream Interface</td></tr><tr><td>InputStream</td><td>抽象类，描述流的输入</td></tr><tr><td>OutputStream</td><td>抽象类，描述流的输入</td></tr></tbody></table></div><h3 id="使用RandomAccessFile写入文件"><a href="#使用RandomAccessFile写入文件" class="headerlink" title="使用RandomAccessFile写入文件"></a>使用RandomAccessFile写入文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fileName=<span class="string">"D:"</span>+File.separator+<span class="string">"hello.txt"</span>;</span><br><span class="line">        File f=<span class="keyword">new</span> File(fileName);</span><br><span class="line">        RandomAccessFile demo=<span class="keyword">new</span> RandomAccessFile(f,<span class="string">"rw"</span>);</span><br><span class="line">        demo.writeBytes(<span class="string">"asdsad"</span>);</span><br><span class="line">        demo.writeInt(<span class="number">12</span>);</span><br><span class="line">        demo.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">        demo.writeChar(<span class="string">'A'</span>);</span><br><span class="line">        demo.writeFloat(<span class="number">1.21f</span>);</span><br><span class="line">        demo.writeDouble(<span class="number">12.123</span>);</span><br><span class="line">        demo.close();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="关于字节流和字符流的区别"><a href="#关于字节流和字符流的区别" class="headerlink" title="关于字节流和字符流的区别"></a>关于字节流和字符流的区别</h3><p>实际上字节流在操作的时候本身是不会用到缓冲区的，是文件本身的直接操作的，但是字符流在操作的 时候下后是会用到缓冲区的，是通过缓冲区来操作文件的。</p><p>读者可以试着将上面的字节流和字符流的程序的最后一行关闭文件的代码注释掉，然后运行程序看看。你就会发现使用字节流的话，文件中已经存在内容，但是使用字符流的时候，文件中还是没有内容的，这个时候就要刷新缓冲区。</p><h3 id="OutputStreramWriter-和-InputStreamReader"><a href="#OutputStreramWriter-和-InputStreamReader" class="headerlink" title="OutputStreramWriter 和 InputStreamReader"></a>OutputStreramWriter 和 InputStreamReader</h3><p>OutputStreramWriter将输出的字符流转化为字节流<br>InputStreamReader将输入的字节流转换为字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字节输出流转化为字符输出流</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fileName= <span class="string">"d:"</span>+File.separator+<span class="string">"hello.txt"</span>;</span><br><span class="line">        File file=<span class="keyword">new</span> File(fileName);</span><br><span class="line">        Writer out=<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        out.write(<span class="string">"cpacm"</span>);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fileName= <span class="string">"d:"</span>+File.separator+<span class="string">"hello.txt"</span>;</span><br><span class="line">        File file=<span class="keyword">new</span> File(fileName);</span><br><span class="line">        Reader read=<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        <span class="keyword">char</span>[] b=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> len=read.read(b);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));</span><br><span class="line">        read.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SequenceInputStream"><a href="#SequenceInputStream" class="headerlink" title="SequenceInputStream"></a>SequenceInputStream</h3><p>SequenceInputStream主要用来将2个流合并在一起，比如将两个txt中的内容合并为另外一个txt。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并流</span></span><br><span class="line">SequenceInputStream sis = <span class="keyword">new</span> SequenceInputStream(input1, input2);</span><br></pre></td></tr></table></figure></p><h3 id="java内部执行其他操作系统的程序"><a href="#java内部执行其他操作系统的程序" class="headerlink" title="java内部执行其他操作系统的程序"></a>java内部执行其他操作系统的程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSExecute</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> err = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Process process =</span><br><span class="line">        <span class="keyword">new</span> ProcessBuilder(command.split(<span class="string">" "</span>)).start();</span><br><span class="line">      BufferedReader results = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">        <span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">      String s;</span><br><span class="line">      <span class="keyword">while</span>((s = results.readLine())!= <span class="keyword">null</span>)</span><br><span class="line">        System.out.println(s);</span><br><span class="line">      BufferedReader errors = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">        <span class="keyword">new</span> InputStreamReader(process.getErrorStream()));</span><br><span class="line">      <span class="comment">// Report errors and return nonzero value</span></span><br><span class="line">      <span class="comment">// to calling process if there are problems:</span></span><br><span class="line">      <span class="keyword">while</span>((s = errors.readLine())!= <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(s);</span><br><span class="line">        err = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">      <span class="comment">// Compensate for Windows 2000, which throws an</span></span><br><span class="line">      <span class="comment">// exception for the default command line:</span></span><br><span class="line">      <span class="keyword">if</span>(!command.startsWith(<span class="string">"CMD /C"</span>))</span><br><span class="line">        command(<span class="string">"CMD /C "</span> + command);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(err)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> OSExecuteException(<span class="string">"Errors executing "</span> +</span><br><span class="line">        command);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">///:~</span></span><br></pre></td></tr></table></figure><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p><strong>通道</strong> 和 <strong>缓冲区</strong> 是 NIO 中的核心对象<br>通道是对原 I/O 包中的流的模拟。到任何目的地(或来自任何地方)的所有数据都必须通过一个 Channel 对象。一个 Buffer 实质上是一个容器对象。发送给一个通道的所有对象都必须首先放到缓冲区中；同样地，从通道中读取的任何数据都要读到缓冲区中。通道与流的不同之处在于通道是双向的。而流只是在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)， 而 通道 可以用于读、写或者同时用于读写。<br>唯一直接与通道交互的缓冲器是ByteBuffer。<br>在<code>FileInputStream</code>,<code>FileOutputStream</code>和<code>RandomAccessFile</code>这三个类中修改，用于产生FileChannel.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Write a file:</span></span><br><span class="line">   FileChannel fc =</span><br><span class="line">     <span class="keyword">new</span> FileOutputStream(<span class="string">"data.txt"</span>).getChannel();</span><br><span class="line">   fc.write(ByteBuffer.wrap(<span class="string">"Some text "</span>.getBytes()));</span><br><span class="line">   fc.close();</span><br><span class="line">   <span class="comment">// Add to the end of the file:</span></span><br><span class="line">   fc =</span><br><span class="line">     <span class="keyword">new</span> RandomAccessFile(<span class="string">"data.txt"</span>, <span class="string">"rw"</span>).getChannel();</span><br><span class="line">   fc.position(fc.size()); <span class="comment">// Move to the end</span></span><br><span class="line">   fc.write(ByteBuffer.wrap(<span class="string">"Some more"</span>.getBytes()));</span><br><span class="line">   fc.close();</span><br><span class="line">   <span class="comment">// Read the file:</span></span><br><span class="line">   fc = <span class="keyword">new</span> FileInputStream(<span class="string">"data.txt"</span>).getChannel();</span><br><span class="line">   ByteBuffer buff = ByteBuffer.allocate(BSIZE);</span><br><span class="line">   fc.read(buff);</span><br><span class="line">   buff.flip();</span><br><span class="line">   <span class="keyword">while</span>(buff.hasRemaining())</span><br><span class="line">     System.out.print((<span class="keyword">char</span>)buff.get());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>当 buffer 一旦被通道存储数据，就要调用flip()方法做好被读取的准备。<br>clear() 方法重设缓冲区，使它可以接受读入的数据。 flip() 方法让缓冲区可以将新读入的数据写入另一个通道。 </p><p>使用<strong>transferTo</strong>和<strong>transferFrom</strong>来将两个通道相通。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BSIZE = <span class="number">1024</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ByteBuffer bb = ByteBuffer.allocate(BSIZE);</span><br><span class="line">    <span class="comment">// Allocation automatically zeroes the ByteBuffer:</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i++ &lt; bb.limit())</span><br><span class="line">      <span class="keyword">if</span>(bb.get() != <span class="number">0</span>)</span><br><span class="line">        print(<span class="string">"nonzero"</span>);</span><br><span class="line">    print(<span class="string">"i = "</span> + i);</span><br><span class="line">    bb.rewind();</span><br><span class="line">    <span class="comment">// Store and read a char array:</span></span><br><span class="line">    bb.asCharBuffer().put(<span class="string">"Howdy!"</span>);</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>((c = bb.getChar()) != <span class="number">0</span>)</span><br><span class="line">      printnb(c + <span class="string">" "</span>);</span><br><span class="line">    print();</span><br><span class="line">    bb.rewind();</span><br><span class="line">    <span class="comment">// Store and read a short:</span></span><br><span class="line">    bb.asShortBuffer().put((<span class="keyword">short</span>)<span class="number">471142</span>);</span><br><span class="line">    print(bb.getShort());</span><br><span class="line">    bb.rewind();</span><br><span class="line">    <span class="comment">// Store and read an int:</span></span><br><span class="line">    bb.asIntBuffer().put(<span class="number">99471142</span>);</span><br><span class="line">    print(bb.getInt());</span><br><span class="line">    bb.rewind();</span><br><span class="line">    <span class="comment">// Store and read a long:</span></span><br><span class="line">    bb.asLongBuffer().put(<span class="number">99471142</span>);</span><br><span class="line">    print(bb.getLong());</span><br><span class="line">    bb.rewind();</span><br><span class="line">    <span class="comment">// Store and read a float:</span></span><br><span class="line">    bb.asFloatBuffer().put(<span class="number">99471142</span>);</span><br><span class="line">    print(bb.getFloat());</span><br><span class="line">    bb.rewind();</span><br><span class="line">    <span class="comment">// Store and read a double:</span></span><br><span class="line">    bb.asDoubleBuffer().put(<span class="number">99471142</span>);</span><br><span class="line">    print(bb.getDouble());</span><br><span class="line">    bb.rewind();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">i = 1025</span></span><br><span class="line"><span class="comment">H o w d y !</span></span><br><span class="line"><span class="comment">12390</span></span><br><span class="line"><span class="comment">99471142</span></span><br><span class="line"><span class="comment">99471142</span></span><br><span class="line"><span class="comment">9.9471144E7</span></span><br><span class="line"><span class="comment">9.9471142E7</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure><p>向ByteBuffer插入基本类型数据最简单的方法：利用asCharBuffer()、asShortBuffer等获得该缓冲器上的视图，然后使用视图的put()方法，此适用于所有基本数据类型。（short要进行类型转换）。</p><p>具体详情：<br><a href="http://www.ibm.com/developerworks/cn/education/java/j-nio/index.html" target="_blank" rel="noopener">NIO</a></p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p><strong>Externalizable</strong>  可用来代替实现 <strong>Serializable</strong> 接口——对序列化过程进行控制。这个 <strong>Externalizable</strong> 接口继承了 <strong>Serializable</strong> 接口，同时增添了两个方法：<code>writeExternal()</code> 和 <code>readExternal()</code>。<br>对于<strong>Serializable</strong>对象，对象完全以它存储的二进制位为基础来构造，而不调用构造器。而对于一个<strong>Externalizable</strong>对象，所有普通的默认构造器都会被调用（包括在字段定义时的初始化），然后调用<code>readExternal()</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blip</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"blip construct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blip</span><span class="params">(<span class="keyword">int</span> i, String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"blip construct with i and s"</span>);</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"blip writeExternal"</span>);</span><br><span class="line">        out.writeInt(i);</span><br><span class="line">        out.writeObject(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"blip readExternal"</span>);</span><br><span class="line">        i = in.readInt();</span><br><span class="line">        s = (String) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Blip blip = <span class="keyword">new</span> Blip(<span class="number">1</span>, <span class="string">"blip"</span>);</span><br><span class="line">        System.out.println(blip);</span><br><span class="line">        ObjectOutputStream o = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"blip.out"</span>));</span><br><span class="line">        o.writeObject(blip);</span><br><span class="line">        o.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"blip.out"</span>));</span><br><span class="line">        Blip blip2 = (Blip) in.readObject();</span><br><span class="line">        System.out.println(blip2);</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：</span></span><br><span class="line"><span class="comment">    blip construct with i and s</span></span><br><span class="line"><span class="comment">    blip1</span></span><br><span class="line"><span class="comment">    blip writeExternal</span></span><br><span class="line"><span class="comment">    blip construct</span></span><br><span class="line"><span class="comment">    blip readExternal</span></span><br><span class="line"><span class="comment">    blip1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在<code>writeExternal()</code> 和 <code>readExternal()</code>两个方法中数据写入和数据读取的顺序要一致，否则会报<code>OptionalDataException</code>异常</p></blockquote><p>可以实现Serializable接口，并添加 <strong>writeObjct()</strong> 和<strong>readObject</strong>两个方法（即Externalizable接口下的两个方法），这样一旦对象被序列化或被反序列化还原就会自动地分别调用这两个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream stream)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(OjectInputStream stream)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span></span><br></pre></td></tr></table></figure></p><p>在调用ObjectOutputStream.writeObject()时，会检查所传递的Serializable对象，看看是否实现了它自己的writeObject()。如果是这样，就跳过正常的序列化过程并调用它的writeObject()，readObject()同理。<br>在你的writeObject()内部，可以调用defaultWriteObject()来选择执行默认的writeObject()，此时就等同于常规下的Serializable</p><h3 id="transient-瞬时-关键字"><a href="#transient-瞬时-关键字" class="headerlink" title="transient (瞬时)关键字"></a>transient (瞬时)关键字</h3><p>用于控制某个特定子对象不想让Java的序列化机制自动保存于恢复。<br>比如说一个用户对象的密码字段不想被序列化保存下来就可以使用 transient 来声明该字段。</p><h3 id="使用“持久化”"><a href="#使用“持久化”" class="headerlink" title="使用“持久化”"></a>使用“持久化”</h3><p>只要将任何对象序列化到单一流中，就可以恢复出与之前写出时一样的对象网，并不会出现重复的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> House preferredHouse;</span><br><span class="line">  Animal(String nm, House h) &#123;</span><br><span class="line">    name = nm;</span><br><span class="line">    preferredHouse = h;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">"["</span> + <span class="keyword">super</span>.toString() +</span><br><span class="line">      <span class="string">"], "</span> + preferredHouse + <span class="string">"\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    House house = <span class="keyword">new</span> House();</span><br><span class="line">    List&lt;Animal&gt; animals = <span class="keyword">new</span> ArrayList&lt;Animal&gt;();</span><br><span class="line">    animals.add(<span class="keyword">new</span> Animal(<span class="string">"Bosco the dog"</span>, house));</span><br><span class="line">    animals.add(<span class="keyword">new</span> Animal(<span class="string">"Ralph the hamster"</span>, house));</span><br><span class="line">    animals.add(<span class="keyword">new</span> Animal(<span class="string">"Molly the cat"</span>, house));</span><br><span class="line">    print(<span class="string">"animals: "</span> + animals);</span><br><span class="line">    ByteArrayOutputStream buf1 =</span><br><span class="line">      <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream o1 = <span class="keyword">new</span> ObjectOutputStream(buf1);</span><br><span class="line">    o1.writeObject(animals);</span><br><span class="line">    o1.writeObject(animals); <span class="comment">// Write a 2nd set</span></span><br><span class="line">    <span class="comment">// Write to a different stream:</span></span><br><span class="line">    ByteArrayOutputStream buf2 =</span><br><span class="line">      <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream o2 = <span class="keyword">new</span> ObjectOutputStream(buf2);</span><br><span class="line">    o2.writeObject(animals);</span><br><span class="line">    <span class="comment">// Now get them back:</span></span><br><span class="line">    ObjectInputStream in1 = <span class="keyword">new</span> ObjectInputStream(</span><br><span class="line">      <span class="keyword">new</span> ByteArrayInputStream(buf1.toByteArray()));</span><br><span class="line">    ObjectInputStream in2 = <span class="keyword">new</span> ObjectInputStream(</span><br><span class="line">      <span class="keyword">new</span> ByteArrayInputStream(buf2.toByteArray()));</span><br><span class="line">    List</span><br><span class="line">      animals1 = (List)in1.readObject(),</span><br><span class="line">      animals2 = (List)in1.readObject(),</span><br><span class="line">      animals3 = (List)in2.readObject();</span><br><span class="line">    print(<span class="string">"animals1: "</span> + animals1);</span><br><span class="line">    print(<span class="string">"animals2: "</span> + animals2);</span><br><span class="line">    print(<span class="string">"animals3: "</span> + animals3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output: (Sample)</span></span><br><span class="line"><span class="comment">animals: [Bosco the dog[Animal@addbf1], House@42e816</span></span><br><span class="line"><span class="comment">, Ralph the hamster[Animal@9304b1], House@42e816</span></span><br><span class="line"><span class="comment">, Molly the cat[Animal@190d11], House@42e816</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">animals1: [Bosco the dog[Animal@de6f34], House@156ee8e</span></span><br><span class="line"><span class="comment">, Ralph the hamster[Animal@47b480], House@156ee8e</span></span><br><span class="line"><span class="comment">, Molly the cat[Animal@19b49e6], House@156ee8e</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">animals2: [Bosco the dog[Animal@de6f34], House@156ee8e</span></span><br><span class="line"><span class="comment">, Ralph the hamster[Animal@47b480], House@156ee8e</span></span><br><span class="line"><span class="comment">, Molly the cat[Animal@19b49e6], House@156ee8e</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">animals3: [Bosco the dog[Animal@10d448], House@e0e1c6</span></span><br><span class="line"><span class="comment">, Ralph the hamster[Animal@6ca1c], House@e0e1c6</span></span><br><span class="line"><span class="comment">, Molly the cat[Animal@1bf216a], House@e0e1c6</span></span><br><span class="line"><span class="comment">]</span></span><br></pre></td></tr></table></figure></p><p><strong>Java序列化是不能序列化static变量的，因为其保存的是对象的状态，而static变量保存在全局数据区，在对象未实例化时就已经生成，属于类的状态。</strong></p><h2 id="第十九章（枚举类型）"><a href="#第十九章（枚举类型）" class="headerlink" title="第十九章（枚举类型）"></a>第十九章（枚举类型）</h2><p><strong>在Android避免使用Enum，因为与静态常量相比，它对内存的占用要大很多。</strong></p><h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><p><code>values()</code>方法是由编译器插入到enum定义的static方法(同时还有<code>valueof()</code>方法)，所以若将enum实例向上转型为Enum,那么values方法就不可访问。不过，在Class中有一个<code>getEnumConstants()</code>方法，即使Enum接口中没有<code>values()</code>方法，我们仍可以通过Class对象取得所有enum实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpcastEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Sample&#123;TEXT,CONTENT&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Sample[] samples = Sample.values();</span></span><br><span class="line">        Enum e = Sample.TEXT;</span><br><span class="line">        <span class="keyword">for</span>(Enum en :e.getClass().getEnumConstants())&#123;</span><br><span class="line">            System.out.println(en);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出：</span></span><br><span class="line"><span class="comment">    TEXT</span></span><br><span class="line"><span class="comment">    CONTENT</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然对于不是枚举的类调用此方法只会返回null.</p><h3 id="Enum-泛型使用示例"><a href="#Enum-泛型使用示例" class="headerlink" title="Enum 泛型使用示例"></a>Enum 泛型使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enums</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">random</span><span class="params">(Class&lt;T&gt; ec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random(ec.getEnumConstants());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">random</span><span class="params">(T[] values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> values[random.nextInt(values.length)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Activity &#123;create, start, resume, pause, stop, destroy&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(Enums.random(Activity.class) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出：resume destroy start destroy start destroy stop resume create start</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在一个接口的内部，创建实现该接口的枚举，以此将元素进行分组，可以达到将枚举元素分类组织的目的。</p></blockquote><h3 id="EnumSet-和-EnumMap"><a href="#EnumSet-和-EnumMap" class="headerlink" title="EnumSet 和 EnumMap"></a>EnumSet 和 EnumMap</h3><p>Enum能说明一个二进制是否存在时，具有更好的表达能力。<br>EnumSet的基础是long,一个long值有64位，而一个enum实例只需一位bit表示其是否存在。</p><p>EnumMap要求其中的key必须来自一个enum ,EnumMap 内部由数组实现。</p><h2 id="第二十章（注解）"><a href="#第二十章（注解）" class="headerlink" title="第二十章（注解）"></a>第二十章（注解）</h2><p><strong>注解（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便的使用这些数据。</strong></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserCase &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> "no description"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Target</code> 用来定义你的注解将应用于什么地方，<br><code>@Rectetion</code>用来定义该注解在哪一个级别可用，在源代码（SOURCE）、类文件（CLASS）或者运行时（RUNTIME）.</p><div class="table-container"><table><thead><tr><th>注解</th><th>用途</th></tr></thead><tbody><tr><td>@Target</td><td>表示该注解可以用于什么地方，可能的ElementType参数包括：<code>CONSTRUCTOR:构造器的声明</code>,<code>FIELD:域声明（包括enum实例）</code>,<code>LOCAL_VARIABLE：局部变量声明</code>,<code>METHOD：方法声明</code>,<code>PACKAGE：包声明</code>,<code>PARAMETER：参数声明</code>,<code>TYPE:类、接口（包括注解类型）或enum声明</code></td></tr><tr><td>@Retention</td><td>表示需要在什么级别保存该注解信息。可选的<strong>RetentionPolicy</strong>参数包括：<code>SOURCE:注解将被编译器丢弃</code>,<code>CLASS:注解在class文件中可用，但会被VM丢弃</code>,<code>RUNTIME:VM将在运行期也被保留注解，因此可以通过反射机制读取注解的信息。</code></td></tr><tr><td>@Documented</td><td>将此注解包含在Javadoc中</td></tr><tr><td>@Inherited</td><td>允许子类继承父类中的注解</td></tr></tbody></table></div><h3 id="编写注解处理器"><a href="#编写注解处理器" class="headerlink" title="编写注解处理器"></a>编写注解处理器</h3><p>有了处理器才能使注解发挥作用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@UserCase</span>(id = <span class="number">47</span>, description = <span class="string">"Password must contain at least one numeric"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">vaildatePassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (password.matches(<span class="string">"\\w*\\d\\w*"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UserCase</span>(id = <span class="number">48</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encryptPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(password).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UserCase</span>(id = <span class="number">49</span>, description = <span class="string">"Not equal"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkForNewPassword</span><span class="params">(List&lt;String&gt; prevPasswords, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !prevPasswords.contains(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCaseTracker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">trackUseCases</span><span class="params">(List&lt;Integer&gt; useCases, Class&lt;?&gt; cl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Method m : cl.getDeclaredMethods()) &#123;</span><br><span class="line">            UserCase uc = m.getAnnotation(UserCase.class);</span><br><span class="line">            <span class="keyword">if</span> (uc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Found Use Case:"</span> + uc.id() + <span class="string">" "</span> + uc.description());</span><br><span class="line">            &#125;</span><br><span class="line">            useCases.remove(<span class="keyword">new</span> Integer(uc.id()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : useCases) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Warning:Missiong use case-"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; useCases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(useCases, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>);</span><br><span class="line">        trackUseCases(useCases, PasswordUtils.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Found Use Case:47 Password must contain at least one numeric</span></span><br><span class="line"><span class="comment">    Found Use Case:48 no description</span></span><br><span class="line"><span class="comment">    Found Use Case:49 Not equal</span></span><br><span class="line"><span class="comment">    Warning:Missiong use case-50</span></span><br><span class="line"><span class="comment">    * */</span></span><br></pre></td></tr></table></figure><p><strong>getAnnoation()</strong>方法返回指定类型的注解对象，若没有则返回null值</p><h3 id="注解元素可用的类型"><a href="#注解元素可用的类型" class="headerlink" title="注解元素可用的类型"></a>注解元素可用的类型</h3><ul><li>所以基本类型（int,float,boolean等）</li><li>Class</li><li>enum</li><li>Annotation(注解可以嵌套)</li><li>以上类型的数组</li></ul><h3 id="默认值限制"><a href="#默认值限制" class="headerlink" title="默认值限制"></a>默认值限制</h3><p>元素不能有不确定的值，元素必须要么具有默认值，要么在使用注解时提供元素的值。<br>其次，对于非基本类型的元素，无论是在源代码中声明时或是在注解接口中定义默认值时，都不能以null作为其值。</p><h3 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h3><p>APT(Annotation processing tool) 是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。</p><p>Annotation处理器在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件(文件具体内容由Annotation处理器的编写者决定),APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件.使用APT主要的目的是简化开发者的工作量。</p><p>因为APT可以编译程序源代码的同时，生成一些附属文件(比如源文件类文件程序发布描述文件等)，这些附属文件的内容也都是与源代码相关的，换句话说，使用APT可以代替传统的对代码信息和附属文件的维护工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修饰表属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Persistent &#123;</span><br><span class="line"> <span class="function">String <span class="title">table</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修饰标识属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IdProperty &#123;</span><br><span class="line"> <span class="function">String <span class="title">column</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function">String <span class="title">generator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修饰普通成员变量的Annotation </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Property &#123;</span><br><span class="line"> <span class="function">String <span class="title">column</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立一个java类 使用以上注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通的Java类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Persistent</span>(table = <span class="string">"persons_table"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="meta">@IdProperty</span>(column = <span class="string">"person_id"</span>, type = <span class="string">"integer"</span>, generator = <span class="string">"identity"</span>)</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> <span class="meta">@Property</span>(column = <span class="string">"person_name"</span>, type = <span class="string">"string"</span>)</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="meta">@Property</span>(column = <span class="string">"person_age"</span>, type = <span class="string">"integer"</span>)</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.id = id;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们为这三个Annotation提供了一个Annotation处理器该处理器的功能是根据注释来生成一个Hibernate的映射文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateAnnotationProcessor</span> <span class="keyword">implements</span> <span class="title">AnnotationProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Annotation处理器环境是该处理器与APT交互的重要途径</span></span><br><span class="line">    <span class="keyword">private</span> AnnotationProcessorEnvironment env;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造HibernateAnnotationProcessor对象时获得处理器环境</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HibernateAnnotationProcessor</span><span class="params">(AnnotationProcessorEnvironment env)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.env = env;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环处理每个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 遍历每个class文件</span></span><br><span class="line">        <span class="keyword">for</span> (TypeDeclaration t : env.getSpecifiedTypeDeclarations()) &#123;</span><br><span class="line">            <span class="comment">// 定义一个文件输出流用于生成额外的文件</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 获取正在处理的类名</span></span><br><span class="line">            String clazzName = t.getSimpleName();</span><br><span class="line">            <span class="comment">// 获取类定义前的Persistent Annotation</span></span><br><span class="line">            Persistent per = t.getAnnotation(Persistent.class);</span><br><span class="line">            <span class="comment">// 当per Annotation不为空时才继续处理</span></span><br><span class="line">            <span class="keyword">if</span> (per != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 创建文件输出流</span></span><br><span class="line">                    fos = <span class="keyword">new</span> FileOutputStream(clazzName + <span class="string">".hbm.xml"</span>);</span><br><span class="line">                    PrintStream ps = <span class="keyword">new</span> PrintStream(fos);</span><br><span class="line">                    <span class="comment">// 执行输出</span></span><br><span class="line">                    ps.println(<span class="string">"&lt;?xml version=\"1.0\"?&gt;"</span>);</span><br><span class="line">                    ps.println(<span class="string">"&lt;!DOCTYPE hibernate-mapping"</span>);</span><br><span class="line">                    ps.println(<span class="string">" PUBLIC \"-// Hibernate/Hibernate Mapping DTD 3.0//EN\""</span>);</span><br><span class="line">                    ps.println(<span class="string">" \"http:// hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\"&gt;"</span>);</span><br><span class="line">                    ps.println(<span class="string">"&lt;hibernate-mapping&gt;"</span>);</span><br><span class="line">                    ps.print(<span class="string">" &lt;class name=\""</span> + t);</span><br><span class="line">                    <span class="comment">// 输出per的table()的值</span></span><br><span class="line">                    ps.println(<span class="string">"\" table=\""</span> + per.table() + <span class="string">"\"&gt;"</span>);</span><br><span class="line">                    <span class="keyword">for</span> (FieldDeclaration f : t.getFields()) &#123;</span><br><span class="line">                        <span class="comment">// 获取指定FieldDeclaration前面的IdProperty Annotation</span></span><br><span class="line">                        IdProperty id = f.getAnnotation(IdProperty.class);</span><br><span class="line">                        <span class="comment">// 如果id Annotation不为空</span></span><br><span class="line">                        <span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 执行输出</span></span><br><span class="line">                            ps.println(<span class="string">" &lt;id name=\""</span> + f.getSimpleName() + <span class="string">"\" column=\""</span> + id.column() + <span class="string">"\" type=\""</span> + id.type() + <span class="string">"\"&gt;"</span>);</span><br><span class="line">                            ps.println(<span class="string">" &lt;generator class=\""</span> + id.generator() + <span class="string">"\"/&gt;"</span>);</span><br><span class="line">                            ps.println(<span class="string">" &lt;/id&gt;"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 获取指定FieldDeclaration前面的Property Annotation</span></span><br><span class="line">                        Property p = f.getAnnotation(Property.class);</span><br><span class="line">                        <span class="comment">// 如果p Annotation不为空</span></span><br><span class="line">                        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 执行输出</span></span><br><span class="line">                            ps.println(<span class="string">" &lt;property name=\""</span> + f.getSimpleName() + <span class="string">"\" column=\""</span> + p.column() + <span class="string">"\"type=\""</span> + p.type() + <span class="string">"\"/&gt;"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ps.println(<span class="string">" &lt;/class&gt;"</span>);</span><br><span class="line">                    ps.println(<span class="string">"&lt;/hibernate-mapping&gt;"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123; <span class="comment">// 关闭输出流</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            fos.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的Annotation处理器比较简单与前面通过反射来获取Annotation信息不同的是，这个Annotation处理器使用AnnotationProcessorEnvironment来获取Annotation信息AnnotationProcessorEnvironment包含了一个getSpecifiedTypeDeclarations方法，可获取所有需要处理的类声明，这个类声明可包括类，接口，和枚举等声明，由TypeDeclaration对象表地示与Classc对象的功能大致相似，区别只是TypeDeclaration是静态，只要有类文件就可以获得该对象而Class是动态的必须由虚拟机装载了指定类文件后才会产生。</p><p>TypeDeclaration又包含了如下三个常用方法来获得对应的程序元素</p><ul><li>getFields: 获取该类声明里的所有成员变量声明返回值是集合元素FieldDeclaration的集合</li><li>getMethods: 获取该类声明里的所有成员声明返回值是集合元素MethodDeclaration的集合</li><li>getPackage: 获取该类声明里的包声明返回值是TypeDeclaration.</li></ul><p>上面三个方法返回的TypeDeclaration,FieldDeclaration,MethodDeclaration都可调用getAnnotation方法来访问修饰它们的Annotation,上面程序中就是获取不同程序元素的Annotation的代码。<br>提供了上面的Annotation处理器类之后，还应该为该Annotation处理器提供一个处理工厂，处理工厂负责决定该处理器支持哪些Annotation，并通过getProcessorFor方法来生成一个Annotation处理对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.mirror.apt.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.mirror.declaration.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.mirror.type.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.mirror.util.*;</span><br><span class="line"><span class="keyword">import</span> java.beans.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateAnnotationFactory</span> <span class="keyword">implements</span> <span class="title">AnnotationProcessorFactory</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 所有支持的注释类型</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">supportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Arrays.asList(<span class="string">"Property"</span>, <span class="string">"IdProperty"</span>, <span class="string">"Persistent"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 返回所有支持的选项</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">supportedOptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 返回Annotation处理器</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> AnnotationProcessor <span class="title">getProcessorFor</span><span class="params">( Set&lt;AnnotationTypeDeclaration&gt; atds, AnnotationProcessorEnvironment env)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> HibernateAnnotationProcessor(env);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提供了上面的处理器工厂后就可以使用APT工具来处理上面的Person.java源文件。并根据该源文件来生成一个XML文件。 APT工具位于JDK的安装路径的bin路径下。<br>运行APT命令时，可以使用-factory选项来指定处理器工厂类。<br>如下所示 run.cmd，使用前注意配置Java环境变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -factory HibernateAnnotationFactory Person.java</span><br></pre></td></tr></table></figure></p><h2 id="第二十一章（并发）"><a href="#第二十一章（并发）" class="headerlink" title="第二十一章（并发）"></a>第二十一章（并发）</h2><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p><strong>newCachedThreadPool()</strong> 创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</p><p><strong>newFixedThreadPool(int nThreads)</strong><br>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数 nThreads 线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池中的线程将一直存在。新的线程加入后，如果正在运行的线程达到了上限，则会阻塞，直到有了空闲的线程来运行。 </p><p><code>Executor.shutdown()</code> 这个方法调用可以防止新任务被提交给这个Executor,当前线程将继续运行在shutdown()被调用之前提交的所有任务。</p><p>利用 <code>Callable</code> 接口接收 Runnable 运行后返回的结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        List&lt;Future&lt;String&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            results.add(exec.submit(<span class="keyword">new</span> TaskWithResult(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Future&lt;String&gt; future: results)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(future.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 0</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 1</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 2</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 3</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 4</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 5</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 6</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 7</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 8</span></span><br><span class="line"><span class="comment">    result of TaskWithResult 9</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskWithResult</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaskWithResult</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result of TaskWithResult "</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old-style</span></span><br><span class="line"><span class="comment">// Thread.sleep(100);</span></span><br><span class="line"><span class="comment">// Java SE5/6-style</span></span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><code>setPriority()</code>优先级是在run()的开头部分设定的，在构造器中设置不会有任何好处，因为Executor在此刻还没有开始执行任务。<br>调整优先级时，最好只使用<strong>MAX_PRIORITY</strong>,<strong>NORM_PRIORITY</strong>,<strong>MIN_PRIORITY</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread.setDaemon(<span class="keyword">true</span>);<span class="comment">//设置后台线程，只有当所有非后台线程终止时，后台线程才会结束</span></span><br></pre></td></tr></table></figure><p><strong>ThreadFactory</strong>可以定制由Executor创建的线程的属性（后台、优先级、名称）。<br>后台线程在所有非后台终止时，会“突然”终止，一旦main()退出，JVM就会立即关闭所有的后台进程，而不会有任何形式的确认行为（比如说不会执行finally语句）。</p><p>一个线程可以在其他线程上调用join()方法，其效果是等待一段时间直到第二个线程结束才继续执行。如果某个线程在另一个线程t上调用t.join()，此线程将会被挂起，直到目标线程t结束才恢复（即t.isActive()返回为假）。</p><p>可以通过<strong>Thread.UncaughtExceptionHandler</strong>来捕获线程上溢出的异常。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread.setUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler());</span><br><span class="line">Thread.setUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler());<span class="comment">//静态域，全局使用</span></span><br></pre></td></tr></table></figure></p><h3 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h3><p>使用<strong>synchronized</strong>标记来防止资源冲突。<br>所有对象都自动含有单一的锁（也成为监视器）</p><ul><li>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</li><li>然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</li><li>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。</li><li>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。</li><li>以上规则对其它对象锁同样适用.</li></ul><p>synchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块，规则同上</p><p>可以<code>synchronized(xx.class)</code>来锁住一个类而不是对象。</p><p>使用<code>java.util.concurrent.locks</code>中的显式互斥机制。Lock对象必须被显式地创建、锁定和释放。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">       lock.lock();</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="comment">//do something</span></span><br><span class="line">           Thread.yield();</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>对Lock()的调用，必须放在finally子句中带有unlock()的try-finally语句中。return语句要在try子句中出现，以确保unlock()不会过早发生。</p><p>ReentrantLock允许你尝试着获取但最终未获取锁，如果其他人已经获取了这个锁，那你可以决定离开去执行其他一些事情，而不是等待这个锁被释放。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock.tryLock();</span><br><span class="line"></span><br><span class="line">lock.tryLock(<span class="number">2</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></p><p><a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="noopener">正确使用Volatile变量</a></p><p>要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p><blockquote><p>对变量的写操作不依赖于当前值。<br>该变量没有包含在具有其他变量的不变式中。</p></blockquote><p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。 </p><p>结合使用 volatile 和 synchronized 实现“开销较低的读－写锁”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesyCounter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Employs the cheap read-write lock trick</span></span><br><span class="line">    <span class="comment">// All mutative operations MUST be done with the 'this' lock held</span></span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"this"</span>) <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过原子类（AtomicInteger、AtomicLong、AtomicReference）可以有效减少synchronized关键字和Lock显式锁的使用。但一般减少使用，只需在特殊情况下使用即可。</p><p><strong>ThreadLocal</strong>对象通常当作静态域存储，它为每个单独的线程分配了自己的存储。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalVariableHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; value = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rand.nextInt(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value.set(value.get() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> Accessor(i));</span><br><span class="line">        &#125;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        exec.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    #0:9259</span></span><br><span class="line"><span class="comment">    #1:556</span></span><br><span class="line"><span class="comment">    #2:6694</span></span><br><span class="line"><span class="comment">    #3:1862</span></span><br><span class="line"><span class="comment">    #4:962</span></span><br><span class="line"><span class="comment">    #0:9260</span></span><br><span class="line"><span class="comment">    #1:557</span></span><br><span class="line"><span class="comment">    #2:6695</span></span><br><span class="line"><span class="comment">    #3:1863</span></span><br><span class="line"><span class="comment">    #4:963</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Accessor</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            ThreadLocalVariableHolder.increment();</span><br><span class="line">            System.out.println(<span class="keyword">this</span>);</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"#"</span> + id + <span class="string">":"</span> + ThreadLocalVariableHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="终结任务"><a href="#终结任务" class="headerlink" title="终结任务"></a>终结任务</h3><p>线程状态：<code>新建</code>、<code>就绪</code>、<code>阻塞</code>、<code>死亡</code>。</p><p>进入阻塞的情况：</p><ul><li>调用sleep()使任务进入休眠状态</li><li>调用wait()线程挂起，需要notify()或notifyAll()来唤醒</li><li>等待输入输出</li><li>调用对象的同步控制方法，但对象锁不可用</li></ul><p>Thread类包含interrupt()方法，因此可以终止被阻塞的任务，但若线程已经被阻塞或正试图执行一个阻塞操作那么设置中断状态将会抛出InterruptedException。<br>可以通过Executor的<strong>shutdownNow()</strong> 来中断它启动的线程。也可以通过submit()方法获得线程的Future,再通过 <strong>Future.cancel()</strong> 来中断特定线程。</p><p>Thread.interrupt()方法不会中断一个正在运行的线程。这一方法实际上完成的是，在线程受到阻塞时抛出一个中断信号，这样线程就得以退出阻塞的状态。更确切的说，如果线程被Object.wait, Thread.join和Thread.sleep三种方法之一阻塞，那么，它将接收到一个中断异常（InterruptedException），从而提早地终结被阻塞状态。 </p><p>因此最好的方法是设置共享变量，并调用interrupt(),双重检查下确保线程能准确退出。</p><h3 id="线程之间协作"><a href="#线程之间协作" class="headerlink" title="线程之间协作"></a>线程之间协作</h3><p>对于wait()而言</p><ul><li>在wait()期间对象锁是释放的</li><li>可以通过notify()、notifyAll()，或者令时间到期，从wait()中恢复执行。</li></ul><p>wait()的标准写法，防止错失竞争信号<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(sharedMonitor)&#123;</span><br><span class="line">    <span class="keyword">while</span>(someCondition)&#123;</span><br><span class="line">        sharedMonitor.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当notifyAll()因某个特定锁而被调用时，只有等待这个锁的任务才会被唤醒。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>从哲学家问题可以看出，要发生死锁必须要满足以下4个条件：</p><ul><li>互斥条件。任务使用的资源至少有一个是不能共享的。</li><li>至少有一个任务它必须持有一个资源且正在等待获取一个当前被别的任务持有的资源。</li><li>资源不能被抢占，任务必须把资源释放当作普通事件。</li><li>必须要有循环等待，这时，一个任务等待其他任务所持有的资源，后者又在等待另一个任务所持有的资源。</li></ul><h3 id="新类库-concurrent"><a href="#新类库-concurrent" class="headerlink" title="新类库 concurrent"></a>新类库 concurrent</h3><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;  </span><br><span class="line">        CountDownLatch latch=<span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);<span class="comment">//两个工人的协作  </span></span><br><span class="line">        Worker worker1=<span class="keyword">new</span> Worker(<span class="string">"zhang san"</span>, <span class="number">5000</span>, latch);  </span><br><span class="line">        Worker worker2=<span class="keyword">new</span> Worker(<span class="string">"li si"</span>, <span class="number">8000</span>, latch);  </span><br><span class="line">        worker1.start();<span class="comment">//  </span></span><br><span class="line">        worker2.start();<span class="comment">//  </span></span><br><span class="line">        latch.await();<span class="comment">//等待所有工人完成工作  </span></span><br><span class="line">        System.out.println(<span class="string">"all work done at "</span>+sdf.format(<span class="keyword">new</span> Date()));  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;  </span><br><span class="line">        String workerName;   </span><br><span class="line">        <span class="keyword">int</span> workTime;  </span><br><span class="line">        CountDownLatch latch;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String workerName ,<span class="keyword">int</span> workTime ,CountDownLatch latch)</span></span>&#123;  </span><br><span class="line">             <span class="keyword">this</span>.workerName=workerName;  </span><br><span class="line">             <span class="keyword">this</span>.workTime=workTime;  </span><br><span class="line">             <span class="keyword">this</span>.latch=latch;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;  </span><br><span class="line">            System.out.println(<span class="string">"Worker "</span>+workerName+<span class="string">" do work begin at "</span>+sdf.format(<span class="keyword">new</span> Date()));  </span><br><span class="line">            doWork();<span class="comment">//工作了  </span></span><br><span class="line">            System.out.println(<span class="string">"Worker "</span>+workerName+<span class="string">" do work complete at "</span>+sdf.format(<span class="keyword">new</span> Date()));  </span><br><span class="line">            latch.countDown();<span class="comment">//工人完成工作，计数器减一  </span></span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                Thread.sleep(workTime);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。CountDownLatch很像一个线程闸，通过<code>await()</code>方法阻塞主线程等待闸内的线程完成，当计数器为0时主线程恢复。</p><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。CyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。<br>CyclicBarrier还提供一个更高级的构造函数CyclicBarrier(int parties, Runnable barrierAction)，用于在线程到达屏障时，优先执行barrierAction，方便处理更复杂的业务场景。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> CyclicBarrier c = <span class="keyword">new</span> CyclicBarrier(<span class="number">2</span>, <span class="keyword">new</span> A());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">c.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">c.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>CyclicBarrier和CountDownLatch的区别</p><ul><li>CountDownLatch的计数器只能使用一次。而CyclicBarrier的计数器可以使用reset() 方法重置。所以CyclicBarrier能处理更为复杂的业务场景，比如如果计算发生错误，可以重置计数器，并让线程们重新执行一次。</li><li>CyclicBarrier还提供其他有用的方法，比如getNumberWaiting方法可以获得CyclicBarrier阻塞的线程数量。isBroken方法用来知道阻塞的线程是否被中断。比如以下代码执行完之后会返回true。</li><li>CyclicBarrier中线程到达“屏障”时会被阻塞。</li></ul><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>Semaphore的构造方法Semaphore(int permits) 接受一个整型的数字，表示可用的许可证数量。Semaphore(10)表示允许10个线程获取许可证，也就是最大并发数是10。Semaphore的用法也很简单，首先线程使用Semaphore的acquire()获取一个许可证，使用完之后调用release()归还许可证。还可以用tryAcquire()方法尝试获取许可证。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">s.acquire();</span><br><span class="line">System.out.println(<span class="string">"save data"</span>);</span><br><span class="line">s.release();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p>DelayQueue是一个BlockingQueue，其特化的参数是Delayed。（不了解BlockingQueue的同学，先去了解BlockingQueue再看本文）<br>Delayed扩展了Comparable接口，比较的基准为延时的时间值，Delayed接口的实现类getDelay的返回值应为固定值（final）。DelayQueue内部是使用PriorityQueue实现的。</p><p><code>DelayQueue = BlockingQueue + PriorityQueue + Delayed</code></p><h4 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Exchanger&lt;List&lt;Integer&gt;&gt; exchanger = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Exchanger&lt;List&lt;Integer&gt;&gt; exchanger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.clear();</span><br><span class="line">            list.add(rand.nextInt(<span class="number">10000</span>));</span><br><span class="line">            list.add(rand.nextInt(<span class="number">10000</span>));</span><br><span class="line">            list.add(rand.nextInt(<span class="number">10000</span>));</span><br><span class="line">            list.add(rand.nextInt(<span class="number">10000</span>));</span><br><span class="line">            list.add(rand.nextInt(<span class="number">10000</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                list = exchanger.exchange(list);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Exchanger&lt;List&lt;Integer&gt;&gt; exchanger = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Exchanger&lt;List&lt;Integer&gt;&gt; exchanger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                list = exchanger.exchange(list);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(list.get(<span class="number">0</span>)+<span class="string">", "</span>);</span><br><span class="line">            System.out.print(list.get(<span class="number">1</span>)+<span class="string">", "</span>);</span><br><span class="line">            System.out.print(list.get(<span class="number">2</span>)+<span class="string">", "</span>);</span><br><span class="line">            System.out.print(list.get(<span class="number">3</span>)+<span class="string">", "</span>);</span><br><span class="line">            System.out.println(list.get(<span class="number">4</span>)+<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Exchanger&lt;List&lt;Integer&gt;&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Consumer(exchanger).start();</span><br><span class="line">        <span class="keyword">new</span> Producer(exchanger).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exchanger是在两个任务之间交换对象。</p><p>当线程A调用Exchange对象的exchange()方法后，他会陷入阻塞状态，直到线程B也调用了exchange()方法，然后以线程安全的方式交换数据，之后线程A和B继续运行</p><h4 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ReentrantReadWriteLock lock =</span><br><span class="line">            <span class="keyword">new</span> ReentrantReadWriteLock(<span class="keyword">true</span>);</span><br><span class="line">            </span><br><span class="line">Lock wlock = lock.writeLock();<span class="comment">//获取写锁</span></span><br><span class="line">Lock rlock = lock.readLock();<span class="comment">//获取读锁</span></span><br><span class="line">lock.getReadLockCount();<span class="comment">//获取读锁的个数</span></span><br></pre></td></tr></table></figure><p>ReadWriteLock 对向数据结构相对不频繁写入，但是有多个任务要经常读取这个数据结构的这类情况进行了优化。ReadWriteLock使得你可以同时有多个读取者，只要它们都不试图写入即可。如果写锁已经被其他任务持有，那么任何读取者都不能访问。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于最后的<code>图形化用户界面</code>章节，基本上讲的是如何使用Swing上的UI控件，所以略过。</p><p>断断续续的看完这本《Java编程思想》，只能说不愧是java语言最经典的教材，除去阅读时不断巩固自己在java上的知识，还能时不时的发现之前没有用到过的java技术，让人获益匪浅啊！</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十二）—— Android 6.0权限管理</title>
      <link href="/2016/11/02/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94PermissionBuilder/"/>
      <url>/2016/11/02/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94PermissionBuilder/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-6-0权限管理"><a href="#Android-6-0权限管理" class="headerlink" title="Android 6.0权限管理"></a>Android 6.0权限管理</h1><h2 id="关于权限管理"><a href="#关于权限管理" class="headerlink" title="关于权限管理"></a>关于权限管理</h2><p>Android6.0 发布之后，Android 的权限系统被重新设计。在 23 之前 App 的权限只会在用户安装的时候询问一次，App一旦安装后就可以使用所有的权限了，而从 23 之后，App 可以直接安装，App 只有在运行时需要使用某些权限时才会向用户询问是否授权，此时系统会弹出一个对话框让用户选择确认或者取消授权，同时用户也可以在设置页面对每个 App 的权限进行管理。<strong>重要：这个对话框需要开发者手动调用，且不可自行定制样式</strong></p><p>Android Developer 文章：<br><a href="https://developer.android.com/guide/topics/security/permissions.html" target="_blank" rel="noopener">System Permissions</a><br><a href="https://developer.android.com/training/permissions/requesting.html" target="_blank" rel="noopener">Requesting Permissions at Run Time</a><br><a href="https://developer.android.com/training/permissions/best-practices.html" target="_blank" rel="noopener">Permissions Best Practices</a></p><h2 id="通用权限和危险权限"><a href="#通用权限和危险权限" class="headerlink" title="通用权限和危险权限"></a>通用权限和危险权限</h2><h3 id="通用权限"><a href="#通用权限" class="headerlink" title="通用权限"></a>通用权限</h3><p>通用权限是指不涉及用户隐私，只需要在<code>Manifest</code>中声明即可的权限，比如网络、蓝牙等，只要 app 安装，这些权限默认都是被app允许使用的。</p><p>通用权限列表： </p><ul><li>ACCESS_LOCATION_EXTRA_COMMANDS</li><li>ACCESS_NETWORK_STATE</li><li>ACCESS_NOTIFICATION_POLICY</li><li>ACCESS_WIFI_STATE</li><li>BLUETOOTH</li><li>BLUETOOTH_ADMIN</li><li>BROADCAST_STICKY</li><li>CHANGE_NETWORK_STATE</li><li>CHANGE_WIFI_MULTICAST_STATE</li><li>CHANGE_WIFI_STATE</li><li>DISABLE_KEYGUARD</li><li>EXPAND_STATUS_BAR</li><li>GET_PACKAGE_SIZE</li><li>INSTALL_SHORTCUT</li><li>INTERNET</li><li>KILL_BACKGROUND_PROCESSES</li><li>MODIFY_AUDIO_SETTINGS</li><li>NFC</li><li>READ_SYNC_SETTINGS</li><li>READ_SYNC_STATS</li><li>RECEIVE_BOOT_COMPLETED</li><li>REORDER_TASKS</li><li>REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</li><li>REQUEST_INSTALL_PACKAGES</li><li>SET_ALARM</li><li>SET_TIME_ZONE</li><li>SET_WALLPAPER</li><li>SET_WALLPAPER_HINTS</li><li>TRANSMIT_IR</li><li>UNINSTALL_SHORTCUT</li><li>USE_FINGERPRINT</li><li>VIBRATE</li><li>WAKE_LOCK</li><li>WRITE_SYNC_SETTINGS</li></ul><h3 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h3><p>所有危险的Android系统权限属于权限组，如果APP运行在Android 6.0 (API level 23)或者更高级别的设备中，而且targetSdkVersion&gt;=23时，系统将会自动采用动态权限管理策略。<br>此类权限也必须在Manifest中申明，否则申请时不提使用用户，直接回调开发者权限被拒绝。<br><strong>同一个权限组的任何一个权限被授权了，这个权限组的其他权限也自动被授权。例如，一旦<code>WRITE_CONTACTS</code>被授权了，App也有<code>READ_CONTACTS</code>和<code>GET_ACCOUNTS</code>了。</strong><br><strong>申请某一个权限的时候系统弹出的Dialog是对整个权限组的说明，而不是单个权限。例如我申请<code>READ_EXTERNAL_STORAGE</code>，系统会提示”允许xxx访问设备上的照片、媒体内容和文件吗？”。</strong><br>如果App运行在Android 5.1 (API level 22)或者更低级别的设备中，或者targetSdkVersion&lt;=22时（此时设备可以是Android 6.0 (API level 23)或者更高），在所有系统中仍将采用旧的权限管理策略，系统会要求用户在安装的时候授予权限。其次，系统就告诉用户App需要什么权限组，而不是个别的某个权限。</p><p>(targetSdkVersion&gt;=23)<br>Dangous Permissions</p><div class="table-container"><table><thead><tr><th>Permission Group</th><th>Permissions</th></tr></thead><tbody><tr><td>CALENDAR</td><td>READ_CALENDAR &lt;/br&gt; WRITE_CALENDAR</td></tr><tr><td>CAMERA</td><td>CAMERA</td></tr><tr><td>CONTACTS</td><td>READ_CONTACTS &lt;/br&gt;WRITE_CONTACTS &lt;/br&gt;GET_ACCOUNTS</td></tr><tr><td>LOCATION</td><td>ACCESS_FINE_LOCATION &lt;/br&gt;ACCESS_COARSE_LOCATION</td></tr><tr><td>MICROPHONE</td><td>RECORD_AUDIO</td></tr><tr><td>PHONE</td><td>READ_PHONE_STATE &lt;/br&gt; CALL_PHONE &lt;/br&gt; READ_CALL_LOG &lt;/br&gt; WRITE_CALL_LOG &lt;/br&gt; ADD_VOICEMAIL &lt;/br&gt; USE_SIP &lt;/br&gt; PROCESS_OUTGOING_CALLS &lt;/br&gt;</td></tr><tr><td>SENSORS</td><td>BODY_SENSORS</td></tr><tr><td>SMS</td><td>SEND_SMS &lt;/br&gt; RECEIVE_SMS &lt;/br&gt; READ_SMS &lt;/br&gt; RECEIVE_WAP_PUSH &lt;/br&gt; RECEIVE_MMS &lt;/br&gt;</td></tr><tr><td>STORAGE</td><td>READ_EXTERNAL_STORAGE &lt;/br&gt; WRITE_EXTERNAL_STORAGE</td></tr></tbody></table></div><h3 id="两个特殊的权限"><a href="#两个特殊的权限" class="headerlink" title="两个特殊的权限"></a>两个特殊的权限</h3><p><strong>SYSTEM_ALERT_WINDOW</strong> 和 <strong>WRITE_SETTINGS</strong> 这两个权限比较特殊，不能通过代码申请方式获取，必须得用户打开软件设置页手动打开，才能授权。官方建议需要申请该权限时引导用户跳转到Setting中自己去开启权限开关。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> OVERLAY_PERMISSION_REQ_CODE = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.M)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDrawOverLays</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Settings.canDrawOverlays(MainActivity.<span class="keyword">this</span>)) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"can not DrawOverlays"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class="string">"package:"</span> + MainActivity.<span class="keyword">this</span>.getPackageName()));</span><br><span class="line">        startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Already hold the SYSTEM_ALERT_WINDOW permission, do addview or something.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.M)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == OVERLAY_PERMISSION_REQ_CODE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="comment">// SYSTEM_ALERT_WINDOW permission not granted...</span></span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"Permission Denieddd by user.Please Check it in Settings"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"Permission Allowed"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="comment">// Already hold the SYSTEM_ALERT_WINDOW permission, do addview or something.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="权限申请流程"><a href="#权限申请流程" class="headerlink" title="权限申请流程"></a>权限申请流程</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/android%20permission.jpg" alt="权限申请流程"></p><h3 id="checkSelfPermission"><a href="#checkSelfPermission" class="headerlink" title="checkSelfPermission()"></a>checkSelfPermission()</h3><p>1、检查某一个权限的当前状态，在请求某个权限时应该检查这个权限是否已经被用户授权，已经授权的权限应该跳过申请。<br>2、该方法有一个参数是权限名称，有一个int的返回值，可判断检查的权限当前的状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_CONTACTS)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">    <span class="comment">// 没有权限</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 有权限了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="requestPermissions"><a href="#requestPermissions" class="headerlink" title="requestPermissions()"></a>requestPermissions()</h3><p>申请权限，调用后系统会显示一个请求用户授权的提示对话框，App不能配置和修改这个对话框。<br>1、 如果需要提示用户这个权限相关的信息或说明，需要在调用 requestPermissions() 之前处理，该方法有两个参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> requestCode <span class="comment">//会在回调onRequestPermissionsResult()时返回，用来判断是哪个授权申请的回调。</span></span><br><span class="line">String[] permissions<span class="comment">//权限数组，你需要申请的的权限的数组</span></span><br></pre></td></tr></table></figure></p><p>2、当用户处理完授权操作时，会回调Activity或者Fragment的<code>onRequestPermissionsResult()</code>方法。</p><h3 id="onRequestPermissionsResult"><a href="#onRequestPermissionsResult" class="headerlink" title="onRequestPermissionsResult()"></a>onRequestPermissionsResult()</h3><p>处理权限结果回调，当用户处理完授权操作时，系统会自动回调该方法，此时返回三个参数，可以判断用户是否允许了申请的权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> requestCode <span class="comment">// 在调用requestPermissions()时的第一个参数。</span></span><br><span class="line">String[] permissions <span class="comment">//权限数组，在调用requestPermissions()时的第二个参数。</span></span><br><span class="line"><span class="keyword">int</span>[] grantResults <span class="comment">//授权结果数组，对应permissions，具体值和上方提到的PackageManager中的两个常量做比较。</span></span><br></pre></td></tr></table></figure></p><h3 id="shouldShowRequestPermissionRationale"><a href="#shouldShowRequestPermissionRationale" class="headerlink" title="shouldShowRequestPermissionRationale()"></a>shouldShowRequestPermissionRationale()</h3><p>是否应该显示请求权限的说明。<br>1、当第一次请求权限时，用户拒绝了，此时再调用<code>shouldShowRequestPermissionRationale()</code>后会返回true，显示为什么需要这个权限的说明。<br>2、用户在第一次拒绝某个权限后，下次再次申请时，授权的dialog中将会出现“不再提醒”选项，一旦选中勾选了，那么下次申请将不会提示用户。此时调用<code>shouldShowRequestPermissionRationale()</code>会返回false<br>3、设备的策略禁止当前应用获取这个权限的授权：<code>shouldShowRequestPermissionRationale()</code>返回false </p><h2 id="Permission-Builder"><a href="#Permission-Builder" class="headerlink" title="Permission Builder"></a>Permission Builder</h2><p>一个自己实现的Permission辅助库，帮助我们能够快速而简洁的在Android上申请权限。</p><p>Github地址：<a href="https://github.com/cpacm/android_learn/tree/master/PermissionBuilder" target="_blank" rel="noopener">PermissiongBuilder</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源客户端：Beats —— 一款基于萌否网站api的音乐管理软件</title>
      <link href="/2016/10/30/Beats%E2%80%94%E2%80%94%E4%B8%80%E6%AC%BE%E5%9F%BA%E4%BA%8E%E8%90%8C%E5%90%A6%E7%BD%91%E7%AB%99api%E7%9A%84%E9%9F%B3%E4%B9%90%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/"/>
      <url>/2016/10/30/Beats%E2%80%94%E2%80%94%E4%B8%80%E6%AC%BE%E5%9F%BA%E4%BA%8E%E8%90%8C%E5%90%A6%E7%BD%91%E7%AB%99api%E7%9A%84%E9%9F%B3%E4%B9%90%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Beats-客户端"><a href="#Beats-客户端" class="headerlink" title="Beats 客户端"></a>Beats 客户端</h2><h3 id="关于-Beats"><a href="#关于-Beats" class="headerlink" title="关于 Beats"></a>关于 Beats</h3><p><img src="http://ofrf20oms.bkt.clouddn.com/beats.jpg" alt="beats"><br><a href="http://ofrf20oms.bkt.clouddn.com/beats_origin.jpg" target="_blank" rel="noopener">大尺寸原图</a><br><a href="http://ofrf20oms.bkt.clouddn.com/beats_1.0.0.apk" target="_blank" rel="noopener">app下载地址</a></p><p><code>Beats</code> 是一款基于萌否网站api的音乐管理软件，它既可以从萌否网站上获取网络上的音乐资源也可以在本地音乐上进行私人化定制管理。<br>本来只是想写一个 Material Design 风格的客户端练练手而已，后来在写的过程中想要加的功能越来越多，结果也导致开发时间也越来越长。整个App主要以 <strong>mvp+rxjava+retrofit</strong> 为框架，使用 <strong>Material Design</strong> 为主要设计风格。   </p><h3 id="关于萌否api"><a href="#关于萌否api" class="headerlink" title="关于萌否api"></a>关于萌否api</h3><p><img src="http://moefou.org/public/images/mf/logo.png" alt><br><a href="http://moe.fm/" target="_blank" rel="noopener">萌否电台</a>是一个二次元音乐电台网站（虽然歌曲不是很全），可以自己上传专辑和建造电台与网友分享，旗下的<a href="http://open.moefou.org/" target="_blank" rel="noopener">萌否开放平台</a>提供了 api 供开发者使用。</p><h2 id="功能和技术点"><a href="#功能和技术点" class="headerlink" title="功能和技术点"></a>功能和技术点</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>萌否用户登陆</li><li>首页显示热门专辑和电台</li><li>萌否专辑电台的分类浏览</li><li>萌否专辑电台搜索</li><li>萌否音乐下载</li><li>本地音乐专辑浏览</li><li>个性化收藏夹</li><li>最近播放</li><li>设置的通知栏和仅wifi下载功能</li><li>每日P站排名浏览（前50）</li></ul><h3 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h3><div class="table-container"><table><thead><tr><th>技术点</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a></td><td>RxJava</td></tr><tr><td><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="noopener">RxAndroid</a></td><td>RxAndroid</td></tr><tr><td><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a></td><td>Json 解析库</td></tr><tr><td><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></td><td>图片加载库</td></tr><tr><td><a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit2</a></td><td>Retrofit</td></tr><tr><td><a href="https://github.com/lingochamp/FileDownloader" target="_blank" rel="noopener">FileDownloader</a></td><td>文件下载器</td></tr><tr><td><a href="https://github.com/scribejava/scribejava" target="_blank" rel="noopener">scribejava</a></td><td>OAuth/OAuth2 验证平台辅助库</td></tr><tr><td><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="noopener">Material-Dialogs</a></td><td>一个强大漂亮的Material Dialog</td></tr><tr><td><a href="https://github.com/cpacm/SimpleSlider" target="_blank" rel="noopener">simpleslider</a></td><td>轮播图</td></tr><tr><td><a href="https://github.com/Cleveroad/WaveInApp" target="_blank" rel="noopener">audiovisualization</a></td><td>音乐播放器可视化渲染器</td></tr><tr><td><a href="https://github.com/lapism/SearchView" target="_blank" rel="noopener">searchview</a></td><td>搜索框</td></tr><tr><td><a href="https://github.com/adnan-SM/TimelyTextView" target="_blank" rel="noopener">TimelyTextView</a></td><td>数字路径动画显示控件</td></tr><tr><td><a href="https://github.com/devadvance/circularseekbar" target="_blank" rel="noopener">circularseekbar</a></td><td>圆形进度条</td></tr><tr><td><a href="https://github.com/dongjunkun/DropDownMenu" target="_blank" rel="noopener">DropDownMenu</a></td><td>下拉菜单</td></tr><tr><td>Oauth登陆</td><td>WebView 进行 JS 注入，避免登陆时网页的出现</td></tr><tr><td>RenderScript 图片渲染</td><td>Android 16以上使用 RenderScript 对图片进行模糊处理，16及以下使用快速模糊算法</td></tr><tr><td>Android Transition 动画</td><td>Activity切换时图片的 Transition 动画</td></tr><tr><td>FloatingMusicMenu</td><td>显示音乐播放时状态和进度的菜单按钮，打开时向上弹出子按钮</td></tr><tr><td>RefreshRecyclerView</td><td>包含 <code>SwipeLayout</code> 和 <code>RecyclerView</code>，具有下拉刷新，上拉加载，占位图功能</td></tr></tbody></table></div><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p><code>Beats</code> 安装的最低要求是Android 4.0，但为了最好的体验效果最好使用Android5.0及以上。<br>如果大家在使用过程中出现问题，欢迎到 Github 提交 issue 或直接联系，我会最快时间处理。</p><p>项目地址：<a href="https://github.com/cpacm/MoeMusic" target="_blank" rel="noopener">https://github.com/cpacm/MoeMusic</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 客户端 </tag>
            
            <tag> beats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rxjava使用帮助</title>
      <link href="/2016/09/21/Rxjava%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
      <url>/2016/09/21/Rxjava%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</code><br>Rxjava是一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序。换句话说就是利用观察者模式实现异步操作的一个库。</p><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>比如说这么一个情景：<br><code>用户输入用户名密码进行登录，同时保存用户信息到本地数据库，之后利用获取的token去服务器获取书籍列表信息，并从书籍信息中找出类型为推理的小说显示到界面。</code></p><p>首先我们使用普通的java来实现，它的代码将如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录</span></span><br><span class="line">login(username, password, <span class="keyword">new</span> CallBack&lt;User&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(User data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//保存信息到数据库</span></span><br><span class="line">        saveToDao(data);</span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        <span class="keyword">final</span> String token = data.getToken();</span><br><span class="line">        <span class="comment">//请求书籍列表</span></span><br><span class="line">        getBookList(token, <span class="keyword">new</span> CallBack&lt;List&lt;Book&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;Book&gt; data)</span> </span>&#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//对书籍信息进行筛选并显示到UI界面中</span></span><br><span class="line">                        <span class="keyword">for</span> (Book b : data) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (b.getType().equals(<span class="string">"推理"</span>)) &#123;</span><br><span class="line">                                showDataToScreen(b);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFail</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFail</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>而如果使用rxjava会变成这样子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;User&gt; <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">login(username, password)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;User, String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">            saveToDao(user);</span><br><span class="line">            <span class="keyword">return</span> user.getToken();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;List&lt;Book&gt;&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Observable&lt;List&lt;Book&gt;&gt; call(String s) &#123;</span><br><span class="line">            <span class="keyword">return</span> getBookList(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;List&lt;Book&gt;, Observable&lt;Book&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;Book&gt; <span class="title">call</span><span class="params">(List&lt;Book&gt; books)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.from(books);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(<span class="keyword">new</span> Func1&lt;Book, Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> book.getType().equals(<span class="string">"推理"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Book&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">            showDataToScreen(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>是不是变得很舒服，起码看上去简洁多了。<br>再使用 java8 试试，看上去又不一样了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">login(username, password)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .map(user -&gt; &#123;</span><br><span class="line">        saveToDao(user);</span><br><span class="line">        <span class="keyword">return</span> user.getToken();</span><br><span class="line">    &#125;)</span><br><span class="line">    .flatMap(s -&gt; getBookList(s))</span><br><span class="line">    .flatMap(books -&gt; Observable.from(books))</span><br><span class="line">    .filter(book -&gt; book.getType().equals(<span class="string">"推理"</span>))</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(<span class="keyword">this</span>::showDataToScreen);</span><br></pre></td></tr></table></figure></p><p>当一个业务需求很长时，使用平时的方法难免会陷入缩进的陷阱中，等过了一段时间后回头再看自己的代码又必须要重头梳理一遍。而使用rxjava,虽然看起来也是很长，但是一条链式调用就能满足整个需求，很长但很清晰。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前面也提到过 <code>rxjava</code> 是一个利用观察者模式实现异步操作的库，使用 <code>rxjava</code> 必须要明白一下四个概念（Observable，Observer，subscribe ，事件）, Observable 和 Observer 通过 subscribe() 方法实现订阅关系，从而 Observable 可以在需要的时候发出事件来通知 Observer。</p><h3 id="Observer-——-观察者"><a href="#Observer-——-观察者" class="headerlink" title="Observer —— 观察者"></a>Observer —— 观察者</h3><p>Observer 和 Subscriber(继承自Observer) 都属于观察者，它们决定观察者被触发后所做的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li><code>onStart()</code> 是在产生 <code>subscribe()</code>  订阅动作之后调用，可以做一些初始化，发生在 <code>onNext()</code> 之前。</li><li><code>onCompleted()</code> 是在整个序列发生结束后调用。</li><li><code>onError()</code> 是在序列发生错误时发生，它与 <code>onCompleted()</code> 互斥。</li></ul><h3 id="Observable-——-被观察者"><a href="#Observable-——-被观察者" class="headerlink" title="Observable —— 被观察者"></a>Observable —— 被观察者</h3><p>它决定什么时候触发 Observer , Rxjava 通过 create() 方法来建立一个被观察者（也可以通过操作符建立）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span></span>&#123;</span><br><span class="line">            subscriber.onNext(<span class="string">"cpacm"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="subscribe-——-订阅"><a href="#subscribe-——-订阅" class="headerlink" title="subscribe() —— 订阅"></a>subscribe() —— 订阅</h3><p>当 <code>Observable</code> 调用 subscribe() 时就会触发其 <code>call()</code> 方法产生动作。<strong>所以记住，所有的动作都是在subscribe()订阅后才开始进行</strong>。<br>除去完整的 <code>Subscriber</code>，还有不完整的 <code>Action</code> 可供调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></span><br><span class="line">observable.subscribe(onNextAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure></p><h3 id="事件变换"><a href="#事件变换" class="headerlink" title="事件变换"></a>事件变换</h3><p>所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。这部分先放着，我们先看看线程操作。</p><h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>在RxJava 中，Scheduler —— 调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程。</p><blockquote><ul><li>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。</li><li>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</li><li>Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li><li>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</li><li>AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。</li></ul></blockquote><p>在 Rxjava 中，可以通过<code>subscribeOn()</code> 和 <code>observeOn()</code> 对线程进行控制。<br><code>subscribeOn()</code> 指定被观察者即 Observable 动作发生所在线程。只能指定一次。<br><code>observeOn()</code> 控制下一层 subscriber 发生的线程，若想多次切换线程时则可以多次调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// IO 线程，由 subscribeOn() 指定</span></span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .map(mapOperator) <span class="comment">// 新线程，由 observeOn() 指定</span></span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .map(mapOperator2) <span class="comment">// IO 线程，由 observeOn() 指定</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread) </span><br><span class="line">    .subscribe(subscriber);  <span class="comment">// Android 主线程，由 observeOn() 指定</span></span><br></pre></td></tr></table></figure></p><p><em>Observable.doOnSubscribe():它和 Subscriber.onStart() 同样是在 subscribe() 调用后而且在事件发送前执行，但区别在于它可以指定线程。在 doOnSubscribe()的后面跟一个 subscribeOn() ，就能指定准备工作的线程了。</em></p><h2 id="Subject-Observable-Observer"><a href="#Subject-Observable-Observer" class="headerlink" title="Subject = Observable + Observer"></a>Subject = Observable + Observer</h2><p>如标题所示，Subject既可以像Observer订阅一个Observable，也可以像Observable发射一个新的数据。rxjava中提供了四种Subject</p><h3 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h3><p>利用Subject实现传统的Observable + Observer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PublishSubject&lt;String&gt; stringPublishSubject = PublishSubject.create();</span><br><span class="line">Subscription subscriptionPrint = stringPublishSubject.subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Observable completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Oh,no!Something wrong happened!"</span>);                </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">stringPublishSubject.onNext(<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure></p><p>与之前的Observable不一样，调用subscribe()并不会发送数据，因为没有数据可以发送，所以subject会一直等待，等待subject调用onNext手动发送数据来触发。Rxbus 就是利用 subject 的这个特性来实现的。</p><h3 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h3><p>简单的说，BehaviorSubject会首先向他的订阅者发送截至订阅前最新的一个数据对象（或初始值）,然后正常发送订阅后的数据流。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BehaviorSubject&lt;Integer&gt; behaviorSubject = BehaviorSubject.create(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3><p>ReplaySubject会缓存它所订阅的所有数据,向任意一个订阅它的观察者重发:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReplaySubject&lt;Integer&gt; replaySubject = ReplaySubject.create();</span><br></pre></td></tr></table></figure></p><h3 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h3><p>当Observable完成时AsyncSubject只会发布最后一个数据给已经订阅的每一个观察者。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AsyncSubject&lt;Integer&gt; asyncSubject = AsyncSubject.create();</span><br></pre></td></tr></table></figure></p><h2 id="Operator-——-操作符（事件变换）"><a href="#Operator-——-操作符（事件变换）" class="headerlink" title="Operator —— 操作符（事件变换）"></a>Operator —— 操作符（事件变换）</h2><p>以上的介绍是使用 Rxjava 要了解的基础，而事件变换才是 rxjava 的精髓。 </p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>操作符包括Schedulers的线程控制大部分是基于基础变换方法 <code>lift(Operator)</code>加上 <code>Operator 变换器</code> 实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">lift</span><span class="params">(<span class="keyword">final</span> Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observable&lt;R&gt;(<span class="keyword">new</span> OnSubscribeLift&lt;T, R&gt;(onSubscribe, operator));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，lift返回了一个新的 <code>Observable</code> , 而原来的 onSubscribe 作为参数和 operator 一起传入到新的 <code>Observable</code> 中。<br>Operator 会通过自己的 call() 方法将新 Subscriber 和原始 Subscriber 进行关联，并插入自己的<strong>变换</strong>代码以实现变换。</p><p>基本的实现思想：执行变换之后，会返回一个新的Observable,而这个新的Observable会负责接收旧的Observable,并通过Operator进行转化。<br>一个将String转变为Integer的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">observable.lift(<span class="keyword">new</span> Observable.Operator&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Subscriber&lt;? <span class="keyword">super</span> Integer&gt; call(<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber) &#123;</span><br><span class="line">        <span class="comment">// 将事件序列中的 Integer 对象转换为 String 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                subscriber.onNext(<span class="string">""</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                subscriber.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><h4 id="与Retrofit的结合"><a href="#与Retrofit的结合" class="headerlink" title="与Retrofit的结合"></a>与<a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit</a>的结合</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></span><br></pre></td></tr></table></figure><p>Retrofit的请求，返回一个 <code>Observable</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(HttpUtil.WIKI)</span><br><span class="line"><span class="function">Observable&lt;WikiBean&gt; <span class="title">getWiki</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @Query(<span class="string">"wiki_id"</span>)</span> <span class="keyword">long</span> wiki_id</span></span><br><span class="line"><span class="function">)</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getWiki(wiki_id)</span><br><span class="line">.subscribeOn(Schedulers.io())</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">.subscribe(<span class="keyword">new</span> Subscriber&lt;ApiResponse&lt;RadioDetailData&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(WikiBean wiki)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="RxBinding"><a href="#RxBinding" class="headerlink" title="RxBinding"></a><a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="noopener">RxBinding</a></h4><blockquote><p>RxJava binding APIs for Android’s UI widgets.</p></blockquote><p>一套基于Android平台的Binging API,举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RxView.clickEvents(button) <span class="comment">// 以 Observable 形式来反馈点击事件</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;ViewClickEvent&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(ViewClickEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Click handling</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="RxBus"><a href="#RxBus" class="headerlink" title="RxBus"></a>RxBus</h4><p>使用 eventbus 或者 otto 的思想用 rxjava 来替代。实现思路可以参考 <a href="http://blog.kaush.co/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/" target="_blank" rel="noopener">rxbus</a>这篇文章。</p><h2 id="Rxjava-各类操作符实例"><a href="#Rxjava-各类操作符实例" class="headerlink" title="Rxjava 各类操作符实例"></a>Rxjava 各类操作符实例</h2><p>总算到了最重要的部分了，这一部分用来演示常用的操作符，尽量覆盖完全。</p><h3 id="创建类Obervable"><a href="#创建类Obervable" class="headerlink" title="创建类Obervable"></a>创建类Obervable</h3><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p><img src="http://reactivex.io/documentation/operators/images/create.c.png" alt="create"><br>从新建造一个 Observable 以便调用 Observer，举个例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"cpacm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出：cpacm</span></span><br></pre></td></tr></table></figure></p><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>延迟 Observable 的创建直到被订阅，举个例子<br><img src="http://reactivex.io/documentation/operators/images/defer.c.png" alt="defer"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">createObservable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"create observable"</span>);</span><br><span class="line">    Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">            subscriber.onNext(<span class="string">"cpacm"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> observable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable&lt;String&gt; observable = Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"defer"</span>);</span><br><span class="line">            <span class="keyword">return</span> createObservable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">"subscribe"</span>);</span><br><span class="line">    observable.subscribe(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">subscribe</span></span><br><span class="line"><span class="comment">defer</span></span><br><span class="line"><span class="comment">create observable</span></span><br><span class="line"><span class="comment">cpacm</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><h4 id="Empty-Never-Throw"><a href="#Empty-Never-Throw" class="headerlink" title="Empty/Never/Throw"></a>Empty/Never/Throw</h4><ul><li>Empty:创建一个 Observable 不发送数据，正常结束；</li><li>Never:创建一个 Observable 不发送数据，不会终止；</li><li>Throw:创建一个 Observable 不发送数据，终止时发出一个错误。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Observable.empty().subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"empty:complete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"empty:error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"empty:next"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Observable.never().subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"never:complete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"never:error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"never:next"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Observable.error(<span class="keyword">new</span> NullPointerException()).subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"error:complete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"error:error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"error:next"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*输出：</span></span><br><span class="line"><span class="comment">empty:complete</span></span><br><span class="line"><span class="comment">error:error</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4><p>从列表中发出数据，并按顺序发射<br><img src="http://reactivex.io/documentation/operators/images/from.c.png" alt="from"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] name = <span class="keyword">new</span> String[]&#123;<span class="string">"c"</span>,<span class="string">"p"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"m"</span>&#125;;</span><br><span class="line">Observable.from(name).subscribe(System.out::println);</span><br><span class="line"><span class="comment">//输出：c p a c m</span></span><br></pre></td></tr></table></figure></p><h4 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h4><p>轮询，每隔一定时间重新发射<br><img src="http://reactivex.io/documentation/operators/images/interval.c.png" alt="interval"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(System.out::println);</span><br><span class="line"><span class="comment">//输出：0 1 2 3 4 ... 间隔1秒</span></span><br></pre></td></tr></table></figure></p><h4 id="just"><a href="#just" class="headerlink" title="just"></a>just</h4><p>单次发射<br><img src="http://reactivex.io/documentation/operators/images/just.c.png" alt="just"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"cpacm"</span>).subscribe(System.out::println);</span><br><span class="line"><span class="comment">//输出：cpacm</span></span><br></pre></td></tr></table></figure></p><p>just()方法可以传入一到九个参数，它们会按照传入的参数的顺序来发射它们。just()方法也可以接受列表或数组，就像from()方法，但是它不会迭代列表发射每个值,它将会发射整个列表。通常，当我们想发射一组已经定义好的值时会用到它。</p><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>在指定范围内发射数据,range(int start,int count)<br><img src="http://reactivex.io/documentation/operators/images/range.c.png" alt="range"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable.range(<span class="number">2</span>,<span class="number">5</span>).subscribe(System.out::println);</span><br><span class="line"><span class="comment">//输出：2,3,4,5,6</span></span><br></pre></td></tr></table></figure></p><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p>重复发射数据,可填写数字控制重复次数<br><img src="http://reactivex.io/documentation/operators/images/repeat.c.png" alt="repeat"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重复发射3次</span></span><br><span class="line">Observable.just(<span class="string">"cpacm"</span>).repeat(<span class="number">3</span>).subscribe(System.out::println);</span><br><span class="line"><span class="comment">//输出：cpacm cpacm cpacm</span></span><br></pre></td></tr></table></figure></p><h4 id="start"><a href="#start" class="headerlink" title="start"></a>start</h4><p>需要额外模块，以后再补充</p><h4 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h4><p>一定时间后发射数据，然后完成<br><img src="http://reactivex.io/documentation/operators/images/timer.c.png" alt="timer"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable.timer(<span class="number">3</span>,TimeUnit.SECONDS).subscribe(System.out::println);</span><br><span class="line"><span class="comment">// 3秒后输出：0</span></span><br></pre></td></tr></table></figure></p><h3 id="变换类Obervable"><a href="#变换类Obervable" class="headerlink" title="变换类Obervable"></a>变换类Obervable</h3><h4 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h4><p>将一个个数据按照count和skip组装成一组数据再发射。也可以通过其他buffer方式进行组装。<br><img src="http://reactivex.io/documentation/operators/images/buffer4.png" alt="buffer1"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">Observable.from(list).buffer(<span class="number">4</span>, <span class="number">3</span>).subscribe(<span class="keyword">new</span> Action1&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Integer&gt; integers)</span> </span>&#123;</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment"> [0, 1, 2, 3]</span></span><br><span class="line"><span class="comment"> [3, 4, 5, 6]</span></span><br><span class="line"><span class="comment"> [6, 7, 8, 9]</span></span><br><span class="line"><span class="comment"> [9, 10, 11, 12]</span></span><br><span class="line"><span class="comment"> [12, 13, 14, 15]</span></span><br><span class="line"><span class="comment"> [15, 16, 17, 18]</span></span><br><span class="line"><span class="comment"> [18, 19]</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure></p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>RxJava的map函数接收一个指定的Func对象然后将它应用到每一个由Observable发射的值上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> Observable.range(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> String.valueOf(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 输出： 0 1 2 3 4</span></span><br></pre></td></tr></table></figure></p><h4 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h4><p><img src="http://reactivex.io/documentation/operators/images/flatMap.c.png" alt="flatmap"></p><blockquote><p>注意：这里返回是乱序的  </p></blockquote><p>在 FlatMap 中可以生成新的 Observable 来替代原来的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Line</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Integer[] points;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Line</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        points = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Line line = <span class="keyword">new</span> Line();</span><br><span class="line">Observable.just(line)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Line, Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Integer&gt; <span class="title">call</span><span class="params">(Line line)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.from(line.points);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                System.out.println(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 输出： 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h4 id="ConcatMap"><a href="#ConcatMap" class="headerlink" title="ConcatMap"></a>ConcatMap</h4><p><img src="http://reactivex.io/documentation/operators/images/concatMap.png" alt="concatMap"><br>ConcatMap 与 FlatMap 相比是有序的发射数据<br><a href="http://www.jianshu.com/p/6d16805537ef" target="_blank" rel="noopener">.concatMap()与.flatMap()的比较</a></p><h4 id="SwitchMap"><a href="#SwitchMap" class="headerlink" title="SwitchMap"></a>SwitchMap</h4><p><img src="http://reactivex.io/documentation/operators/images/switchMap.png" alt><br>switchMap()和flatMap()很像，除了一点：每当源Observable发射一个新的数据项（Observable）时，它将取消订阅并停止监视之前那个数据项产生的Observable，并开始监视当前发射的这一个。</p><h4 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h4><p><img src="http://reactivex.io/documentation/operators/images/groupBy.c.png" alt="GroupBy"><br>groupBy操作符是对源Observable产生的结果进行分组，形成一个类型为GroupedObservable的结果集，GroupedObservable中存在一个方法为getKey()，可以通过该方法获取结果集的Key值（类似于HashMap的key)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">Observable.from(list)</span><br><span class="line">    .groupBy(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(s) % <span class="number">3</span>;<span class="comment">//分成3组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;GroupedObservable&lt;Integer, String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(GroupedObservable&lt;Integer, String&gt; integerStringGroupedObservable)</span> </span>&#123;</span><br><span class="line">            integerStringGroupedObservable.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"key:"</span> + integerStringGroupedObservable.getKey() + <span class="string">",value:"</span> + s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">/* key:0,value:0</span></span><br><span class="line"><span class="comment">*  key:1,value:1</span></span><br><span class="line"><span class="comment">*  key:2,value:2</span></span><br><span class="line"><span class="comment">*  key:0,value:3</span></span><br><span class="line"><span class="comment">*  key:1,value:4</span></span><br><span class="line"><span class="comment">*  key:2,value:5</span></span><br><span class="line"><span class="comment">*  key:0,value:6</span></span><br><span class="line"><span class="comment">*  key:1,value:7</span></span><br><span class="line"><span class="comment">*  key:2,value:8</span></span><br><span class="line"><span class="comment">*  key:0,value:9</span></span><br><span class="line"><span class="comment">*  */</span></span><br></pre></td></tr></table></figure></p><h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p><img src="http://reactivex.io/documentation/operators/images/scan.png" alt="scan"><br>scan操作符对一个序列的数据应用一个函数，并将这个函数的结果发射出去作为下个数据应用这个函数时候的第一个参数使用，有点类似于递归操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.range(<span class="number">1</span>, <span class="number">10</span>).scan(<span class="keyword">new</span> Func2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer sum, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum + integer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(System.out::println);</span><br><span class="line"><span class="comment">//输出： 1 3 6 10 15 21 28 36 45 55</span></span><br><span class="line"><span class="comment">//tip: 1、第一个数不会调用scan中的方法;2、参数sum是上一个返回的数，integer是新传入的数</span></span><br></pre></td></tr></table></figure></p><h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><p><img src="http://reactivex.io/documentation/operators/images/window.C.png" alt="window"><br>RxJava的window()函数和buffer()很像，但是它发射的是Observable而不是列表.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Observable.range(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">        .window(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Observable&lt;Integer&gt; integerObservable)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"-----group"</span>);</span><br><span class="line">                integerObservable.subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"value:"</span>+ integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">*  -----group</span></span><br><span class="line"><span class="comment">*  value:0</span></span><br><span class="line"><span class="comment">*  value:1</span></span><br><span class="line"><span class="comment">*  value:2</span></span><br><span class="line"><span class="comment">*  -----group</span></span><br><span class="line"><span class="comment">*  value:3</span></span><br><span class="line"><span class="comment">*  value:4</span></span><br><span class="line"><span class="comment">*  value:5</span></span><br><span class="line"><span class="comment">*  -----group</span></span><br><span class="line"><span class="comment">*  value:6</span></span><br><span class="line"><span class="comment">*  value:7</span></span><br><span class="line"><span class="comment">*  value:8</span></span><br><span class="line"><span class="comment">*  -----group</span></span><br><span class="line"><span class="comment">*  value:9</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure></p><h3 id="过滤类Obervable"><a href="#过滤类Obervable" class="headerlink" title="过滤类Obervable"></a>过滤类Obervable</h3><h4 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h4><p><img src="http://reactivex.io/documentation/operators/images/debounce.png" alt="debounce"><br>触发后等待一段时间后发射，期间被重新触发则重置时间开始新的等待。</p><blockquote><p>使用场景：搜索框输入文字后需要在一段时间内无操作后访问服务器获取数据。</p></blockquote><h4 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h4><p><img src="http://reactivex.io/documentation/operators/images/distinct.png" alt="distinct"><br>对序列使用distinct()函数去掉重复的数据</p><h4 id="ElementAt-elementAtOrDefault"><a href="#ElementAt-elementAtOrDefault" class="headerlink" title="ElementAt/elementAtOrDefault"></a>ElementAt/elementAtOrDefault</h4><p>elementAt()函数仅从一个序列中发射第n个元素然后就完成了。如果我们想查找第五个元素但是可观测序列只有三个元素可供发射时该怎么办？我们可以使用elementAtOrDefault()。</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>RxJava让我们使用filter()方法来过滤我们观测序列中不想要的值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable.range(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">        .filter(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                System.out.println(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//输出：0 2 4 6 8</span></span><br></pre></td></tr></table></figure></p><h4 id="First-last"><a href="#First-last" class="headerlink" title="First/last"></a>First/last</h4><p>first()方法和last()方法很容易弄明白。它们从Observable中只发射第一个元素或者最后一个元素。</p><h4 id="ignoreElements"><a href="#ignoreElements" class="headerlink" title="ignoreElements"></a>ignoreElements</h4><p>忽略所有的数据，只在终止时有反应</p><h4 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h4><p>在Observable后面加一个sample()，我们将创建一个新的可观测序列，它将在一个指定的时间间隔里由Observable发射最近一次的数值</p><h4 id="take-takeLast"><a href="#take-takeLast" class="headerlink" title="take/takeLast"></a>take/takeLast</h4><p>take()函数用整数N来作为一个参数，从原始的序列中发射前N个元素，然后完成。<br>takeLast，从原始的序列中发射后N个元素，然后完成。</p><h4 id="skip-skipLast"><a href="#skip-skipLast" class="headerlink" title="skip/skipLast"></a>skip/skipLast</h4><p>跳过前面或者后N个元素</p><h3 id="组合类Obervable"><a href="#组合类Obervable" class="headerlink" title="组合类Obervable"></a>组合类Obervable</h3><h4 id="And-Then-When"><a href="#And-Then-When" class="headerlink" title="And/Then/When"></a>And/Then/When</h4><p>属于<code>rxjava-joins</code>模块</p><h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p><img src="http://reactivex.io/documentation/operators/images/combineLatest.png" alt="combineLatest"><br>将两个队列通过fun方法联合，注意联合的两个数据分别为各个队列当前最后发射的数据。（若其中一个队列未发射数据，fun方法不会发生）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;Long&gt; oa = Observable.interval(<span class="number">2</span>, TimeUnit.SECONDS).map(<span class="keyword">new</span> Func1&lt;Long, Long&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> + aLong;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Observable&lt;Long&gt; ob = Observable.interval(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">Observable</span><br><span class="line">        .combineLatest(oa, ob, <span class="keyword">new</span> Func2&lt;Long, Long, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long aLong, Long aLong2)</span> </span>&#123;</span><br><span class="line">                Long value = aLong + aLong2;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"oa:"</span> + aLong + <span class="string">",ob:"</span> + aLong2 + <span class="string">",value:"</span> + value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  输出：</span></span><br><span class="line"><span class="comment"> *  oa:100,ob:0,value:100</span></span><br><span class="line"><span class="comment"> *  oa:101,ob:0,value:101</span></span><br><span class="line"><span class="comment"> *  oa:102,ob:0,value:102</span></span><br><span class="line"><span class="comment"> *  oa:102,ob:1,value:103</span></span><br><span class="line"><span class="comment"> *  oa:103,ob:1,value:104</span></span><br><span class="line"><span class="comment"> *  oa:103,ob:2,value:105</span></span><br><span class="line"><span class="comment"> *  oa:104,ob:2,value:106</span></span><br><span class="line"><span class="comment"> *  oa:105,ob:2,value:107</span></span><br><span class="line"><span class="comment"> *  oa:105,ob:3,value:108</span></span><br><span class="line"><span class="comment"> *  ...</span></span><br><span class="line"><span class="comment"> * */</span></span><br></pre></td></tr></table></figure></p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p><img src="http://reactivex.io/documentation/operators/images/join_.png" alt="join"><br>如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;Long&gt; oa = Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS).map(aLong -&gt; <span class="number">1000</span> + aLong);</span><br><span class="line">Observable&lt;Long&gt; ob = Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">oa.join(ob, <span class="keyword">new</span> Func1&lt;Long, Observable&lt;Long&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.timer(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> Func1&lt;Long, Observable&lt;Long&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.timer(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> Func2&lt;Long, Long, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long aLong, Long aLong2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"oa:"</span> + String.valueOf(aLong) + <span class="string">",ob:"</span> + String.valueOf(aLong2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  解释：</span></span><br><span class="line"><span class="comment">//  join有4个参数，oa.join(ob,leftFunc,rightFunc,resultFunc),leftFunc和rightFunc都会返回一个Observable.</span></span><br><span class="line"><span class="comment">//  oa对应leftFunc,从oa进入leftFunc的Observable到被发射,我们称其为oa时间段</span></span><br><span class="line"><span class="comment">//  ob对应rightFunc,同理ob也有一个时间段</span></span><br><span class="line"><span class="comment">//  假设oa时间段，此时oa数据为1000，ob队列发射了0,1两个数据，那么最后rightFunc会被调用2次（排列组合），其分别为</span></span><br><span class="line"><span class="comment">//  1000 0</span></span><br><span class="line"><span class="comment">//  1000 1</span></span><br><span class="line"><span class="comment">//  同理，ob时间段，此时ob数据为0，oa队列发射了1000,1001两个数据，那么最后rightFunc会被调用2次（排列组合），为</span></span><br><span class="line"><span class="comment">//  1000 0</span></span><br><span class="line"><span class="comment">//  1001 0</span></span><br></pre></td></tr></table></figure></p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p><img src="http://reactivex.io/documentation/operators/images/mergeDelayError.C.png" alt="merge"><br>合并多个序列,根据时间排序<br>mergeDelayError：它能从一个Observable中继续发射数据即便是其中有一个抛出了错误</p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p><img src="http://reactivex.io/documentation/operators/images/zip.o.png" alt="zip"><br>zip() 合并两个或者多个Observables发射出的数据项，根据指定的函数Func* 变换它们，并发射一个新值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;Long&gt; oa = Observable.interval(<span class="number">2</span>, TimeUnit.SECONDS).map(aLong -&gt; <span class="number">1000</span> + aLong);</span><br><span class="line">Observable&lt;Long&gt; ob = Observable.interval(<span class="number">4</span>, TimeUnit.SECONDS);</span><br><span class="line">Observable.zip(oa, ob, <span class="keyword">new</span> Func2&lt;Long, Long, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long aLong, Long aLong2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"oa:"</span> + String.valueOf(aLong) + <span class="string">",ob:"</span> + String.valueOf(aLong2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(System.out::println);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  输出：</span></span><br><span class="line"><span class="comment"> *  oa:1000,ob:0</span></span><br><span class="line"><span class="comment"> *  oa:1001,ob:1</span></span><br><span class="line"><span class="comment"> *  oa:1002,ob:2</span></span><br><span class="line"><span class="comment"> *  oa:1003,ob:3</span></span><br><span class="line"><span class="comment"> *  oa:1004,ob:4</span></span><br><span class="line"><span class="comment"> *  ...</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//tip: 必定一一对应进行压缩合并</span></span><br></pre></td></tr></table></figure></p><h3 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h3><blockquote><p>  <strong>materialize( )</strong> — 将Observable转换成一个通知列表convert an Observable into a list of Notifications<br>    <strong>dematerialize( )</strong> — 将上面的结果逆转回一个Observable<br>    <strong>timestamp( )</strong> — 给Observable发射的每个数据项添加一个时间戳<br>    <strong>serialize( )</strong> — 强制Observable按次序发射数据并且要求功能是完好的<br>    <strong>cache( )</strong> — 记住Observable发射的数据序列并发射相同的数据序列给后续的订阅者<br>    <strong>observeOn( )</strong> — 指定观察者观察Observable的调度器<br>    <strong>subscribeOn( )</strong> — 指定Observable执行任务的调度器<br>    <strong>doOnEach( )</strong> — 注册一个动作，对Observable发射的每个数据项使用<br>    <strong>doOnCompleted( )</strong> — 注册一个动作，对正常完成的Observable使用<br>    <strong>doOnError( )</strong> — 注册一个动作，对发生错误的Observable使用<br>    <strong>doOnTerminate( )</strong> — 注册一个动作，对完成的Observable使用，无论是否发生错误<br>    <strong>doOnSubscribe( )</strong> — 注册一个动作，在观察者订阅时使用<br>    <strong>doOnUnsubscribe( )</strong> — 注册一个动作，在观察者取消订阅时使用<br>    <strong>finallyDo( )</strong> — 注册一个动作，在Observable完成时使用<br>    <strong>delay( )</strong> — 延时发射Observable的结果<br>    <strong>delaySubscription( )</strong> — 延时处理订阅请求<br>    <strong>timeInterval( )</strong> — 定期发射数据<br>    <strong>using( )</strong> — 创建一个只在Observable生命周期存在的资源<br>    <strong>single( )</strong> — 强制返回单个数据，否则抛出异常<br>    <strong>singleOrDefault( )</strong> — 如果Observable完成时返回了单个数据，就返回它，否则返回默认数据<br>    <strong>toFuture( ), toIterable( ), toList( )</strong> — 将Observable转换为其它对象或数据结构</p></blockquote><h3 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h3><p>StrictMode帮助我们侦测敏感的活动，如我们无意的在主线程执行磁盘访问或者网络调用。正如你所知道的，在主线程执行繁重的或者长时的任务是不可取的。因为Android应用的主线程时UI线程，它被用来处理和UI相关的操作：这也是获得更平滑的动画体验和响应式App的唯一方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class="line">    StrictMode.setThreadPolicy(<span class="keyword">new</span> StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build()); </span><br><span class="line">    StrictMode.setVmPolicy(<span class="keyword">new</span> StrictMode.VmPolicy.Builder().detectAll().penaltyLog().build());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a><br><a href="http://reactivex.io/" target="_blank" rel="noopener">reactivex官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源项目：一个高度自由的轻量化Slider</title>
      <link href="/2016/06/03/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%B8%80%E4%B8%AA%E9%AB%98%E5%BA%A6%E8%87%AA%E7%94%B1%E7%9A%84%E8%BD%BB%E9%87%8F%E5%8C%96Slider/"/>
      <url>/2016/06/03/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%B8%80%E4%B8%AA%E9%AB%98%E5%BA%A6%E8%87%AA%E7%94%B1%E7%9A%84%E8%BD%BB%E9%87%8F%E5%8C%96Slider/</url>
      
        <content type="html"><![CDATA[<p>这是一款我刚写的开源库，起初写这个是因为我想要一个可以高度自定义化的轮播器，它包括了一下几个特点：  </p><blockquote><p>使用自己项目中的ImageLoader,而不是被迫使用库中的图片加载器；<br>库中内置几款常用的指示器，也可以创建自己想要的指示器；<br>丰富多彩的转场动画，亦可以发挥你的创意创造新的特效；<br>可以为每一页建立动画效果。</p></blockquote><p><a href="https://github.com/cpacm/SimpleSlider" target="_blank" rel="noopener">Github地址</a></p><h3 id="关于无限轮播"><a href="#关于无限轮播" class="headerlink" title="关于无限轮播"></a>关于无限轮播</h3><p>一般的ViewPager播放到最后一个位置时，若要返回到第一个位置则必须从右向左，作为Banner时这是不自然的过渡效果。<br>我们知道ViewPager显示的个数是由PagerAdaper的<code>getCount()</code>方法决定的，既然如此那我们可以给它赋予一个极大的值使ViewPager不断向右轮播，这也是整个无限轮播的核心思想。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfinitePagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"InfinitePagerAdapter"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BaseSliderAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfinitePagerAdapter</span><span class="params">(BaseSliderAdapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">        adapter.registerDataSetObserver(<span class="keyword">new</span> DataSetObserver() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                notifyDataSetChanged();</span><br><span class="line">                <span class="keyword">super</span>.onChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseSliderAdapter <span class="title">getRealAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adapter.getPageTitle(position % getRealCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// warning: scrolling to very high values (1,000,000+) results in</span></span><br><span class="line">        <span class="comment">// strange drawing behaviour</span></span><br><span class="line">        <span class="keyword">if</span> (getRealCount() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (getRealCount() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the &#123;<span class="doctag">@link</span> #getCount()&#125; result of the wrapped adapter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRealCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adapter.getCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseSliderView <span class="title">getSliderView</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adapter.getSliderView(position % getRealCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getRealCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> virtualPosition = position % getRealCount();</span><br><span class="line">        debug(<span class="string">"instantiateItem: real position: "</span> + position);</span><br><span class="line">        debug(<span class="string">"instantiateItem: virtual position: "</span> + virtualPosition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// only expose virtual position to the inner adapter</span></span><br><span class="line">        <span class="keyword">return</span> adapter.instantiateItem(container, virtualPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getRealCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> virtualPosition = position % getRealCount();</span><br><span class="line">        debug(<span class="string">"destroyItem: real position: "</span> + position);</span><br><span class="line">        debug(<span class="string">"destroyItem: virtual position: "</span> + virtualPosition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// only expose virtual position to the inner adapter</span></span><br><span class="line">        adapter.destroyItem(container, virtualPosition, object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Delegate rest of methods directly to the inner adapter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishUpdate</span><span class="params">(ViewGroup container)</span> </span>&#123;</span><br><span class="line">        adapter.finishUpdate(container);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adapter.isViewFromObject(view, object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreState</span><span class="params">(Parcelable bundle, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        adapter.restoreState(bundle, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Parcelable <span class="title">saveState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adapter.saveState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startUpdate</span><span class="params">(ViewGroup container)</span> </span>&#123;</span><br><span class="line">        adapter.startUpdate(container);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * End delegation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在代码中还存在着 <code>BaseSliderAdapter</code> 另一个 PagerAdapter ，这是一个正常的PagerAdapter，它既是数据的真正载体同时也起着维护viewpager真正个数的作用。</p><p>但用这个方法实现的无限轮播存在着一个很大的缺陷，在 page 页少于3个的情况下会出现问题，这是由于ViewPager本身的机制导致的。<br>简单来说，ViewPager在显示的时候会同时存在3个page页，当前显示页，当前显示的前一页，当前显示的后一页。当我们轮播到下一页时，原来的前一页会被回收，原来的当前页变成前一页，原来的后一页变成当前页，同时会加载出新的一页作为后一页。<br>而在无限轮播小于等于3页时，由于前一页可能没有被回收就被当做新的一页加载到后一页中，这就导致了view重复被ViewGroup添加，而在Android中View只能被允许拥有一个ParentView,这里就出现了问题。<br>所以在page页少于等于3页的时候还是要使用基础的 PagerAdapter。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/BasicSlider.webp" alt="BasicSlider"></p><h3 id="关于指示器"><a href="#关于指示器" class="headerlink" title="关于指示器"></a>关于指示器</h3><p>指示器可以通过继承 <code>ViewPager.OnPageChangeListener</code>与ViewPager保持联动，其监听器包括以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 滑动时的参数变化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 滑动到第几页</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 滑动时的状态变化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>剩下的就是看你怎么定义指示器的界面，附上指示器演示图和一个自定义的指示器代码<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/IndicatorSlider.webp" alt="indicator"></p><h3 id="关于转场动画"><a href="#关于转场动画" class="headerlink" title="关于转场动画"></a>关于转场动画</h3><p>ViewPager有个方法叫做<code>setPageTransformer(boolean reverseDrawingOrder, PageTransformer transformer)</code>用于设置ViewPager切换时的动画效果<br>但注意这只能在3.0及其以后使用。因为View的动画使用的是属性动画，而属性动画是3.0才推出。当然这个问题可以克服，首先先使用<code>nineoldandroids</code>让动画在3.0之前也能跑起来，然后再去修改ViewPager的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageTransformer</span><span class="params">(<span class="keyword">boolean</span> reverseDrawingOrder, PageTransformer transformer)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">11</span>) &#123;  </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> hasTransformer = transformer != <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> needsPopulate = hasTransformer != (mPageTransformer != <span class="keyword">null</span>);  </span><br><span class="line">        mPageTransformer = transformer;  </span><br><span class="line">        setChildrenDrawingOrderEnabledCompat(hasTransformer);  </span><br><span class="line">        <span class="keyword">if</span> (hasTransformer) &#123;  </span><br><span class="line">            mDrawingOrder = reverseDrawingOrder ? DRAW_ORDER_REVERSE : DRAW_ORDER_FORWARD;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            mDrawingOrder = DRAW_ORDER_DEFAULT;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (needsPopulate) populate();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>去除<code>if (Build.VERSION.SDK_INT &gt;= 11)</code>这个if判断就行了。<br>所有的PageTransformer都要继承<code>ViewPager.PageTransformer</code>接口，其中包含的方法只有一个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中position反映的是view的位置变化。<br>假设现在ViewPager在A页现在滑出B页，则:<br>A页的position变化就是( 0, -1]<br>B页的position变化就是[ 1 , 0 ]<br>根据这个position就可以做出多样的转场变化了。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/TransformSlider.webp" alt="Transform"></p><h3 id="关于pager动画"><a href="#关于pager动画" class="headerlink" title="关于pager动画"></a>关于pager动画</h3><p>同样要利用 <code>ViewPager.OnPageChangeListener</code> 监听ViewPager的变化以实现每个界面的变化。<br>Animation接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnAnimationListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNextAnimationStart</span><span class="params">(BaseSliderView slider)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNextAnimationEnd</span><span class="params">(BaseSliderView slider)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPreAnimationStart</span><span class="params">(BaseSliderView slider)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPreAnimationEnd</span><span class="params">(BaseSliderView slider)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>监听变化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> ViewPager&#125; that allows define custom animation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimationViewPager</span> <span class="keyword">extends</span> <span class="title">ViewPager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>, prePositon = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> OnAnimationListener animationListener;</span><br><span class="line">    <span class="keyword">private</span> BaseSliderView slider, preSlider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> animating = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnimationViewPager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        initViewPager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnimationViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        initViewPager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addOnPageChangeListener(<span class="keyword">new</span> OnPageChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (position == <span class="number">0</span> &amp;&amp; positionOffset == <span class="number">0</span>) &#123;</span><br><span class="line">                    animateSliderEnd(position);</span><br><span class="line">                    <span class="keyword">if</span> (slider != <span class="keyword">null</span>)</span><br><span class="line">                        animationListener.onNextAnimationEnd(slider);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">                prePositon = AnimationViewPager.<span class="keyword">this</span>.position;</span><br><span class="line">                AnimationViewPager.<span class="keyword">this</span>.position = position;</span><br><span class="line">                <span class="keyword">if</span> (prePositon &gt; position)</span><br><span class="line">                    animateSliderStart(position, position + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prePositon &lt; position)</span><br><span class="line">                    animateSliderStart(position, position - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (state == SCROLL_STATE_IDLE) &#123;</span><br><span class="line">                    animateSliderEnd(position);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateSliderStart</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> prePositon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (animationListener == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        BaseSliderView slider = <span class="keyword">null</span>, preSlider = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (getAdapter() <span class="keyword">instanceof</span> InfinitePagerAdapter) &#123;</span><br><span class="line">            InfinitePagerAdapter pagerAdapter = (InfinitePagerAdapter) getAdapter();</span><br><span class="line">            slider = pagerAdapter.getSliderView(position);</span><br><span class="line">            preSlider = pagerAdapter.getSliderView(prePositon);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getAdapter() <span class="keyword">instanceof</span> BaseSliderAdapter) &#123;</span><br><span class="line">            BaseSliderAdapter sliderAdapter = (BaseSliderAdapter) getAdapter();</span><br><span class="line">            slider = sliderAdapter.getSliderView(position);</span><br><span class="line">            preSlider = sliderAdapter.getSliderView(prePositon);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slider != <span class="keyword">null</span>)</span><br><span class="line">            animationListener.onNextAnimationStart(slider);</span><br><span class="line">        <span class="keyword">if</span> (preSlider != <span class="keyword">null</span>)</span><br><span class="line">            animationListener.onPreAnimationStart(preSlider);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateSliderEnd</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (animationListener == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (getAdapter() <span class="keyword">instanceof</span> InfinitePagerAdapter) &#123;</span><br><span class="line">            InfinitePagerAdapter pagerAdapter = (InfinitePagerAdapter) getAdapter();</span><br><span class="line">            <span class="keyword">if</span> (slider == <span class="keyword">null</span>) slider = pagerAdapter.getSliderView(position);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (slider != pagerAdapter.getSliderView(position)) &#123;</span><br><span class="line">                preSlider = slider;</span><br><span class="line">                slider = pagerAdapter.getSliderView(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getAdapter() <span class="keyword">instanceof</span> BaseSliderAdapter) &#123;</span><br><span class="line">            BaseSliderAdapter sliderAdapter = (BaseSliderAdapter) getAdapter();</span><br><span class="line">            <span class="keyword">if</span> (slider == <span class="keyword">null</span>) slider = sliderAdapter.getSliderView(position);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (slider != sliderAdapter.getSliderView(position)) &#123;</span><br><span class="line">                preSlider = slider;</span><br><span class="line">                slider = sliderAdapter.getSliderView(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slider != <span class="keyword">null</span>)</span><br><span class="line">            animationListener.onNextAnimationEnd(slider);</span><br><span class="line">        <span class="keyword">if</span> (preSlider != <span class="keyword">null</span>)</span><br><span class="line">            animationListener.onPreAnimationEnd(preSlider);</span><br><span class="line">        animating = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OnAnimationListener <span class="title">getAnimationListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animationListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimationListener</span><span class="params">(OnAnimationListener animationListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animationListener = animationListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承OnAnimationListener接口实现后的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDescriptionAnimation</span> <span class="keyword">implements</span> <span class="title">OnAnimationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> DURATION = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNextAnimationStart</span><span class="params">(BaseSliderView slider)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"simpleSlider"</span>, <span class="string">"onNextAnimationStart:"</span> + slider.getPageTitle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNextAnimationEnd</span><span class="params">(BaseSliderView slider)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"simpleSlider"</span>, <span class="string">"onNextAnimationEnd:"</span> + slider.getPageTitle());</span><br><span class="line">        DescriptionSliderView sliderView = (DescriptionSliderView) slider;</span><br><span class="line">        <span class="keyword">if</span> (sliderView.getTitleLayout().getVisibility() != View.VISIBLE)</span><br><span class="line">            translateShowAnimate(sliderView.getTitleLayout());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPreAnimationStart</span><span class="params">(BaseSliderView slider)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"simpleSlider"</span>, <span class="string">"onPreAnimationStart:"</span> + slider.getPageTitle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPreAnimationEnd</span><span class="params">(BaseSliderView slider)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"simpleSlider"</span>, <span class="string">"onPreAnimationEnd:"</span> + slider.getPageTitle());</span><br><span class="line">        DescriptionSliderView sliderView = (DescriptionSliderView) slider;</span><br><span class="line">        alphaHideAnimate(sliderView.getTitleLayout());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alphaHideAnimate</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        v.clearAnimation();</span><br><span class="line">        v.setVisibility(View.INVISIBLE);</span><br><span class="line">        AlphaAnimation aa = <span class="keyword">new</span> AlphaAnimation(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        aa.setDuration(DURATION);</span><br><span class="line">        v.startAnimation(aa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translateShowAnimate</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        v.setVisibility(View.VISIBLE);</span><br><span class="line">        v.clearAnimation();</span><br><span class="line">        TranslateAnimation ta = <span class="keyword">new</span> TranslateAnimation(<span class="number">0</span>, <span class="number">0</span>, v.getHeight(), <span class="number">0</span>);</span><br><span class="line">        ta.setDuration(DURATION);</span><br><span class="line">        v.startAnimation(ta);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将你的代码上传 Bintray 仓库</title>
      <link href="/2016/06/01/%E5%B0%86%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%20Bintray%20%E4%BB%93%E5%BA%93/"/>
      <url>/2016/06/01/%E5%B0%86%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%20Bintray%20%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 Android Studio 中，我们通常可以利用 gradle 来导入别人写的第三方库，通常可以简单得使用一句话就能搞定整个导包过程，比如：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'net.cpacm.moneytext:moneyview:1.0.0'</span></span><br></pre></td></tr></table></figure></p><p>在这个过程中，Android Studio 会从 Maven 仓库服务器中下载所对应的包。现在比较通用的两个服务器分别为 Jcenter 和 Maven Central。本文主要讲的就是Jcenter了，Android Studio 默认使用的服务器仓库。</p><h3 id="Jcenter"><a href="#Jcenter" class="headerlink" title="Jcenter"></a>Jcenter</h3><p>Jcenter 是 <a href="www.bintray.com">bintray.com</a> 所使用的 Maven 仓库。与 Maven Central 相比，jcenter 的速度更快，包含的库更多，UI界面更友好，更容易使用，同时 bintray 还支持将 jcenter 上传到 Maven Central 的功能。 </p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/bintray.png" alt="bintray"></p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>以前使用过 Maven 的可能会比较清楚，导入的语句如何指向仓库中唯一存在的库。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'net.cpacm.simpleslider:library:1.0.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'GROUP_ID:ARTIFACT_ID:VERSION'</span></span><br></pre></td></tr></table></figure></p><p>其中<br><code>GROUP_ID</code> 是指包所在的组，比如我包放在 <strong>net.cpacm.simpleslider</strong> 中， 那么我的 <code>GROUP_ID</code> 就是 <strong>net.cpacm.simpleslider</strong>。<br><code>ARTIFACT_ID</code> 是指工程名字，一般在android中都为<strong>library</strong>。<br><code>VERSION</code> 代表使用的包的版本。</p><h2 id="Bintray-使用"><a href="#Bintray-使用" class="headerlink" title="Bintray 使用"></a>Bintray 使用</h2><p><code>请科学上网</code></p><p>bintray 支持 <a href="www.github.com">github</a> 和 <a href="plus.google.com">google+</a> 第三方直接登录。<br>登录后进入 Maven 仓库建立要使用的包，同时填入相应的对应信息。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/maven.png" alt="maven"><br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/package.png" alt="message"><br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/message.png" alt="message"></p><h2 id="Gradle-配置"><a href="#Gradle-配置" class="headerlink" title="Gradle 配置"></a>Gradle 配置</h2><p>首先确保你要上传的第三方包是一个 library，作为一个项目的 module 存在。</p><h3 id="project-gradle"><a href="#project-gradle" class="headerlink" title="project gradle"></a>project gradle</h3><p>在 project gradle 中加入需要的依赖包<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.1.0'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="local-properties"><a href="#local-properties" class="headerlink" title="local.properties"></a>local.properties</h3><p>在项目的 local.properties 文件里面加入 <strong>api-key</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bintray.user=YOUR_BINTRAY_USERNAME</span><br><span class="line">bintray.apikey=YOUR_BINTRAY_API_KEY</span><br></pre></td></tr></table></figure></p><p>在 bintray 网站的个人信息编辑页可以找到。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/api-key.png" alt="api key"><br>对了，记得不要把 <code>local.properties</code> 传到 github网站上导致个人信息的泄露。</p><h3 id="library-gradle"><a href="#library-gradle" class="headerlink" title="library gradle"></a>library gradle</h3><p>修改 library 的 gradle 信息<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line"><span class="comment">// add plugin</span></span><br><span class="line">apply plugin: <span class="string">'com.github.dcendents.android-maven'</span></span><br><span class="line">apply plugin: <span class="string">'com.jfrog.bintray'</span></span><br><span class="line"></span><br><span class="line">version = <span class="string">'1.0.0'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.2"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">11</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> sourcesJar(type: Jar) &#123;</span><br><span class="line">    <span class="keyword">from</span> android.<span class="keyword">sourceSets</span>.main.java.srcDirs</span><br><span class="line">    classifier = <span class="string">'sources'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> javadoc(type: Javadoc) &#123;</span><br><span class="line">    <span class="keyword">source</span> = android.<span class="keyword">sourceSets</span>.main.java.srcDirs</span><br><span class="line">    <span class="keyword">classpath</span> += <span class="keyword">project</span>.files(android.getBootClasspath().<span class="keyword">join</span>(<span class="keyword">File</span>.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = <span class="string">'javadoc'</span></span><br><span class="line">    <span class="keyword">from</span> javadoc.<span class="keyword">destinationDir</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">artifacts</span> &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">'net.cpacm.simpleslider'</span></span><br><span class="line">install &#123;</span><br><span class="line">    <span class="keyword">repositories</span>.mavenInstaller &#123;</span><br><span class="line">        pom.<span class="keyword">project</span> &#123;</span><br><span class="line">            packaging <span class="string">'aar'</span></span><br><span class="line">            groupId <span class="string">'net.cpacm.simpleslider'</span> <span class="comment">//自己定义的组名</span></span><br><span class="line">            artifactId <span class="string">'library'</span> </span><br><span class="line"></span><br><span class="line">            name <span class="string">'simpleslider'</span></span><br><span class="line">            <span class="keyword">description</span> <span class="string">'A simple slider allows you to easily use.'</span></span><br><span class="line">            url <span class="string">'https://github.com/cpacm/SimpleSlider'</span></span><br><span class="line">            inceptionYear <span class="string">'2016'</span></span><br><span class="line"></span><br><span class="line">            licenses &#123;</span><br><span class="line">                license &#123;</span><br><span class="line">                    name <span class="string">'The Apache Software License, Version 2.0'</span></span><br><span class="line">                    url <span class="string">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class="line">                    distribution <span class="string">'repo'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            scm &#123;</span><br><span class="line">                connection <span class="string">'https://github.com/cpacm/SimpleSlider.git'</span></span><br><span class="line">                url <span class="string">'https://github.com/cpacm/SimpleSlider'</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            developers &#123;</span><br><span class="line">                developer &#123;</span><br><span class="line">                    name <span class="string">'cpacm'</span></span><br><span class="line">                    email <span class="string">'shenliming@gmail.com'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bintray</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取local.propertes的信息</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">properties.load(<span class="keyword">project</span>.rootProject.<span class="keyword">file</span>(<span class="string">'local.properties'</span>).newDataInputStream()) </span><br><span class="line"></span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(<span class="string">"bintray.user"</span>)</span><br><span class="line">    key = properties.getProperty(<span class="string">"bintray.apikey"</span>)</span><br><span class="line">    publish = <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">configurations</span> = [<span class="string">'archives'</span>]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        <span class="comment">//填入 bintray 上对应的 package 信息</span></span><br><span class="line">        repo = <span class="string">'maven'</span></span><br><span class="line">        name = <span class="string">'SimpleSlider'</span></span><br><span class="line">        vcsUrl = <span class="string">'https://github.com/cpacm/SimpleSlider.git'</span></span><br><span class="line">        websiteUrl = <span class="string">'https://github.com/cpacm/SimpleSlider'</span></span><br><span class="line">        licenses = [<span class="string">'Apache-2.0'</span>]</span><br><span class="line">        issueTrackerUrl = <span class="string">'https://github.com/cpacm/SimpleSlider/issues'</span></span><br><span class="line">        publicDownloadNumbers = <span class="keyword">true</span></span><br><span class="line">        version &#123;</span><br><span class="line">            name = <span class="string">'1.0.0'</span></span><br><span class="line">            desc = <span class="string">'simple slider release'</span></span><br><span class="line">            vcsTag = <span class="string">'1.0.0'</span></span><br><span class="line">            attributes = [<span class="string">'gradle-plugin'</span>: <span class="string">'com.use.less:com.use.less.gradle:gradle-useless-plugin'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="keyword">options</span>.encoding = <span class="string">"UTF-8"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> findConventions &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="keyword">project</span>.getConvention()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="安装和上传"><a href="#安装和上传" class="headerlink" title="安装和上传"></a>安装和上传</h3><p>在Android Studio Terminal窗口中运行命令<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradlew install</span><br><span class="line">gradlew bintrayUpload</span><br></pre></td></tr></table></figure></p><p>至此已经打包上传结束，可以回到 bintray 网站看看结果。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/jcenter.png" alt="jcenter"></p><h3 id="添加到Jcenter"><a href="#添加到Jcenter" class="headerlink" title="添加到Jcenter"></a>添加到Jcenter</h3><p>点击上图的 <strong>Add to jcenter</strong> 按钮，向管理员申请添加到 jcenter 仓库，一般等个几小时就能通过。<br>最后在 <a href="https://jcenter.bintray.com" target="_blank" rel="noopener">https://jcenter.bintray.com</a> 找到自己的库就表示成功了。  </p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>（1）<a href="http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en" target="_blank" rel="noopener">http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jcenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源项目：一款用于显示金钱文字的TextView</title>
      <link href="/2016/01/22/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%B8%80%E6%AC%BE%E7%94%A8%E4%BA%8E%E6%98%BE%E7%A4%BA%E9%87%91%E9%92%B1%E6%96%87%E5%AD%97%E7%9A%84TextView/"/>
      <url>/2016/01/22/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%B8%80%E6%AC%BE%E7%94%A8%E4%BA%8E%E6%98%BE%E7%A4%BA%E9%87%91%E9%92%B1%E6%96%87%E5%AD%97%E7%9A%84TextView/</url>
      
        <content type="html"><![CDATA[<p>一直在做一款金融类的app，里面涉及了很多有关金钱数目的显示。但出于设计狮的美观要求，金钱文字是不会老老实实让你摆放好就完了，于是各种各样的设计就出来了，比如说使用自定义的字体，金钱符号比数字小那么一点，数字要格式化掉等等，简直各种闹心。<br>最后实在受不了，自己重新继承<code>TextView</code>写了一个专门显示金钱的文本框，于是这个库就出来了。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/mtv.png" alt="MoneyTextView"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>原理其实很简单，文字里面的各种变化基本上都可以使用<code>Spannable</code>来实现，包括文字的大小，字体，颜色等等。主要做的内容就是将文本里面的合法数字提取出来存放到一个队列里面，记住其原来的位置，最后统一用<code>Spannable</code>处理就行了。</p><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><ul><li>开源地址： <a href="https://github.com/cpacm/MoneyTextView" target="_blank" rel="noopener">MoneyTextView</a></li></ul><embed src="http://www.xiami.com/widget/5188237_1771922334/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent">]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;C++&gt;C++ Primer 读书笔记一</title>
      <link href="/2015/04/06/C-C-Pirmer-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2015/04/06/C-C-Pirmer-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="声明-extern"><a href="#声明-extern" class="headerlink" title="声明 extern"></a>声明 extern</h3><p>1、声明不一定要有extern关键字，如<code>int i；</code>这句话就是一个声明。也可写成<code>extern int i</code>；<br>2、声明不会为变量分配空间。</p><h3 id="固定修饰符-const"><a href="#固定修饰符-const" class="headerlink" title="固定修饰符 const"></a>固定修饰符 const</h3><p>1、const相当于java中的final，一旦被初始化后就不能再改变<br>2、const默认为文件的局部变量<br>3、加上extern修饰符后，const定义的变量才能作用于全局<br>对于非内部数据类型的输入参数，应该将“值传递”的方式改为“const 引用传递”，目的是提高效率。例如将<code>void Func(A a)</code> 改为<code>void Func(const A &amp;a)</code>。<br>对于内部数据类型的输入参数，不要将“值传递”的方式改为“const 引用传递”。否则既达不到提高效率的目的，又降低了函数的可理解性。例如<code>void Func(int x)</code> 不应该改为<code>void Func(const int &amp;x)</code>。<br>4、const引用必须成对出现，即const引用的对象也必须是const<br>5、const引用右端可以是常值</p><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a><strong>typedef</strong></h3><p>1、用于定义类型同义词，即类型的别名<br>2、为了隐藏特定类型的实现,强调使用类型的目的。<br>3、简化复杂的类型定义,使其更易理解。<br>4、允许一种类型用于多个目的,同时使得每次使用该类型的目的明确。</p><h3 id="命名空间using"><a href="#命名空间using" class="headerlink" title="命名空间using"></a>命名空间using</h3><p>使用标准库如std::cin，使用using std::cin;则可直接使用cin关键字。</p><h3 id="迭代器iterator"><a href="#迭代器iterator" class="headerlink" title="迭代器iterator"></a>迭代器iterator</h3><p>1、const_iterator只能读数据，不能写数据<br>2、*iter被称之为解引用，直接指向数据</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十一）——Button控件+自定义Button控件</title>
      <link href="/2015/04/01/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Button%E6%8E%A7%E4%BB%B6-%E8%87%AA%E5%AE%9A%E4%B9%89Button%E6%8E%A7%E4%BB%B6/"/>
      <url>/2015/04/01/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Button%E6%8E%A7%E4%BB%B6-%E8%87%AA%E5%AE%9A%E4%B9%89Button%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>  </p><h2 id="一、基本Button控件"><a href="#一、基本Button控件" class="headerlink" title="一、基本Button控件"></a>一、基本Button控件</h2><p>首先第一步就是往布局文件里拖一个Button控件，当然自己码出来也可以。XML布局如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">     &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line">        android:id="@+id/button1"             &lt;!-- button按钮的id号，程序通过这个id号来查找相应的控件 --&gt;</span><br><span class="line">        android:layout_width="wrap_content"   <span class="comment">&lt;!-- button按钮的宽度 当前意思是 根据内容自动拉伸，其他的还有match_parent，表示根据父控件来调整大小--&gt;</span></span><br><span class="line">        android:layout_height="wrap_content"  <span class="comment">&lt;!-- button按钮的长度--&gt;</span></span><br><span class="line">        android:layout_alignParentTop="true"  <span class="comment">&lt;!-- RelativeLayout布局中,将控件的上边缘和父控件的上边缘对齐 --&gt;</span></span><br><span class="line">        android:layout_centerHorizontal="true"<span class="comment">&lt;!-- RelativeLayout布局中,水平居中的意思 --&gt;</span></span><br><span class="line">        android:layout_marginTop="150dp"      <span class="comment">&lt;!-- RelativeLayout布局中,距离父控件顶端的距离 --&gt;</span></span><br><span class="line">        android:text="Button" /&gt;              <span class="comment">&lt;!-- button按钮上显示的文字信息 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然，一个控件的布局属性还有很多，这些都是需要我们多用多熟悉才行。<br>然后再在程序中调用它<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Button myButton;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//通过id寻找控件，记得寻找控件前一定要先设置好布局文件</span></span><br><span class="line">        myButton = (Button)findViewById(R.id.button1);</span><br><span class="line">        myButton.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                <span class="comment">//这里填写单击按钮后要执行的事件</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        myButton.setOnTouchListener(<span class="keyword">new</span> OnTouchListener()&#123;...&#125;);<span class="comment">//设置触碰到按钮的监听器</span></span><br><span class="line">        myButton.setOnLongClickListener(<span class="keyword">new</span> OnLongClickListener()&#123;...&#125;);<span class="comment">//设置长按按钮的监听器</span></span><br><span class="line">        myButton.setOnHoverListener(<span class="keyword">new</span> OnHoverListener()&#123;...&#125;);<span class="comment">//设置界面覆盖按钮时的监听器</span></span><br><span class="line">        <span class="comment">//还有其它的的监听器，我们可以根据不同的需求来调用相应的监听器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者这样设置监听器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Button myButton;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//寻找控件，记得寻找控件前一定要先设置好布局文件</span></span><br><span class="line">        myButton = (Button)findViewById(R.id.button1);</span><br><span class="line">        myButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//获取点击的View</span></span><br><span class="line">        <span class="keyword">switch</span>(v.getId())&#123;</span><br><span class="line">        <span class="comment">//根据View的id来进行相关操作</span></span><br><span class="line">        <span class="keyword">case</span> R.id.button1:</span><br><span class="line">            <span class="comment">//按钮点击时处理相关的事件</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一个基础功能的button控件就完成了。但当然，这不是我们今天要讲的重点，重点是我们如何自定义一个按钮，而不是使用系统给我们的按钮。</p><h2 id="二、自定义按钮"><a href="#二、自定义按钮" class="headerlink" title="二、自定义按钮"></a>二、自定义按钮</h2><p>我们先来看看效果图吧<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Button_%E8%87%AA%E5%AE%9A%E4%B9%89.png" alt="自定义按钮效果图"><br>这是一个自带进度条的按钮，它可以显示异步任务的进度，当完成后结束操作。我们来看看具体是怎么实现的吧。<br>拆分这个按钮。仔细观察上面的效果图，我们可以把这个按钮分成3个部分，首先是最简单的外面一圈圆，基本上画出个圆放在那里就行了。接着是中间的三角形，正方形以及完成的勾，这个我们可以使用view里的画图类勾勒出来，再使用简单的动画Animation来切换。最后的一部分是覆盖在圆圈上的不断在表示进度的圆圈，这个我们可以不断调用这个view的ondraw来刷新进度。这就是整个按钮的设计思路。我们来看看实际的代码吧。<br><strong>表示进度的圆圈</strong>，我们来新建一个CusImage继承view类，实时的传入进度参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.example.mybutton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line">    <span class="keyword">import</span> android.content.Context;</span><br><span class="line">    <span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line">    <span class="keyword">import</span> android.graphics.Color;</span><br><span class="line">    <span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line">    <span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line">    <span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line">    <span class="keyword">import</span> android.util.DisplayMetrics;</span><br><span class="line">    <span class="keyword">import</span> android.util.Log;</span><br><span class="line">    <span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"ViewConstructor"</span>) </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CusImage</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ButtonLayout b;</span><br><span class="line">        <span class="keyword">private</span> Paint myPaint;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> startAngle, sweepAngle;</span><br><span class="line">        <span class="keyword">private</span> RectF rect;</span><br><span class="line">        <span class="comment">// 默认控件大小</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> pix = <span class="number">160</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CusImage</span><span class="params">(Context context, ButtonLayout b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(context);</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            init();</span><br><span class="line">            <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CusImage</span><span class="params">(Context context, AttributeSet attrs, ButtonLayout b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(context, attrs);</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            init();</span><br><span class="line">            <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            myPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">            DisplayMetrics metrics = getContext().getResources()</span><br><span class="line">                    .getDisplayMetrics();</span><br><span class="line">            <span class="keyword">int</span> width = metrics.widthPixels;</span><br><span class="line">            <span class="keyword">int</span> height = metrics.heightPixels;</span><br><span class="line">            Log.d(<span class="string">"TAG"</span>, width + <span class="string">""</span>);</span><br><span class="line">            Log.d(<span class="string">"TAG"</span>, height + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">float</span> scarea = width * height;</span><br><span class="line">            pix = (<span class="keyword">int</span>) Math.sqrt(scarea * <span class="number">0.0217</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//抗锯齿</span></span><br><span class="line">            myPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//stroke表示空心，Fill表示实心</span></span><br><span class="line">            myPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">            <span class="comment">//颜色</span></span><br><span class="line">            myPaint.setColor(Color.rgb(<span class="number">0</span>, <span class="number">161</span>, <span class="number">234</span>));</span><br><span class="line">            <span class="comment">//设置线条粗细</span></span><br><span class="line">            myPaint.setStrokeWidth(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> startx = (<span class="keyword">float</span>) (pix * <span class="number">0.05</span>);</span><br><span class="line">            <span class="keyword">float</span> endx = (<span class="keyword">float</span>) (pix * <span class="number">0.95</span>);</span><br><span class="line">            <span class="keyword">float</span> starty = (<span class="keyword">float</span>) (pix * <span class="number">0.05</span>);</span><br><span class="line">            <span class="keyword">float</span> endy = (<span class="keyword">float</span>) (pix * <span class="number">0.95</span>);</span><br><span class="line">            <span class="comment">//矩形区域</span></span><br><span class="line">            rect = <span class="keyword">new</span> RectF(startx, starty, endx, endy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 画弧线</span></span><br><span class="line">            <span class="comment">// 在rect这个区域内画，开始的角度，扫过的度数而不是结束的角度,false表示不与圆心连线，true通常用来画扇形，画笔。</span></span><br><span class="line">            canvas.drawArc(rect, startAngle, sweepAngle, <span class="keyword">false</span>, myPaint);</span><br><span class="line">            startAngle = -<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//小于1圈</span></span><br><span class="line">            <span class="keyword">if</span> (sweepAngle &lt; <span class="number">360</span> &amp;&amp;b.flg_frmwrk_mode == <span class="number">2</span>) &#123;</span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b.flg_frmwrk_mode == <span class="number">1</span>)&#123;</span><br><span class="line">                        </span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">//扫完一圈，调用b.finalAnimation()</span></span><br><span class="line">                sweepAngle = <span class="number">0</span>;</span><br><span class="line">                startAngle = -<span class="number">90</span>;</span><br><span class="line">                b.finalAnimation();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 控制控件的大小 http://blog.csdn.net/pi9nc/article/details/18764863</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> desiredWidth = pix;</span><br><span class="line">            <span class="keyword">int</span> desiredHeight = pix;</span><br><span class="line">            <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">            <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">            <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">            <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> width;</span><br><span class="line">            <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果控件宽度是指定大小，宽度为指定的尺寸</span></span><br><span class="line">            <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">                width = widthSize;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthMode == MeasureSpec.AT_MOST) &#123; <span class="comment">// 没有限制，默认内容大小</span></span><br><span class="line">                width = Math.min(desiredWidth, widthSize);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                width = desiredWidth;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果控件高度是指定大小，高度为指定的尺寸</span></span><br><span class="line">            <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">                height = heightSize;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;<span class="comment">// 没有限制，默认内容大小</span></span><br><span class="line">                height = Math.min(desiredHeight, heightSize);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                height = desiredHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设定控件大小</span></span><br><span class="line">            setMeasuredDimension(width, height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 传入参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupprogress</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</span><br><span class="line">            sweepAngle = (<span class="keyword">float</span>) (progress * <span class="number">3.6</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            startAngle = -<span class="number">90</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line">有了表示进度的view之后，我们要在一个viewgroup控件中组装各个部分来实现整个按钮，这里我用的是framelayout  </span><br><span class="line">**ImageView的初始化**</span><br><span class="line">```java</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建各个控件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 按钮的进度条</span></span><br><span class="line">            cusView = <span class="keyword">new</span> CusImage(getContext(), <span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// 按钮中间的形状</span></span><br><span class="line">            buttonimage = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">            <span class="comment">// 完成进度后显示的图像</span></span><br><span class="line">            fillcircle = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">            <span class="comment">//外面一圈圆</span></span><br><span class="line">            full_circle_image = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">            <span class="comment">// 设置控件不接受点击事件</span></span><br><span class="line">            cusView.setClickable(<span class="keyword">false</span>);</span><br><span class="line">            buttonimage.setClickable(<span class="keyword">false</span>);</span><br><span class="line">            fillcircle.setClickable(<span class="keyword">false</span>);</span><br><span class="line">            full_circle_image.setClickable(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            setClickable(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p><strong>设置动画</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置动画及动画监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Setting up and defining view animations.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// http://blog.csdn.net/congqingbin/article/details/7889778</span></span><br><span class="line">        <span class="comment">// RELATIVE_TO_PARENT:与父控件的的中心为重点；RELATIVE_TO_SELF以自己为中心</span></span><br><span class="line">        <span class="comment">// 左上角 分别为0.0f 0.0f 中心点为0.5f，0.5f 右下角1.0f，1.0f</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * arcRotation = new RotateAnimation(0.0f, 360.0f,</span></span><br><span class="line"><span class="comment">         * Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 持续时间1000ms</span></span><br><span class="line">        <span class="comment">// arcRotation.setDuration(500);</span></span><br><span class="line"></span><br><span class="line">        in = <span class="keyword">new</span> AnimationSet(<span class="keyword">true</span>);</span><br><span class="line">        out = <span class="keyword">new</span> AnimationSet(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// http://blog.csdn.net/jason0539/article/details/16370405</span></span><br><span class="line">        out.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">        in.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// http://blog.csdn.net/xsl1990/article/details/17096501</span></span><br><span class="line">        scale_in = <span class="keyword">new</span> ScaleAnimation(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>,</span><br><span class="line">                Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>, Animation.RELATIVE_TO_SELF,</span><br><span class="line">                <span class="number">0.5f</span>);</span><br><span class="line">        scale_out = <span class="keyword">new</span> ScaleAnimation(<span class="number">1.0f</span>, <span class="number">3.0f</span>, <span class="number">1.0f</span>, <span class="number">3.0f</span>,</span><br><span class="line">                Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>, Animation.RELATIVE_TO_SELF,</span><br><span class="line">                <span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缩放动画，起始x轴的缩放为0，y轴的缩放为0，动画后，x，y轴大小与图像尺寸相同</span></span><br><span class="line">        <span class="comment">// x,y可以把它当做宽度和高度</span></span><br><span class="line">        new_scale_in = <span class="keyword">new</span> ScaleAnimation(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>,</span><br><span class="line">                Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>, Animation.RELATIVE_TO_SELF,</span><br><span class="line">                <span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">        new_scale_in.setDuration(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 透明度的动画</span></span><br><span class="line">        fade_in = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">        fade_out = <span class="keyword">new</span> AlphaAnimation(<span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">        scale_in.setDuration(<span class="number">150</span>);</span><br><span class="line">        scale_out.setDuration(<span class="number">150</span>);</span><br><span class="line">        fade_in.setDuration(<span class="number">150</span>);</span><br><span class="line">        fade_out.setDuration(<span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进入的动画集</span></span><br><span class="line">        in.addAnimation(scale_in);</span><br><span class="line">        in.addAnimation(fade_in);</span><br><span class="line">        <span class="comment">// 退出的动画集</span></span><br><span class="line">        out.addAnimation(fade_out);</span><br><span class="line">        out.addAnimation(scale_out);</span><br><span class="line"></span><br><span class="line">        out.setAnimationListener(<span class="keyword">new</span> AnimationListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                System.out.println(<span class="string">"print this"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">                buttonimage.setVisibility(View.GONE);</span><br><span class="line">                buttonimage.setImageBitmap(second_icon_bmp);</span><br><span class="line">                buttonimage.setVisibility(View.VISIBLE);</span><br><span class="line">                buttonimage.startAnimation(in);</span><br><span class="line">                full_circle_image.setVisibility(View.VISIBLE);</span><br><span class="line">                cusView.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">                flg_frmwrk_mode = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"flg_frmwrk_mode"</span> + flg_frmwrk_mode);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        new_scale_in.setAnimationListener(<span class="keyword">new</span> AnimationListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                cusView.setVisibility(View.GONE);</span><br><span class="line">                buttonimage.setVisibility(View.VISIBLE);</span><br><span class="line">                buttonimage.setImageBitmap(third_icon_bmp);</span><br><span class="line">                flg_frmwrk_mode = <span class="number">3</span>;</span><br><span class="line">                buttonimage.startAnimation(in);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>画出各个形状</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置各个画面的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">iconCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating icons using path</span></span><br><span class="line">        <span class="comment">// Create your own icons or feel free to use these</span></span><br><span class="line"></span><br><span class="line">        play = <span class="keyword">new</span> Path();</span><br><span class="line">        play.moveTo(pix * <span class="number">40</span> / <span class="number">100</span>, pix * <span class="number">36</span> / <span class="number">100</span>);</span><br><span class="line">        play.lineTo(pix * <span class="number">40</span> / <span class="number">100</span>, pix * <span class="number">63</span> / <span class="number">100</span>);</span><br><span class="line">        play.lineTo(pix * <span class="number">69</span> / <span class="number">100</span>, pix * <span class="number">50</span> / <span class="number">100</span>);</span><br><span class="line">        play.close();</span><br><span class="line"></span><br><span class="line">        stop = <span class="keyword">new</span> Path();</span><br><span class="line">        stop.moveTo(pix * <span class="number">38</span> / <span class="number">100</span>, pix * <span class="number">38</span> / <span class="number">100</span>);</span><br><span class="line">        stop.lineTo(pix * <span class="number">62</span> / <span class="number">100</span>, pix * <span class="number">38</span> / <span class="number">100</span>);</span><br><span class="line">        stop.lineTo(pix * <span class="number">62</span> / <span class="number">100</span>, pix * <span class="number">62</span> / <span class="number">100</span>);</span><br><span class="line">        stop.lineTo(pix * <span class="number">38</span> / <span class="number">100</span>, pix * <span class="number">62</span> / <span class="number">100</span>);</span><br><span class="line">        stop.close();</span><br><span class="line"></span><br><span class="line">        download_triangle = <span class="keyword">new</span> Path();</span><br><span class="line">        download_triangle.moveTo(pix * <span class="number">375</span> / <span class="number">1000</span>, (pix / <span class="number">2</span>)</span><br><span class="line">                + (pix * <span class="number">625</span> / <span class="number">10000</span>) - (pix * <span class="number">3</span> / <span class="number">100</span>));</span><br><span class="line">        download_triangle.lineTo(pix / <span class="number">2</span>, (pix * <span class="number">625</span> / <span class="number">1000</span>)</span><br><span class="line">                + (pix * <span class="number">625</span> / <span class="number">10000</span>) - (pix * <span class="number">3</span> / <span class="number">100</span>));</span><br><span class="line">        download_triangle.lineTo(pix * <span class="number">625</span> / <span class="number">1000</span>, (pix / <span class="number">2</span>)</span><br><span class="line">                + (pix * <span class="number">625</span> / <span class="number">10000</span>) - (pix * <span class="number">3</span> / <span class="number">100</span>));</span><br><span class="line">        download_triangle.close();</span><br><span class="line"></span><br><span class="line">        download_rectangle = <span class="keyword">new</span> Path();</span><br><span class="line">        download_rectangle.moveTo(pix * <span class="number">4375</span> / <span class="number">10000</span>, (pix / <span class="number">2</span>)</span><br><span class="line">                + (pix * <span class="number">625</span> / <span class="number">10000</span>) - (pix * <span class="number">3</span> / <span class="number">100</span>));</span><br><span class="line">        download_rectangle.lineTo(pix * <span class="number">5625</span> / <span class="number">10000</span>, (pix / <span class="number">2</span>)</span><br><span class="line">                + (pix * <span class="number">625</span> / <span class="number">10000</span>) - (pix * <span class="number">3</span> / <span class="number">100</span>));</span><br><span class="line">        download_rectangle.lineTo(pix * <span class="number">5625</span> / <span class="number">10000</span>, (pix * <span class="number">375</span> / <span class="number">1000</span>)</span><br><span class="line">                + (pix * <span class="number">625</span> / <span class="number">10000</span>) - (pix * <span class="number">3</span> / <span class="number">100</span>));</span><br><span class="line">        download_rectangle.lineTo(pix * <span class="number">4375</span> / <span class="number">10000</span>, (pix * <span class="number">375</span> / <span class="number">1000</span>)</span><br><span class="line">                + (pix * <span class="number">625</span> / <span class="number">10000</span>) - (pix * <span class="number">3</span> / <span class="number">100</span>));</span><br><span class="line">        download_rectangle.close();</span><br><span class="line"></span><br><span class="line">        tick = <span class="keyword">new</span> Path();</span><br><span class="line">        tick.moveTo(pix * <span class="number">30</span> / <span class="number">100</span>, pix * <span class="number">50</span> / <span class="number">100</span>);</span><br><span class="line">        tick.lineTo(pix * <span class="number">45</span> / <span class="number">100</span>, pix * <span class="number">625</span> / <span class="number">1000</span>);</span><br><span class="line">        tick.lineTo(pix * <span class="number">65</span> / <span class="number">100</span>, pix * <span class="number">350</span> / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建各个bitmap添加到framelayout中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Defining and drawing bitmaps and assigning views to the layout</span></span><br><span class="line"></span><br><span class="line">        FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(</span><br><span class="line">                FrameLayout.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                FrameLayout.LayoutParams.WRAP_CONTENT);</span><br><span class="line"></span><br><span class="line">        lp.setMargins(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        fillcircle.setVisibility(View.GONE);</span><br><span class="line"></span><br><span class="line">        Bitmap.Config conf = Bitmap.Config.ARGB_8888; <span class="comment">// see other conf types</span></span><br><span class="line">        Bitmap full_circle_bmp = Bitmap.createBitmap(pix, pix, conf);</span><br><span class="line">        Bitmap fill_circle_bmp = Bitmap.createBitmap(pix, pix, conf);</span><br><span class="line"></span><br><span class="line">        first_icon_bmp = Bitmap.createBitmap(pix, pix, conf); <span class="comment">// Bitmap to draw</span></span><br><span class="line">                                                                <span class="comment">// first icon(</span></span><br><span class="line">                                                                <span class="comment">// Default -</span></span><br><span class="line">                                                                <span class="comment">// Play )</span></span><br><span class="line"></span><br><span class="line">        second_icon_bmp = Bitmap.createBitmap(pix, pix, conf); <span class="comment">// Bitmap to draw</span></span><br><span class="line">                                                                <span class="comment">// second icon(</span></span><br><span class="line">                                                                <span class="comment">// Default -</span></span><br><span class="line">                                                                <span class="comment">// Stop )</span></span><br><span class="line"></span><br><span class="line">        third_icon_bmp = Bitmap.createBitmap(pix, pix, conf); <span class="comment">// Bitmap to draw</span></span><br><span class="line">                                                                <span class="comment">// third icon(</span></span><br><span class="line">                                                                <span class="comment">// Default -</span></span><br><span class="line">                                                                <span class="comment">// Tick )</span></span><br><span class="line"></span><br><span class="line">        Canvas first_icon_canvas = <span class="keyword">new</span> Canvas(first_icon_bmp);</span><br><span class="line">        Canvas second_icon_canvas = <span class="keyword">new</span> Canvas(second_icon_bmp);</span><br><span class="line">        Canvas third_icon_canvas = <span class="keyword">new</span> Canvas(third_icon_bmp);</span><br><span class="line">        Canvas fill_circle_canvas = <span class="keyword">new</span> Canvas(fill_circle_bmp);</span><br><span class="line">        Canvas full_circle_canvas = <span class="keyword">new</span> Canvas(full_circle_bmp);</span><br><span class="line">        <span class="keyword">float</span> startx = (<span class="keyword">float</span>) (pix * <span class="number">0.05</span>);</span><br><span class="line">        <span class="keyword">float</span> endx = (<span class="keyword">float</span>) (pix * <span class="number">0.95</span>);</span><br><span class="line">        System.out.println(<span class="string">"full circle "</span> + full_circle_canvas.getWidth()</span><br><span class="line">                + full_circle_canvas.getHeight());</span><br><span class="line">        <span class="keyword">float</span> starty = (<span class="keyword">float</span>) (pix * <span class="number">0.05</span>);</span><br><span class="line">        <span class="keyword">float</span> endy = (<span class="keyword">float</span>) (pix * <span class="number">0.95</span>);</span><br><span class="line">        rect = <span class="keyword">new</span> RectF(startx, starty, endx, endy);</span><br><span class="line"></span><br><span class="line">        first_icon_canvas.drawPath(play, fill_color); <span class="comment">// Draw second icon on</span></span><br><span class="line">                                                        <span class="comment">// canvas( Default -</span></span><br><span class="line">                                                        <span class="comment">// Stop ).</span></span><br><span class="line">                                                        <span class="comment">// *****Set your second</span></span><br><span class="line">                                                        <span class="comment">// icon here****</span></span><br><span class="line"></span><br><span class="line">        second_icon_canvas.drawPath(stop, icon_color); <span class="comment">// Draw second icon on</span></span><br><span class="line">                                                        <span class="comment">// canvas( Default -</span></span><br><span class="line">                                                        <span class="comment">// Stop ).</span></span><br><span class="line">                                                        <span class="comment">// *****Set your second</span></span><br><span class="line">                                                        <span class="comment">// icon here****</span></span><br><span class="line"></span><br><span class="line">        third_icon_canvas.drawPath(tick, final_icon_color); <span class="comment">// Draw second icon</span></span><br><span class="line">                                                            <span class="comment">// on canvas(</span></span><br><span class="line">                                                            <span class="comment">// Default - Stop ).</span></span><br><span class="line">                                                            <span class="comment">// *****Set your</span></span><br><span class="line">                                                            <span class="comment">// second icon</span></span><br><span class="line">                                                            <span class="comment">// here****</span></span><br><span class="line"></span><br><span class="line">        full_circle_canvas.drawArc(rect, <span class="number">0</span>, <span class="number">360</span>, <span class="keyword">false</span>, stroke_color);</span><br><span class="line">        fill_circle_canvas.drawArc(rect, <span class="number">0</span>, <span class="number">360</span>, <span class="keyword">false</span>, fill_color);</span><br><span class="line"></span><br><span class="line">        buttonimage.setImageBitmap(first_icon_bmp);</span><br><span class="line">        flg_frmwrk_mode = <span class="number">1</span>;</span><br><span class="line">        fillcircle.setImageBitmap(fill_circle_bmp);</span><br><span class="line">        full_circle_image.setImageBitmap(full_circle_bmp);</span><br><span class="line"></span><br><span class="line">        cusView.setVisibility(View.GONE);</span><br><span class="line"></span><br><span class="line">        addView(full_circle_image, lp);</span><br><span class="line">        addView(fillcircle, lp);</span><br><span class="line">        addView(buttonimage, lp);</span><br><span class="line">        addView(cusView, lp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后加上点击按钮时各个状态切换的逻辑关系，这个按钮的布局就完成了。<br>按钮做好了我们可以在Activity中调用它了<br><strong>将其写入到布局文件中</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">     &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.mybutton.ButtonLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/ButtonLayout01"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.example.mybutton.ButtonLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>在activity中设置</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ButtonLayout buttonLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        buttonLayout = (ButtonLayout) findViewById(R.id.ButtonLayout01);</span><br><span class="line">        buttonLayout.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                buttonLayout.animation(); <span class="comment">// Need to call this method for</span></span><br><span class="line">                <span class="comment">// animation and progression</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (buttonLayout.flg_frmwrk_mode == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Start state. Call any method that you want to execute</span></span><br><span class="line"></span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                                    <span class="string">"Starting download"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                                    .show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">new</span> DownLoadSigTask().execute();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (buttonLayout.flg_frmwrk_mode == <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Running state. Call any method that you want to execute</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">new</span> DownLoadSigTask().cancel(<span class="keyword">true</span>);</span><br><span class="line">                    buttonLayout.stop();</span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                                    <span class="string">"Download stopped"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                                    .show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (buttonLayout.flg_frmwrk_mode == <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// End state. Call any method that you want to execute.</span></span><br><span class="line"></span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                                    <span class="string">"Download complete"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                                    .show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadSigTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(<span class="keyword">final</span> String... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Creating dummy task and updating progress</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>;) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (buttonLayout.flg_frmwrk_mode == <span class="number">2</span> &amp;&amp;i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    publishProgress(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// publishing progress to progress arc</span></span><br><span class="line"></span><br><span class="line">            buttonLayout.cusView.setupprogress(progress[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、结束语</p><p>这个按钮我是仿照一个开源项目写的，它的地址是<a href="https://github.com/torryharris/TH-ProgressButton。" target="_blank" rel="noopener">https://github.com/torryharris/TH-ProgressButton。</a><br>我在代码中掺杂了一些网址，这些都是我在看这整个开源代码时查阅的资料，如果你也不懂的话也可以去这些地址看看资料。<br>说实话，自定义控件设计的东西太多，不适合在入门的时候学习，不过有个概念，以此来抛砖引玉也是挺好的。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（十）——Android的控件解析</title>
      <link href="/2015/04/01/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94Android%E7%9A%84%E6%8E%A7%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
      <url>/2015/04/01/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94Android%E7%9A%84%E6%8E%A7%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>   </p><h2 id="一、Android的控件结构"><a href="#一、Android的控件结构" class="headerlink" title="一、Android的控件结构"></a>一、Android的控件结构</h2><p>Android中有一类重要的控件，称为容器控件，它们派生自View的子类<code>android.view.ViewGroup</code>。每个容器控件都可以作为父控件存在，其中包含若干个子控件，每个子控件占据其父控件的一块区域，统一由父控件进行管理和支配。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E6%8E%A7%E4%BB%B6UI.jpg" alt="控件UI传递"><br>交互界面中控件的关系直观上是极其复杂的，所以Android将控件对象之间的联系抽象为树形结构，从而简化了控件之间的关系——每个控件只会受其父控件的控制，而不会被其他控件影响。为了保证保证调控的整体性，Android为控件树增加了一个统一的交互事件管理对象<code>ViewParent</code>，它可以从整体上对控件树的变化进行调度，避免了控件对象彼此间的局部通信，从而大大降低控件对象间的耦合性。<br>在Android控件中，交互事件都是沿着控件树自顶向下传播的。父控件接受到交互事件后，会先判断事件的目标控件对象，如果是自己需要的，就会截获事件进行处理，否则就尝试将事件向下分发给对应的子控件，并递推地逐级向下传播事件，直至该事件被处理或者忽略。而在Android中，View定义了一系列事件函数用来接收和处理各类交互事件，比如通过<code>View.onKeyDown</code>函数可以接收到用户的按键操作，<code>onTouchEvent</code>可以获取用户触摸屏幕的相关事件，等等。每个View类的子控件都可以重载这些函数，来处理自己所需的事件。</p><h2 id="二、Android的控件属性"><a href="#二、Android的控件属性" class="headerlink" title="二、Android的控件属性"></a>二、Android的控件属性</h2><p>每个Android控件都有一定的属性，用于表示控件对象的基本特征。这些属性都定义在View类中。</p><p><strong>标识</strong><br>每个控件对象都可以由一个整数型作为其标识。我们可以通过<code>View.getId</code>函数获取控件对象的标识，setId设定标识。或者使用<code>View.findViewById</code>函数从控件（包括子控件）寻找到第一个匹配给定标识的控件对象，其寻找方式采用了树的深度遍历。<br>尺寸每个控件对象都会占据一定的区域（矩形），该控件对象会处理与矩形区域相关的交互事件。所以通过长、宽来进行描述控件的尺寸。精确描述：具体数值，几像素，几毫米等；模糊描述：依赖于父控件或者控件中内容，来确定自身大小。除此之外，还有位置，距离等信息。<br>可见性使用View.setVisibility来改变控件的可见性。三种状态：可见状态View.VISIBLE、不可见状态View.INVISIBLE和消失状态View.GONE.<br>不可见状态时，控件的位置不会有任何变化；而当控件处于消失状态时，它就不再占据任何界面区域，它的位置会被其他控件顶替。<br><strong>焦点</strong><br>焦点指出了当前交互的控件，并可以将一些信息（比如说按键信息）传递给控件。焦点切换的计算模式具有很强的灵活性，开发者也可以通过View.setNextFocusDownId等来设置焦点。</p><h2 id="三、Android的窗口机制"><a href="#三、Android的窗口机制" class="headerlink" title="三、Android的窗口机制"></a>三、Android的窗口机制</h2><p>所谓窗口机制，是指Android采取了基于窗口注册的实现模式，将用户与界面的交互传递到对应的控件中去。使用过c++和java中界面开发可能会比较熟悉。<br>窗口机制的核心是窗口管理服务（<code>WindowManagerService</code>），它是Android系统的核心服务之一，运行在系统核心进程的一个独立线程中。它负责管理所以交互界面的控件树，并将用户操作转换成交互事件传递至当前界面。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E6%8E%A7%E4%BB%B6%E6%A0%91.jpg" alt="窗口管理服务"></p><h3 id="界面组件和窗口"><a href="#界面组件和窗口" class="headerlink" title="界面组件和窗口"></a>界面组件和窗口</h3><p>界面组件是Android中最重要的交互单元，每个界面组件都有一个android.view.Window对象。每个Window对象都会负责构造和管理一棵控件树，它会为该控件树构造对应的ViewRoot对象建立与窗口管理服务的双向通信。界面组件的交互界面主要由标题区域和内容区域构成。其中，标题的格式比较固定，通常是由标题文字、进度条和组件图标等元素构成，开发者可以通过setTitle方法来改变标题的内容。而内容区域可以通过setContentView函数或者自定义来进行设定。当然，开发者往往不会满足于这样的基本界面框架，所以Android提供了很多接口帮助开发者突破基本的界面样式。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E6%8E%A7%E4%BB%B6%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6.png" alt="界面组件和窗口"></p><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><p>对话框也是一个很重要的交互单元，它需要寄宿在某个界面组件中。与界面组件相比，对话框的构造更为轻量，生命周期更为简单，数据传输也更为快捷。所以常作为临时的辅助交互对象，将相关信息提示给用户。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在界面组件中构造并展现一个对话框对象</span></span><br><span class="line"><span class="selector-tag">new</span> <span class="selector-tag">AlertDialog</span><span class="selector-class">.Bulider</span>(this)</span><br><span class="line">      <span class="selector-class">.setTitle</span>(<span class="string">"对话框标题"</span>)  <span class="comment">//设置标题</span></span><br><span class="line">      <span class="selector-class">.setMessage</span>(<span class="string">"对话框内容"</span>)<span class="comment">//设置提示信息</span></span><br><span class="line">      <span class="selector-class">.setPositiveButton</span>(<span class="string">"关闭"</span>,new OnClickListener()&#123;</span><br><span class="line">       <span class="comment">//相关处理</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="selector-class">.show</span>();</span><br></pre></td></tr></table></figure></p><p>其内容区域用于设置提示信息，或接受用户输入信息。<code>AlertDialog.Builder</code>对象提供了大量的便捷接口供开发者使用，比如可以通过<code>AlertDialog.Bulider.setMessage</code>设置提醒的文字信息，也可以通过<code>AlertDialog.Bulider.setItems</code>函数设置选择列表亦或可以通过<code>AlertDialog.Bulider.setView</code>自定义内容区域的样式。<br>在界面组件中，可以通过<code>Activity.showDialog</code>函数来弹出指定的对话框对象，开发者需要在<code>Activity.onCreateDialog</code>函数中对其进行构造。对话框一旦被构造，就会被缓存下来。开发者可以通过<code>Activity.dismissDialog</code>函数消隐该对话框，可以通过<code>Activity.removeDialog</code>函数删除缓存的对话框对象。每次对话框呈现之前，都会调用<code>Activity.onPrepareDialog</code>函数，开发者可以通过重载该函数动态地变更对话框对象中的内容。</p><h3 id="弹出窗口"><a href="#弹出窗口" class="headerlink" title="弹出窗口"></a>弹出窗口</h3><p>派生自<code>android.widget.Popup.Window</code>的对象。作用也是在界面组件中用于构造临时交互界面。从使用上来看，PopWindow不像对话框那样从屏幕的固定位置弹出，而是依赖于描点控件对象的位置。PopWindow的展示盒功能都是以它为核心，作为描点控件的扩展交互界面，以增强控件的功能。<br>如：自动完成文本控件 <code>android.widget.AutoCompleteTextView</code> 是PopWindow的一个应用实例。它有一个文本输入控件和与之绑定的PopWindow共同构成。</p><h2 id="四、Android的基本控件"><a href="#四、Android的基本控件" class="headerlink" title="四、Android的基本控件"></a>四、Android的基本控件</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E6%8E%A7%E4%BB%B6_base.jpg" alt="Android的基本控件"></p><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p>控件是构建界面的基本单元。为了帮助更好地进行界面的构造，Android提供了大量的基础控件。对于开发者而言，只有了解这些控件的实现特征和使用方式，才能够更快更好地进行交互界面的开发。那么接下来，我会为大家一个一个介绍Android中比较重要的控件，并附上简单的操作代码。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（九）——Android组件间的数据传输</title>
      <link href="/2015/03/26/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94Android%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
      <url>/2015/03/26/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94Android%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>   </p><h2 id="一、Intent数据传递"><a href="#一、Intent数据传递" class="headerlink" title="一、Intent数据传递"></a>一、Intent数据传递</h2><p>那么首先是简单的跳转。我们可以借助bundle这个容器来存放我们想要传递的数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();   </span><br><span class="line">intent.setClass(activity1.<span class="keyword">this</span>, activity2.class);   <span class="comment">//描述起点和目标   </span></span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();                           <span class="comment">//创建Bundle对象   </span></span><br><span class="line">bundle.putString(<span class="string">"tag"</span>, <span class="string">"Activity1发来的数据"</span>);     <span class="comment">//装入数据   </span></span><br><span class="line">intent.putExtras(bundle);                                <span class="comment">//把Bundle塞入Intent里面   </span></span><br><span class="line">startActivity(intent);                                     <span class="comment">//开始切换</span></span><br></pre></td></tr></table></figure></p><p>另一个接受数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">this</span>.getIntent();        <span class="comment">//获取已有的intent对象   </span></span><br><span class="line">Bundle bundle = intent.getExtras();    <span class="comment">//获取intent里面的bundle对象   </span></span><br><span class="line">string = bundle.getString(<span class="string">"tag"</span>);    <span class="comment">//获取Bundle里面的字符串</span></span><br></pre></td></tr></table></figure></p><p>那么接下来是如何接受从目标Activity返回的处理结果。这里有两种方式，一是在onRestart方法里面接受处理结果，方法实现和Activity2接受从Activity1发来的数据处理一样。另一种方式，是采用应答模式切换。这里，主要介绍下第二种方式。应答模式切换和普通的切换不同在于，普通的是有去没回，应答则是有来有往。代码实现也不一样：<br>从Activity1 切换到Activity2：<code>startActivityForResult(intent,0)</code>;从Activity2返回到 <code>Activity1：setResult(RESULT_OK, intent)</code>。接受返回结果：<code>protected void onActivityResult()</code>。具体代码如下：<br><strong>发送方：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();    </span><br><span class="line">intent = intent.setClass(Activity1.<span class="keyword">this</span>, AnotherActivity.class);    </span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();    </span><br><span class="line">bundle.putString(<span class="string">"string"</span>,<span class="string">"cpacm"</span>);    </span><br><span class="line">intent.putExtras(bundle);    </span><br><span class="line">startActivityForResult(intent,<span class="number">0</span>);       <span class="comment">//只有这里不同,这里的0是请求码，用于返回数据的识别</span></span><br><span class="line"> <span class="comment">//Activity1.this.finish();  //不能用finish，会触发onDestroy();</span></span><br></pre></td></tr></table></figure></p><p><strong>接收方：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();   </span><br><span class="line">intent = intent.setClass(AnotherActivity.<span class="keyword">this</span>, Activity1.class);   </span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();   </span><br><span class="line">bundle.putInt(<span class="string">"result"</span>, <span class="string">"Activity2的处理结果"</span>);   </span><br><span class="line">intent.putExtras(bundle);       </span><br><span class="line">AnotherActivity.<span class="keyword">this</span>.setResult(RESULT_OK, intent);   <span class="comment">//RESULT_OK是返回状态码   </span></span><br><span class="line">AnotherActivity.<span class="keyword">this</span>.finish(); <span class="comment">//会触发onDestroy();</span></span><br></pre></td></tr></table></figure></p><p><strong>发送方接受消息：</strong>（其中requestCode是请求码，可以根据请求码的不同来区分不同的处理模块）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;    </span><br><span class="line">   <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);    </span><br><span class="line"><span class="keyword">switch</span>(resultCode) &#123; <span class="comment">//根据状态码，处理返回结果    </span></span><br><span class="line"><span class="keyword">case</span> RESULT_OK:     </span><br><span class="line">  Bundle bundle =data.getExtras();   <span class="comment">//获取intent里面的bundle对象    </span></span><br><span class="line">  String result = bundle.getInt(<span class="string">"result"</span>);     </span><br><span class="line"><span class="keyword">break</span>;       </span><br><span class="line"><span class="keyword">default</span>:    </span><br><span class="line"><span class="keyword">break</span>;    </span><br><span class="line">&#125;         </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、文件系统做数据共享"><a href="#二、文件系统做数据共享" class="headerlink" title="二、文件系统做数据共享"></a>二、文件系统做数据共享</h2><p>(1) 通过 <code>Context.getSharedPreferences(String fileName,int mode)</code>方法，可以打开一个xml文件，文件的位置在<code>/data/data/package_name/shared_prefs/fileName.xml</code>，如果不存在，则会自动创建。可以对该文件进行读写操作，在应用内的各组件之间共享数据。如果将mode设置为<code>Context.MODE_WORLD_READ</code>或者<code>Context.MODE_WORLD_WRITE</code>，则还可以被其他应用访问到。不过这不是 android推荐的方式，要实现跨应用共享数据，推荐的方式是用<code>ContentProvider</code>实现 。具体实现方法可以看以前写的文章<a href="http://www.cpacm.net/2015/03/22/Android开发日记（五）——Android数据存储（上）/">Android数据存储（上）</a>和<a href="http://www.cpacm.net/2015/03/22/Android开发日记（六）——Android数据存储（下）/">Android数据存储（下）</a>。<br>(2) 除了比较方便的<code>shared_prefs</code>，也可以创建自定义文件，方法是<code>Context.openFileOutput()</code>，可以在<code>/data/data /package_name/files/</code>目录下创建指定的文件，除此以外，和上面提到的<code>shared_prefs</code>都一样。不过操作起来就复杂一些了。要读取用这种方式创建的文件，可以用<code>Context.openFileInput()</code>方法。<br>(3) 此外，还可以在SD卡上操作文件，通过标准的java.io包内的API就可以。不过要注意的是，SD卡内采用的是FAT文件系统，所以不支持linux 的文件读写权限控制，这点和<code>shared_prefs</code>与file不太一样。如果需要对文件进行读写权限控制，就不能采用写入SD卡的方式。<br>(4) 也可以用android自带的SQLite数据库来做数据持久化，主要用到的类包括<code>SQLiteOpenHelper</code>和<code>SQLiteDatabase</code>。</p><h2 id="三、Application设置全局数据"><a href="#三、Application设置全局数据" class="headerlink" title="三、Application设置全局数据"></a>三、Application设置全局数据</h2><p>在java中，我们使用全局变量时一般都会使用静态变量，然后public类型，让所有类都可以使用这些变量。当然在Android也可以这样做。不过在这里说的是我们可以使用Application来管理这些变量。Application类是一个基类，这个基类的作用是为了获取整个应用程序的状态。 我们可以自己继承或实现这个类，当你要使用自己拓展的application类的时候，只要在manifest.xml中 的<application>标签中name应用自己定义的类就行了，这样做的结果是：当你的应用程序或者包所在的进程创建的时候，这个类就会被实例化。<br>使用的方法很简单，首先继承Application类再去把它重写，主要重写里面的onCreate方法，就是创建的时候，初始化变量的值。然后在整个应用中的各个文件中就可以对该变量进行操作了。<br>启动Application时，系统会创建一个PID，即进程ID，所有的Activity就会在此进程上运行。那么我们在Application创建的时候初始化全局变量，同一个应用的所有Activity都可以取到这些全局变量的值，换句话说，我们在某一个Activity中改变了这些全局变量的值， 那么在同一个应用的其他Activity中值就会改变。这样我们就达到了控制全局变量的目的。（当然application不仅仅局限于这里，它可以配合开发者设置更多的功能）<br>下面一个小例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String learn;      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLearn</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> learn;  </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLearn</span><span class="params">(String s)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.learn= s;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        <span class="keyword">super</span>.onCreate();  </span><br><span class="line">        setLearn(<span class="string">"cpacm"</span>); <span class="comment">//初始化全局变量         </span></span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></application></p><p>上面就是一个继承了Application类的简单使用，我们只是新建了一个字符串变量。没有全局，也没有静态，要使用它必须要通过MyApp才行。<br>接下来看看我们怎么使用它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> MyYApp myApp;  </span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.main);  </span><br><span class="line">        myApp= (MyYApp) getApplication(); <span class="comment">//获得自定义的应用程序YApp  </span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"InitLabel:"</span>+myApp.getLearn());   <span class="comment">//将我们放到进程中的全局变量拿出来，看是不是我们曾经设置的值  </span></span><br><span class="line"> </span><br><span class="line">        myApp.setLearn(<span class="string">"ahaha"</span>);  <span class="comment">//修改一下  </span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"ChangeLabel:"</span>+myApp.getLearn()); <span class="comment">//看下，这个值改变了没有  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后在配置文件中注册自己定义的App<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在这里，将默认的Application设置成自己做的MyApp--&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:name</span>=<span class="string">"MyApp"</span> <span class="attr">...</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="四、组件控制数据"><a href="#四、组件控制数据" class="headerlink" title="四、组件控制数据"></a>四、组件控制数据</h2><p>第一个当然是正统的ContentProvider组件了，怎么使用它，请看这篇博文，这里就不再讲述了。<a href="http://www.cpacm.net/2015/03/22/Android开发日记（七）——Android四大组件之ContentProvider/">Android四大组件之ContentProvider</a>。<br>service也可以充当数据控制的组件，毕竟service是在后台运行，当它与Activity绑定时，activity就可以从里面获取数据（前提是service没有被销毁）。详情：<a href="http://www.cpacm.net/2015/03/22/Android开发日记（三）——Android四大组件之Service/">Android四大组件之Service</a><br>广播组件也可以，更可以使用sendOrderedBroadcast(intent, null, BroadcastReceiver(), null, Activity.RESULT_OK, null, null);方法对返回的数据进行处理.这个方法是在原有的广播序列的末尾再加一个广播，并作为最后的一个广播，可以对返回的信息进行处理。详情：<a href="http://www.cpacm.net/2015/03/22/Android开发日记（四）——Android四大组件之Broadcast-Receiver/">Android四大组件之Broadcast Receiver</a></p><h2 id="五、结束语"><a href="#五、结束语" class="headerlink" title="五、结束语"></a>五、结束语</h2><p><embed src="http://www.xiami.com/widget/0_1770243080/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>到这里为止，Android入门篇的组件部分就基本上完毕了，当然里面还有很多内容可以深究，这方面要大家自己挖掘了。那么接下来就是Android的控件部分了，额，一想到那么多的控件头都大了，不过基本原理都是相通的，举一反三嘛~好了，如果有什么问题也可以联系我一起探讨学习，最后希望大家每天都能向前迈进一步。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（八）——Android的Intent机制</title>
      <link href="/2015/03/26/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94Android%E7%9A%84Intent%E6%9C%BA%E5%88%B6/"/>
      <url>/2015/03/26/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94Android%E7%9A%84Intent%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>   </p><h2 id="一、Intent对象"><a href="#一、Intent对象" class="headerlink" title="一、Intent对象"></a>一、Intent对象</h2><p>Android的Intent机制最核心的设计思想，就是引入了组件管理服务作为连接组件的管理者。该服务可以通过组件的配置信息了解系统中每个组件的类别和功能，从而帮助调用组件寻找符合其需求的实现组件，将调用者与实现者彻底解耦。<br>一般的Intent实现的流程图：<br><img src="http://7xi4up.com1.z0.glb.clouddn.com/android_8_Intent流程图.png" alt="Intent流程图"></p><h3 id="Intent对象的构成"><a href="#Intent对象的构成" class="headerlink" title="Intent对象的构成"></a>Intent对象的构成</h3><p>Intent对象的这些作用，都是通过它的实现和设计体现出来的。从数据结构来看，Intent类的实现非常简单，它并没有包含复杂的逻辑功能，只是包含着若干个数据项。</p><blockquote><p>（1）<strong>Action项</strong> <small>在Intent中用来表示动作，可以通过Intent的<code>setAction</code>和<code>getAction</code>来进行操作。在Android中定义了很多标准的动作，比如：<code>Intent.ACTION_VIEW</code>等。这些动作约定了Android组件间的通信规范，保证了组件系统的可扩展性。</small><br>（2）<strong>Data项</strong> <small> 当发起请求时，调用组件如果有明确的数据对象，通常就会用Data项来存储表示。Data数据也是用字符串进行存储，它的格式符合URI标准。所以可以通过URI来描述数据来增强数据的作用范围。</small><br>（3）<strong>Type项</strong> <small> Type是MINE格式的字符串数据，用于描述组件能够处理的请求类型，或者补充说明Data数据的类型，它可以通过通配符*来表示整个类别的信息。注意：Data项和Type项在很多时候是互斥使用的，当调用<code>Intent.setType</code>时，之前设定的Data信息就会被清空，反之亦然。但可以通过<code>intent.setDataAndType()</code>来同时设置。</small><br>（4）<strong>Category项</strong> <small> Category表示约束。每个Intent对象可包含多个categroy项。而一个组件需要支持全部的Category才可能处理请求。如一个组件需要启动其他应用，且希望进入的是这个应用的入口组件，这时就需要添加<code>Intent.CATEGORY_LAUNCHER</code>作为约束。</small><br>（5）<strong>Component项</strong>  <small> 它指的是目标组件的类型信息，可以通过<code>Intent.setComponent</code>方法利用类名进行设置，也可以通过<code>Intent.setClass</code>方法利用类型对象信息进行设置。<br>（6）<strong>Extras项</strong> <small> Intent中数据传输的载体，负责将数据从调用组件传递到实现组件。</small><br>（7）<strong>Flags项</strong> <small> Flags是一个整数型，由一系列的标志位汇集而成。</small>     </small></p></blockquote><p>在组件开发中，应该遵循SDK或第三方拟定的相关规范。当一个组件需要支持特定的Action时，就需要同支持相关的Extras项和Data项相关内容。协议的完整性和正确性是整个Android Intent机制的根基。</p><h3 id="Intent对象的解析"><a href="#Intent对象的解析" class="headerlink" title="Intent对象的解析"></a>Intent对象的解析</h3><p>从实现组件的选择来看，Intent对象可以分为两类：精确描述的Intent和模糊描述的Intent。  </p><blockquote><p><small>（1）<strong>精确描述的Intent，</strong>指的是所有带有Component信息的Intent对象，调用组件可以通过<code>Intent.setComponent</code>或<code>Intent.setClass</code>等方法进行设置。当组件管理服务收到Intent对象时，会先校验其Component数据项，如果含有Component信息，组件管理服务只需要依照Component构造对应的实现组件。平时我们用的Intent的跳转都是用的精确Intent.</small><br><small>（2）除此之外，所有不包含Component信息的Intent对象，都归类于<strong>模糊描述的Intent</strong>.  </small>  </p></blockquote><h2 id="二、Intent-Filter对象"><a href="#二、Intent-Filter对象" class="headerlink" title="二、Intent Filter对象"></a>二、Intent Filter对象</h2><p>除了Intent对象，在Android的Intent机制中还有一个重要的角色：Intent Filter对象。Intent Filter对象，指的是<code>android.content.IntentFilter</code>类的对象，它是Intent对象的“姊妹对象”。与Intent对象类似，Intent Filter对象也包含<code>Action、Type、Data、Catagory</code>等数据项，每个数据项的结构和含义，与Intent的数据项也一一对应。</p><h3 id="Intent-Filter的用途"><a href="#Intent-Filter的用途" class="headerlink" title="Intent Filter的用途"></a>Intent Filter的用途</h3><p>Intent Filter是各个组件用于描述其功能的，通过组件的Intent Filter信息，Android的组件管理应用就可以了解和掌握各个组件所具备的能力和能够处理的请求。当组件管理服务接收到调用组件发送来的基于模糊描述的Intent对象时，会与所有组件的Intent Filter信息进行匹配计算，寻找符合需求的实现组件。<br>每个组件都可以有任意数量的Intent Filter。组件包含的Intent Filter对象越多，说明他能接受Intent请求范围越广，同时，其实现也会越复杂。</p><h3 id="Intent-Filter的范例"><a href="#Intent-Filter的范例" class="headerlink" title="Intent Filter的范例"></a>Intent Filter的范例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span>  <span class="attr">android:name</span>=<span class="string">"com.example.activitydemo.SecondActivity"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:icon</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:label</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:priority</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:mimeType</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:path</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:pathPattern</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:port</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:scheme</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 可以继续添加相关的actio、category和data项 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span><span class="comment">&lt;!-- 可以继续添加相关的intent-filter项 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、Intent-匹配算法"><a href="#三、Intent-匹配算法" class="headerlink" title="三、Intent 匹配算法"></a>三、Intent 匹配算法</h2><p>当组件管理服务接受到请求组件的Intent对象后，会先查看Intent对象是否包含了目标实现组件的Component信息。如果不包括，则会从应用管理服务中获取所有组件的Intent Filter信息，并与Intent对象相比较，选择符合需求的实现组件。其中涉及到的就是Intent的匹配算法了。<br>算法输入的是进行比较的Intent对象和Intent Filter对象；如果返回值为正，则表示匹配成功，并且，正值越大意味着匹配程度越高，流程图如下。<br><img src="http://7xi4up.com1.z0.glb.clouddn.com/android_8_Intent匹配流程图.png" alt="Intent匹配流程图"><br>其中，Data与Type信息是Intent Filter中最复杂的数据项，其比较算法是决定Intent与Intent Filter对象匹配程度的关键。<br>如果Intent的对象包含Type信息，就必须要求Intent Filter的Type信息与之对应，否则，匹配也将以失败告终；然后，如果Intent对象中含有Data项，则会将该Data项的URI信息拆分为Scheme和Authority等部分，逐一与Intent Filter对象中对应的部分进行比较，只要两者有任何不符的地方，匹配都会失败。<br>以Android原生的邮件应用为例，它配置了如下的Intent Filter信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">activity</span>  <span class="attr">android:name</span>=<span class="string">".SecondActivity.MessageCompose"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">intent-filter</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SENDTO"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"mailto"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 可以继续添加相关的actio、category和data项 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 可以继续添加相关的intent-filter项 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当调用者发出如下请求时，就会触发一次意图匹配：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SENDTO);</span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT, <span class="string">""</span>);</span><br><span class="line"><span class="comment">//其中，mailto这部分是URI的scheme部分</span></span><br><span class="line">intent.setData(Uri.parse(<span class="string">"mailto:xxx@oo.com"</span>));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>开始匹配检查。<br><code>ACTION包含OK—&gt;data包含OK—&gt;Category检查OK—&gt;匹配成功</code>。</p><h2 id="四、匹配组件的选择"><a href="#四、匹配组件的选择" class="headerlink" title="四、匹配组件的选择"></a>四、匹配组件的选择</h2><p>如果有多个Intent Filter对象与调用组件发出的Intent对象都相匹配，就需要在所有符合条件的Intent Filter对象中进行筛选，选出最符合调用组件和用户需求的实现组件，这就是匹配组件的选择。而我们可以设定Intent Filter对象的优先级来进行设定，即通过<intent-filter>配置项中的android:priority属性进行变更，或者通过IntentFilter.setPriority函数进行动态地修改。范围是-1000至1000，默认为0。</intent-filter></p><p>在Android的Intent机制中，通过引入第三方组件管理服务，降低了调用组件与实现组件之间的耦合，提高了整个系统的灵活性及组件的复用性，使得应用开发变得更为简单快捷。但同时，正是由于第三方服务地介入增加了组件间连接的成本，可能会使组件间的调用不够流畅。因此，在组件管理服务中，系统对组件的匹配和选择过程进行了大量的优化，以提高组件调用的效率，其中包括：  </p><blockquote><p>（1）<strong>索引</strong>:组件管理服务通过哈希表，为所有Intent Filter对象的Action、Type等数据项建立索引。每个索引项对应着一组Action相同,Type相同或者其他数据项相同的Intent Filter对象。Intent先与索引项比较，快速地选择出可能与Intent相匹配的Intent Filter对象。这样，就加快了匹配速度。</p><p>（2）<strong>缓存</strong>:所谓缓存，是将Intent与Intent Filter的匹配结果记录下来，当再碰到相同Intent的调用时，可直接返回上次记录的结果，从而跳过匹配的过程，加速组件的调用。  </p></blockquote><h2 id="五、Intent使用的一个小例子"><a href="#五、Intent使用的一个小例子" class="headerlink" title="五、Intent使用的一个小例子"></a>五、Intent使用的一个小例子</h2><p>一个ActivityDemo工程，用以启动其他应用的Activity。其中的代码为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        Button button2 = (Button) findViewById(R.id.button2);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">                <span class="comment">//因为是精确启动，这些不加都是没问题的</span></span><br><span class="line">                <span class="comment">//intent.addCategory(Intent.CATEGORY_LAUNCHER);</span></span><br><span class="line">                <span class="comment">// intent.setAction(Intent.ACTION_MAIN);</span></span><br><span class="line">                ComponentName cn = <span class="keyword">new</span> ComponentName(</span><br><span class="line">                        <span class="string">"com.example.demo"</span>,<span class="comment">//另一个应用的包名</span></span><br><span class="line">                        <span class="string">"com.example.demo.MainActivity"</span>);<span class="comment">//要启动的另一个应用的类名</span></span><br><span class="line">                <span class="comment">//intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span></span><br><span class="line">                intent.setComponent(cn);</span><br><span class="line">                Log.d(<span class="string">"TEST"</span>, intent.toString());</span><br><span class="line">                startActivity(intent);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//精确启动的另一种方法</span></span><br><span class="line">                <span class="comment">/*Intent LaunchIntent = getPackageManager()</span></span><br><span class="line"><span class="comment">                        .getLaunchIntentForPackage("com.example.demo");</span></span><br><span class="line"><span class="comment">                Log.d("TEST", LaunchIntent.toString());</span></span><br><span class="line"><span class="comment">                startActivity(LaunchIntent);*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        button2.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//只能获得系统级的应用组件</span></span><br><span class="line">                <span class="comment">//action为MAIN,应用入口界面</span></span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">                intent.addCategory(Intent.CATEGORY_LAUNCHER);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//获取所有符合的组件，包括第三方安装的应用</span></span><br><span class="line">                <span class="comment">//List&lt;ResolveInfo&gt; activities = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);</span></span><br><span class="line">                <span class="comment">//自定义对话框</span></span><br><span class="line">                <span class="comment">//ShowSelectActivityDialog(activities);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另一个应用，即包名为com.example.demo的应用，其中配置文件部分为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.example.demo.MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>安装以上两个应用，运行效果图：<br><img src="http://7xi4up.com1.z0.glb.clouddn.com/android_8_Intent跳转.png" alt="Intent跳转"><br>点击精确Intent,成功跳转到另一个应用中。<br>点击模糊Intent,出现组件选择列表，如下图：<br><img src="http://7xi4up.com1.z0.glb.clouddn.com/android_8_Intent模糊跳转.png" alt="Intent模糊跳转"><br>PS：其中关于PackageManager的详细用法，可以参考这篇文章<a href="http://www.cnblogs.com/travellife/p/3932823.html" target="_blank" rel="noopener">Android随笔—PackageManager详解</a>.</p><h2 id="六、结束语"><a href="#六、结束语" class="headerlink" title="六、结束语"></a>六、结束语</h2><p><embed src="http://www.xiami.com/widget/0_1772513938/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>看到这里，大家是不是对Intent的传递原理有所了解了呢。形象一点地说，Intent好比是插头，而Intent Filter就好比是插座，插座的孔只要满足插头的孔脚数量就能工作了，多了没事，但少了就不行。<br>Intent是Android应用模型的核心，解决了组件间的连接问题。通过组件管理服务提供的Intent匹配策略，降低了组件间的耦合度，提高了平台的灵活性，增强了组件的复用性，从根本上减轻了应用开发的负担。</p><p>参考文章：<br>（1）<a href="http://www.oschina.net/question/565065_67909" target="_blank" rel="noopener">android Intent机制详解</a><br>（2）<a href="http://www.apkbus.com/android-72361-1-1.html" target="_blank" rel="noopener">android intent和intent action大全</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的简单使用</title>
      <link href="/2015/03/26/Git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2015/03/26/Git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Git介绍"><a href="#一、Git介绍" class="headerlink" title="一、Git介绍"></a>一、Git介绍</h2><p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper，后者之前一直是 Linux 内核开发人员在全球使用的主要源代码工具。开放源码社区中的有些人觉得 BitKeeper 的许可证并不适合开放源码社区的工作，因此 Torvalds 决定着手研究许可证更为灵活的版本控制系统。尽管最初 Git 的开发是为了辅助 Linux 内核开发的过程，但是我们已经发现在很多其他自由软件项目中也使用了 Git。例如 最近就迁移到 Git 上来了，很多 Freedesktop 的项目也迁移到了 Git 上。</p><blockquote><p>保存点 : Git的保存点可以追踪源码中的文件, 并能得到某一个时间点上的整个工程项目额状态; 可以在该保存点将多人提交的源码合并, 也可以会退到某一个保存点上;</p><p>Git离线操作性 :Git可以离线进行代码提交, 因此它称得上是完全的分布式处理, Git所有的操作不需要在线进行; 这意味着Git的速度要比SVN等工具快得多, 因为SVN等工具需要在线时才能操作, 如果网络环境不好, 提交代码会变得非常缓慢;</p><p>Git基于快照 : SVN等老式版本控制工具是将提交点保存成补丁文件, Git提交是将提交点指向提交时的项目快照, 提交的东西包含一些元数据(作者, 日期, GPG等);</p><p>Git的分支和合并 : 分支模型是Git最显著的特点, 因为这改变了开发者的开发模式, SVN等版本控制工具将每个分支都要放在不同的目录中, Git可以在同一个目录中切换不同的分支;<br>分支即时性 : 创建和切换分支几乎是同时进行的, 用户可以上传一部分分支, 另外一部分分支可以隐藏在本地, 不必将所有的分支都上传到GitHub中去;</p><p>分支灵活性 : 用户可以随时 创建 合并 删除分支, 多人实现不同的功能, 可以创建多个分支进行开发, 之后进行分支合并, 这种方式使开发变得快速, 简单, 安全。  </p></blockquote><p><strong> Git通用客户端官方下载地址：<a href="http://git-scm.com/" target="_blank" rel="noopener">http://git-scm.com/</a> </strong>  </p><h2 id="二、Git安装"><a href="#二、Git安装" class="headerlink" title="二、Git安装"></a>二、Git安装</h2><p>安装的话可以一路默认，路径可以自己指定。有关安装时参数的详细介绍，大家可以去这里看看，里面做了详细的介绍  <a href="http://www.ihref.com/read-16377.html" target="_blank" rel="noopener">http://www.ihref.com/read-16377.html</a></p><p>安装完后到你的安装目录下，找到一个叫做 Git Bash.vbs文件。配置同步需要使用到这个文件。双击打开，我们会得到一个命令行控制台界面。接下来我们来配置Git吧。</p><h3 id="Git上有三种传输方式"><a href="#Git上有三种传输方式" class="headerlink" title="Git上有三种传输方式"></a>Git上有三种传输方式</h3><p>（如下图），我们现在来选择SSH方式传输。在控制台输入ssh-keygen -t rsa -C “XXXXX@163.com” 。<br><strong>GitHub邮箱</strong> : 该命令后面的邮箱就是GitHub的注册邮箱（没有账号的请先在Github上申请）;<br><strong>路径选择</strong> : 使用该命令之后, 会出现提示选择ssh-key生成路径, 这里直接点回车默认即可, 生成的ssh-key在默认路径中;<br><strong>密码确认</strong> : 自设的一个密码。这里我就不使用密码进行登录了。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_SSH.png" alt="Git_SSH">  <img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_cmd_1.png" alt="Git_cmd"><br><strong>将SSH配置到GitHub网站中</strong>。进入生成的ssh目录 : C:\Documents and Settings\Administrator.ssh （或者 C:\Users\自己电脑用户名.ssh）中, 使用记事本打开 id_rsa.pub 文件, 将该文件中的内容复制;<br>进入GitHub网站 : 登录GitHub, 选择Setting 进行用户设置：<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_set.png" alt="Git_set"><br>在左边的列表下找到SSH Keys的选项：<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_SSHKey.png" alt="Git_SSH_Key"><br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_SSH_Add.png" alt="Git_SSH_Add"><br>然后将SSH Key值复制进去<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_SSH_TABLE.png" alt="Git_SSH_TABLE"><br>验证是否配置成功 :<code>ssh -T git@github.com</code><br>验证时可能让你输入YES。<br>成功提示 : 如果出现<code>Hi cpacm！ You’ve successfully authenticated, but GitHub does not provide shell access.</code>就说明配置成功, 可以连接上GitHub;  </p><h3 id="配置本地邮箱"><a href="#配置本地邮箱" class="headerlink" title="配置本地邮箱"></a>配置本地邮箱</h3><p>用户名邮箱作用 : 我们需要设置一个用户名 和 邮箱, 这是用来上传本地仓库到GitHub中, 在GitHub中显示代码上传者;<br>使用命令 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;cpacm&quot; //设置用户名 </span><br><span class="line">git config --global user.email &quot;xxx@163.com&quot; //设置邮箱,不要求是注册邮箱。</span><br></pre></td></tr></table></figure></p><p>到此Git的安装基本上就可以了。</p><h2 id="三、Git的使用"><a href="#三、Git的使用" class="headerlink" title="三、Git的使用"></a>三、Git的使用</h2><p>我们现在会发现右键菜单新出来了三个选项:<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_Menu.jpg" alt="Git_Menu"><br>功能分别是将本地作为本地仓库，打开Git Gui，打开Git Bash命令控制台。</p><h3 id="选择文件夹作为本地仓库"><a href="#选择文件夹作为本地仓库" class="headerlink" title="选择文件夹作为本地仓库"></a>选择文件夹作为本地仓库</h3><p>在目录中右键执行 <code>git init here</code>，就可以创建一个 Git 仓库了。<br>查看有哪些文件，使用ls指令。比如，我们这个目录，里头有个test.tet文件，可以用如下：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure></p><p>也可以用cd来指定地址，将其仓库化<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 路径</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /opt/konnichiwa/.git/</span><br><span class="line"># 在 /opt/konnichiwa/.git 目录初始化空 Git 仓库完毕。</span><br></pre></td></tr></table></figure></p><p>现在你可以看到在你的项目目录中有个 .git 的子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。<br>简而言之，用 git init 来在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。　　</p><h3 id="clone一个项目到本地"><a href="#clone一个项目到本地" class="headerlink" title="clone一个项目到本地"></a>clone一个项目到本地</h3><p>如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行 <code>git clone [url]</code>，[url] 为你想要复制的项目地址，就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git://github.com/schacon/simplegit.git</span><br></pre></td></tr></table></figure></p><h3 id="添加文件到缓存，并上传"><a href="#添加文件到缓存，并上传" class="headerlink" title="添加文件到缓存，并上传"></a>添加文件到缓存，并上传</h3><p>在本地建立仓库后，右键选项会产生变化<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_Menu_Update.png" alt="Git_Menu_Init"></p><blockquote><p>第一项：添加所有文件到本地缓存；<br>第二项：提交工具，若本地缓存有变化，则会显示变化  </p></blockquote><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git_Gui.png" alt="Git_Gui"></p><blockquote><p>第三项，提交的历史记录，通常以一次提交为一次记录。<br>第四项：Git Gui管理工具，如上图。第五项：Git分支。第六项：控制台。然后填写描述点击上传按钮就可以上传了。  </p></blockquote><p>简单流程图<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Git流程图"></p><h2 id="四、Git客户端"><a href="#四、Git客户端" class="headerlink" title="四、Git客户端"></a>四、Git客户端</h2><p>Git有一个专门的客户端，只要安装了它，以上的这些其实都可以不用这么麻烦的实现。<br><strong>地址：<a href="https://windows.github.com/" target="_blank" rel="noopener">https://windows.github.com/</a> </strong></p><h3 id="GitHub的安装"><a href="#GitHub的安装" class="headerlink" title="GitHub的安装"></a>GitHub的安装</h3><p>基本上按步骤就行了，（就是下安装程序时可能要挂VPN）。<br>安装完后会有这两个东西。打开GitHub,按照提示来进行设置。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt="Git客户端"></p><h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p>左上角会有添加项目的按钮，右上角则是设置按钮，打开设置，选择options.<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2.png" alt="Git客户端设置界面"></p><h3 id="添加项目和Clone项目"><a href="#添加项目和Clone项目" class="headerlink" title="添加项目和Clone项目"></a>添加项目和Clone项目</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E5%AE%A2%E6%88%B7%E7%AB%AFCreate%E5%92%8CClone%E7%95%8C%E9%9D%A2.png" alt="Git客户端添加和克隆界面"><br>信息一目了然，我就不作多讲了。关于Clone,想要Clone其他人开源的项目，请使用shell来进行。</p><h3 id="操作台"><a href="#操作台" class="headerlink" title="操作台"></a>操作台</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="Git客户端主界面"></p><h3 id="本地变化"><a href="#本地变化" class="headerlink" title="本地变化"></a>本地变化</h3><p>当我在项目中添加了一个txt文件，操作台就会实时的出现变化，此时我们可以将变动提交到本地缓存中。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%AC%E5%9C%B0%E5%8F%98%E5%8C%96.png" alt="Git客户端本地变化"></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>建立和管理分支<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%86%E6%94%AF.png" alt="Git客户端分支"></p><h3 id="删除项目"><a href="#删除项目" class="headerlink" title="删除项目"></a>删除项目</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%8F%9C%E5%8D%95.png" alt="Git客户端的项目菜单"><br>最后一项就是移除，但文件还是会存在的。其他项功能就跟字面意思一样。</p><h3 id="在GitHub网站上删除项目"><a href="#在GitHub网站上删除项目" class="headerlink" title="在GitHub网站上删除项目"></a>在GitHub网站上删除项目</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Git%E7%BD%91%E9%A1%B5%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE.png" alt="Git网页项目设置"><br>进入想要删除的项目页面，右侧有个功能导航，选择Setting<br>跳转后拉到最后面就有删除项目的按钮。  </p><p><embed src="http://www.xiami.com/widget/0_1771040088/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>以上就是我简单安装完Git的全部了。  </p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>（1）<a href="http://www.ihref.com/read-16369.html" target="_blank" rel="noopener">Git版本控制软件结合GitHub从入门到精通常用命令学习手册</a><br>（2）<a href="http://www.cr173.com/html/15618_1.html" target="_blank" rel="noopener">Github for Windows使用图文教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吉卜力新作 —— &lt;记忆中的玛妮&gt;</title>
      <link href="/2015/03/23/%E5%90%89%E5%8D%9C%E5%8A%9B%E6%96%B0%E4%BD%9C%E2%80%94%E2%80%94-%E8%AE%B0%E5%BF%86%E4%B8%AD%E7%9A%84%E7%8E%9B%E5%A6%AE/"/>
      <url>/2015/03/23/%E5%90%89%E5%8D%9C%E5%8A%9B%E6%96%B0%E4%BD%9C%E2%80%94%E2%80%94-%E8%AE%B0%E5%BF%86%E4%B8%AD%E7%9A%84%E7%8E%9B%E5%A6%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="《记忆中的玛妮》"><a href="#《记忆中的玛妮》" class="headerlink" title="《记忆中的玛妮》"></a>《记忆中的玛妮》</h1><p>虽说是吉卜力出品的电影，但这次电影却没有宫崎骏的参与，完全由<a href="http://movie.douban.com/celebrity/1314163/" target="_blank" rel="noopener">米林宏昌</a>一手制作完成。关于<a href="http://movie.douban.com/celebrity/1314163/" target="_blank" rel="noopener">米林宏昌</a>，大家想起的应该是他的上一部作品《<a href="http://movie.douban.com/subject/4202302/" target="_blank" rel="noopener">借东西的小人阿莉埃蒂</a>》。<br>这部电影今天下午在B站上看完，然后去豆瓣上看了一下大家的评价，有褒有贬，有感动，也有不满，但在我看来是相当不错的，虽然没有宫崎骏电影的强烈故事性，但是淡淡的情节描写还是很符合我的胃口。</p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E8%AE%B0%E5%BF%86%E4%B8%AD%E7%9A%84%E7%8E%9B%E5%A6%AE_%E6%B5%B7%E6%8A%A5.jpg" alt="记忆中的玛妮 海报"><br>有点百合向的两女主角~  </p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E8%AE%B0%E5%BF%86%E4%B8%AD%E7%9A%84%E7%8E%9B%E5%A6%AE_%E6%B9%BF%E5%9C%B0%E4%B8%8A%E7%9A%84%E5%88%AB%E5%A2%85.jpg" alt="记忆中的玛妮 湿地别墅"><br>故事发生的主要地点<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E8%AE%B0%E5%BF%86%E4%B8%AD%E7%9A%84%E7%8E%9B%E5%A6%AE_%E7%8E%9B%E5%A6%AE%E7%9A%84%E6%97%A5%E8%AE%B0.jpg" alt="记忆中的玛妮 玛妮的日记"><br>解开所有事情真相的关键物品<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E8%AE%B0%E5%BF%86%E4%B8%AD%E7%9A%84%E7%8E%9B%E5%A6%AE_%E8%BF%9C%E6%99%AF.jpg" alt="记忆中的玛妮 跳舞"><br>派对后两个人独自的舞蹈，最美好的记忆。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉卜力 </tag>
            
            <tag> 动画电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（七）——Android四大组件之ContentProvider</title>
      <link href="/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BContentProvider/"/>
      <url>/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BContentProvider/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>   </p><h2 id="一、ContentProvider的特征"><a href="#一、ContentProvider的特征" class="headerlink" title="一、ContentProvider的特征"></a>一、ContentProvider的特征</h2><h3 id="我们为什么使用ContentProvider？"><a href="#我们为什么使用ContentProvider？" class="headerlink" title="我们为什么使用ContentProvider？"></a>我们为什么使用ContentProvider？</h3><p>像上几篇写的博客中就有好几种方法可以跨应用来读取数据，但ContentProvider的特点不仅仅如此。首先它作为Android中四大组件之一，（我们都知道组件的信息会被android统一管理），提供数据的跨进程无缝隙访问，并会在进程中提供本地缓存。跨进程调用是需要时间和资源消耗的，而通过缓存可以有效的提高效率。再则ContentProvider规定了数据访问结构，严谨不容易发生错误。然后，应用调用接口进行操作时，是一个同步的过程，也就是说，所有对数据源组件对象中的数据操作都是在消息队列中串行执行的，我们开发者就不需要考虑复杂的并发情形。最后，数据源组件中数据存储的方式没有任何的限制，可以通过数据库、文件等任意方式实现。</p><h3 id="通过什么方式找到想要的ContentProvider？"><a href="#通过什么方式找到想要的ContentProvider？" class="headerlink" title="通过什么方式找到想要的ContentProvider？"></a>通过什么方式找到想要的ContentProvider？</h3><p>它是通过URI进行定位。URI，就是全局统一定位标志，通过一个结构化的字符串，唯一标识数据源的地址信息，而每个数据源组件都有一个唯一的URI标识。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/URI%E6%A0%87%E8%AF%86.png" alt="URI标识"><br>ContentProvider的scheme已经由Android所规定， scheme为：<code>content://</code></p><blockquote><p>主机名（或叫Authority）用于唯一标识这个ContentProvider，外部调用者可以根据这个标识来找到它。<br>路径（path）可以用来表示我们要操作的数据，路径的构建应根据业务而定，如下:<br>要操作person表中id为10的记录，可以构建这样的路径:/person/10<br>要操作person表中id为10的记录的name字段， person/10/name<br>要操作person表中的所有记录，可以构建这样的路径:/person<br>要操作xxx表中的记录，可以构建这样的路径:/xxx<br>当然要操作的数据不一定来自数据库，也可以是文件、xml或网络等其他存储方式，如下:<br>要操作xml文件中person节点下的name节点，可以构建这样的路径：/person/name<br>如果要把一个字符串转换成Uri，可以使用Uri类中的parse()方法，如下：<br><code>Uri uri = Uri.parse(&quot;content://com.ljq.provider.personprovider/person&quot;)</code></p></blockquote><h2 id="二、ContentProvider的实例"><a href="#二、ContentProvider的实例" class="headerlink" title="二、ContentProvider的实例"></a>二、ContentProvider的实例</h2><p>我们还是通过一个实例来了解它吧。利用ContentProvider来对第三方的数据库进行操作。</p><h3 id="DBHelper"><a href="#DBHelper" class="headerlink" title="DBHelper"></a>DBHelper</h3><p>首先我们建一个DBHelper的类继承SQLiteOpenHelper<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.database;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase.CursorFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 在SQLiteOpenHelper的子类当中，必须有该构造函数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context   上下文对象 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name      数据库名称 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> version   当前数据库的版本，值必须是整数并且是递增的状态 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBHelper</span><span class="params">(Context context,String name,CursorFactory factory,<span class="keyword">int</span> version)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,name,factory,version);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBHelper</span><span class="params">(Context context, String name, <span class="keyword">int</span> version)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>(context,name,<span class="keyword">null</span>,version);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBHelper</span><span class="params">(Context context, String name)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>(context,name,VERSION);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 数据库首次构造时，会调用该函数，可以在这里构造表、索引，等等 </span></span><br><span class="line">        System.out.println(<span class="string">"create a database"</span>);  </span><br><span class="line">        <span class="comment">//execSQL用于执行SQL语句  </span></span><br><span class="line">        db.execSQL(<span class="string">"create table notebook(_id integer primary key autoincrement,title varchar(20),content text,time long)"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果给定的当前数据库版本高于已有数据库版本，调用该函数</span></span><br><span class="line">        System.out.println(<span class="string">"upgrade a database"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一步没什么好解释的，不懂的可以看一看我写的上一篇关于数据库操作的博文。</p><h3 id="MyProvider"><a href="#MyProvider" class="headerlink" title="MyProvider"></a>MyProvider</h3><p>接下来我们就要新建一个MyProvider的类继承ContentProvider<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.database;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ContentProvider;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentUris;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.content.UriMatcher;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DBHelper dh = <span class="keyword">null</span>;<span class="comment">// 数据库管理对象</span></span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase db;<span class="comment">//获取其中的数据库</span></span><br><span class="line">    <span class="comment">//UriMatcher:Creates the root node of the URI tree.</span></span><br><span class="line">    <span class="comment">//按照官方解释，UriMatcher是一颗Uri的树，然后利用addURI()方法往里面添加枝干，通过match()函数来查找枝干。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher MATCHER = <span class="keyword">new</span> UriMatcher(</span><br><span class="line">            UriMatcher.NO_MATCH);</span><br><span class="line">    <span class="comment">//设定匹配码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTEBOOK = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTEBOOKS = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//添加枝干，并给它们加上唯一的匹配码，以方便查找</span></span><br><span class="line">        <span class="comment">//如果match()方法匹配content://com.example.database/notebook路径，返回匹配码为1</span></span><br><span class="line">        MATCHER.addURI(<span class="string">"com.example.database"</span>, <span class="string">"notebook"</span>, NOTEBOOKS);</span><br><span class="line">        <span class="comment">//如果match()方法匹配content://com.example.database/notebook/#路径，返回匹配码为2</span></span><br><span class="line">        <span class="comment">//其中#号为通配符。</span></span><br><span class="line">        MATCHER.addURI(<span class="string">"com.example.database"</span>, <span class="string">"notebook/#"</span>, NOTEBOOK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建ContentProvider对象时会调用这个函数</span></span><br><span class="line">        dh = <span class="keyword">new</span> DBHelper(<span class="keyword">this</span>.getContext(),<span class="string">"note.db"</span>);<span class="comment">// 数据库操作对象</span></span><br><span class="line">        db = dh.getReadableDatabase();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 查询，返回Cursor</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] selectionArgs, String sortOrder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过match函数，获取匹配码</span></span><br><span class="line">        <span class="keyword">switch</span> (MATCHER.match(uri)) &#123;</span><br><span class="line">        <span class="keyword">case</span> NOTEBOOKS:</span><br><span class="line">            <span class="comment">//返回数据库操作的结果</span></span><br><span class="line">            <span class="keyword">return</span> db.query(<span class="string">"notebook"</span>, projection, selection, selectionArgs,</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</span><br><span class="line">        <span class="keyword">case</span> NOTEBOOK:</span><br><span class="line">            <span class="comment">//因为添加 了id,所以要把id加到where条件中</span></span><br><span class="line">            <span class="keyword">long</span> id = ContentUris.parseId(uri);</span><br><span class="line">            String where = <span class="string">"_id="</span> + id;</span><br><span class="line">            <span class="keyword">if</span> (selection != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(selection)) &#123;</span><br><span class="line">                where = selection + <span class="string">" and "</span> + where;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> db.query(<span class="string">"notebook"</span>, projection, where, selectionArgs, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">null</span>, sortOrder);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unkwon Uri:"</span> + uri.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Uri的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span> (MATCHER.match(uri)) &#123;  </span><br><span class="line">        <span class="keyword">case</span> NOTEBOOKS:  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"com.example.Database.all/notebook"</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">case</span> NOTEBOOK:  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"com.example.Database.item/notebook"</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unkwon Uri:"</span> + uri.toString());  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span> (MATCHER.match(uri)) &#123;  </span><br><span class="line">        <span class="keyword">case</span> NOTEBOOKS:  </span><br><span class="line">            <span class="comment">//调用数据库的插入功能</span></span><br><span class="line">            <span class="comment">// 特别说一下第二个参数是当title字段为空时，将自动插入一个NULL。  </span></span><br><span class="line">            <span class="keyword">long</span> rowid = db.insert(<span class="string">"notebook"</span>, <span class="string">"title"</span>, values);  </span><br><span class="line">            Uri insertUri = ContentUris.withAppendedId(uri, rowid);<span class="comment">// 得到代表新增记录的Uri  </span></span><br><span class="line">            <span class="keyword">this</span>.getContext().getContentResolver().notifyChange(uri, <span class="keyword">null</span>);  </span><br><span class="line">            <span class="keyword">return</span> insertUri;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unkwon Uri:"</span> + uri.toString());  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">switch</span> (MATCHER.match(uri)) &#123;  </span><br><span class="line">        <span class="keyword">case</span> NOTEBOOKS:  </span><br><span class="line">            count = db.delete(<span class="string">"notebook"</span>, selection, selectionArgs);  </span><br><span class="line">            <span class="keyword">return</span> count;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">case</span> NOTEBOOK:  </span><br><span class="line">            <span class="keyword">long</span> id = ContentUris.parseId(uri);  </span><br><span class="line">            String where = <span class="string">"_id="</span> + id;  </span><br><span class="line">            <span class="keyword">if</span> (selection != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(selection)) &#123;  </span><br><span class="line">                where = selection + <span class="string">" and "</span> + where;  </span><br><span class="line">            &#125;  </span><br><span class="line">            count = db.delete(<span class="string">"notebook"</span>, where, selectionArgs);  </span><br><span class="line">            <span class="keyword">return</span> count;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unkwon Uri:"</span> + uri.toString());  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">switch</span> (MATCHER.match(uri)) &#123;  </span><br><span class="line">        <span class="keyword">case</span> NOTEBOOKS:  </span><br><span class="line">            count = db.update(<span class="string">"notebook"</span>, values, selection, selectionArgs);  </span><br><span class="line">            <span class="keyword">return</span> count;  </span><br><span class="line">        <span class="keyword">case</span> NOTEBOOK:  </span><br><span class="line">            <span class="keyword">long</span> id = ContentUris.parseId(uri);  </span><br><span class="line">            String where = <span class="string">"_id="</span> + id;  </span><br><span class="line">            <span class="keyword">if</span> (selection != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(selection)) &#123;  </span><br><span class="line">                where = selection + <span class="string">" and "</span> + where;  </span><br><span class="line">            &#125;  </span><br><span class="line">            count = db.update(<span class="string">"notebook"</span>, values, where, selectionArgs);  </span><br><span class="line">            <span class="keyword">return</span> count;  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unkwon Uri:"</span> + uri.toString());  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为Uri代表了要操作的数据，所以我们经常需要解析Uri，并从Uri中获取数据。Android系统提供了两个用于操作Uri的工具类，分别为UriMatcher和ContentUris 。掌握它们的使用，会便于我们的开发工作。<br>看上去这个类很像我上次写的DBManager类吧。其实这可以算是一个很简单的数据操作类，关键地方就在于它放在了ContentProvider这个“容器”上，让第三方应用也能访问到己方的数据。所以想要吃透这个组件，只要透彻理解什么是Uri,怎么操作Uri就八九不离十了。</p><h3 id="配置文件注册"><a href="#配置文件注册" class="headerlink" title="配置文件注册"></a>配置文件注册</h3><p>最后，不要忘记在配置文件中为ContentProvider注册，因为这也是一个组件，所以无法避免了~<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span> <span class="attr">android:name</span>=<span class="string">".MyProvider"</span> <span class="attr">android:authorities</span>=<span class="string">"com.example.database"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>前面的是你的类名，后面则是关键地方，它是要写在Uri中的，所以不要弄错了。<br>到此，一个可以供其他应用访问的工程就建好了，接下来我们来写个测试工程来检验效果吧。</p><h2 id="三、调用ContentProvider"><a href="#三、调用ContentProvider" class="headerlink" title="三、调用ContentProvider"></a>三、调用ContentProvider</h2><p>在使用其他应用为你提供的ContentProvider时，你必须要知道的有两点：（1）它的authorities值，在我这里的是“com.example.database”；（2）数据文件的结构，比如我这里要使用的是数据库中的booknote表，它里面有着（_id,title,content,time）这些字段。只有知道了这些你才能操作ContentProvider。</p><h3 id="设置布局文件"><a href="#设置布局文件" class="headerlink" title="设置布局文件"></a>设置布局文件</h3><p>好的，我们先新建一个工程，设置一下布局文件<br><img src="https://images0.cnblogs.com/blog/653760/201408/231536425816852.png" alt="布局文件"><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"90dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"120dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/textView1"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Title:"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textAlignment</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"Content:"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textAlignment</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/editText1"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">requestFocus</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/editText2"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/listView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"196dp"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"90dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"0.20"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"获取全部信息"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"插入一条信息"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button3"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"删除一条信息"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button4"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"更新一条信息"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">activity_main.xml</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"80dip"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:text</span>=<span class="string">"_id"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">"@+id/id"</span>  </span></span><br><span class="line"><span class="tag">          /&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">TextView</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"80dip"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:text</span>=<span class="string">"title"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">"@+id/title"</span>  </span></span><br><span class="line"><span class="tag">          /&gt;</span>  </span><br><span class="line">        </span><br><span class="line">     <span class="tag">&lt;<span class="name">TextView</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"100dip"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"content"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">"@+id/content"</span>  </span></span><br><span class="line"><span class="tag">          /&gt;</span>     </span><br><span class="line">            </span><br><span class="line">     <span class="tag">&lt;<span class="name">TextView</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">           <span class="attr">android:text</span>=<span class="string">"time"</span>  </span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">"@+id/time"</span>  </span></span><br><span class="line"><span class="tag">          /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在MainActivity添加代码"><a href="#在MainActivity添加代码" class="headerlink" title="在MainActivity添加代码"></a>在MainActivity添加代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView.OnItemClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.SimpleCursorAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentResolver;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListView listView;</span><br><span class="line">    <span class="keyword">private</span> SimpleCursorAdapter adapter;</span><br><span class="line">    <span class="keyword">private</span> Button button_query, button_insert, button_delete, button_update;</span><br><span class="line">    <span class="keyword">private</span> EditText editText_title, editText_content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> CurItem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        editText_title = (EditText) <span class="keyword">this</span>.findViewById(R.id.editText1);</span><br><span class="line">        editText_content = (EditText) <span class="keyword">this</span>.findViewById(R.id.editText2);</span><br><span class="line">        </span><br><span class="line">        listView = (ListView) <span class="keyword">this</span>.findViewById(R.id.listView1);</span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                ListView lView = (ListView) parent;</span><br><span class="line">                Cursor data = (Cursor) lView.getItemAtPosition(position);</span><br><span class="line">                <span class="keyword">int</span> _id = data.getInt(data.getColumnIndex(<span class="string">"_id"</span>));</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, _id + <span class="string">""</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                        .show();</span><br><span class="line">                CurItem = _id;</span><br><span class="line">                editText_title.setText(data.getString(data.getColumnIndex(<span class="string">"title"</span>)));</span><br><span class="line">                editText_content.setText(data.getString(data.getColumnIndex(<span class="string">"content"</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        button_query = (Button) <span class="keyword">this</span>.findViewById(R.id.button1);</span><br><span class="line">        button_query.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        button_insert = (Button) <span class="keyword">this</span>.findViewById(R.id.button2);</span><br><span class="line">        button_insert.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        button_delete = (Button) <span class="keyword">this</span>.findViewById(R.id.button3);</span><br><span class="line">        button_delete.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        button_update = (Button) <span class="keyword">this</span>.findViewById(R.id.button4);</span><br><span class="line">        button_update.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ContentResolver它是ContentProvider提供的一个接口，它能够调用ContentProvider里面的所有方法。</span></span><br><span class="line">        ContentResolver contentResolver;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.button1:</span><br><span class="line">            contentResolver = getContentResolver();</span><br><span class="line">            <span class="comment">//Uri.parse()能将字符串转换成Uri格式。</span></span><br><span class="line">            Uri selectUri = Uri.parse(<span class="string">"content://com.example.database/notebook"</span>);</span><br><span class="line">            Cursor cursor = contentResolver.query(selectUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">            adapter = <span class="keyword">new</span> SimpleCursorAdapter(<span class="keyword">this</span>, R.layout.item, cursor,</span><br><span class="line">                    <span class="keyword">new</span> String[] &#123; <span class="string">"_id"</span>, <span class="string">"title"</span>, <span class="string">"content"</span>, <span class="string">"time"</span> &#125;,</span><br><span class="line">                    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; R.id.id, R.id.title, R.id.content, R.id.time &#125;,</span><br><span class="line">                    <span class="number">1</span>);</span><br><span class="line">            listView.setAdapter(adapter);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.button2:</span><br><span class="line">            contentResolver = getContentResolver();</span><br><span class="line">            Uri insertUri = Uri</span><br><span class="line">                    .parse(<span class="string">"content://com.example.database/notebook"</span>);</span><br><span class="line">            ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">            values.put(<span class="string">"title"</span>, editText_title.getText().toString());</span><br><span class="line">            values.put(<span class="string">"content"</span>, editText_content.getText().toString());</span><br><span class="line">            values.put(<span class="string">"time"</span>, System.currentTimeMillis());</span><br><span class="line">            Uri uri = contentResolver.insert(insertUri, values);</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, uri.toString() + <span class="string">"添加完成"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                    .show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.button3:</span><br><span class="line">            contentResolver = getContentResolver();</span><br><span class="line">            Uri deleteUri = Uri</span><br><span class="line">                    .parse(<span class="string">"content://com.example.database/notebook/"</span>+CurItem);</span><br><span class="line">            <span class="keyword">int</span> d = contentResolver.delete(deleteUri, <span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, CurItem+<span class="string">"删除完成"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                    .show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.button4:</span><br><span class="line">            contentResolver = getContentResolver();</span><br><span class="line">            Uri updateUri = Uri</span><br><span class="line">                    .parse(<span class="string">"content://com.example.database/notebook/"</span>+CurItem);</span><br><span class="line">            ContentValues updatevalues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">            updatevalues.put(<span class="string">"title"</span>, editText_title.getText().toString());</span><br><span class="line">            updatevalues.put(<span class="string">"content"</span>, editText_content.getText().toString());</span><br><span class="line">            updatevalues.put(<span class="string">"time"</span>, System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">int</span> u = contentResolver.update(updateUri, updatevalues,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, CurItem+<span class="string">"更新完成"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                    .show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个应用之间的流程图大概就是这样了（手挫，不要嫌弃~）<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/content_provider_%E6%B5%81%E7%A8%8B.png" alt="流程图"><br>最后，将两个应用安装好，打开实践一下。那么我们看看运行结果吧<br><img src="https://images0.cnblogs.com/blog/653760/201408/231555358463939.png" alt="运行结果"><br>正常运行。那么今天就到此结束，收工了~</p><h2 id="四、结束语"><a href="#四、结束语" class="headerlink" title="四、结束语"></a>四、结束语</h2><p>理论上来说，数据源组件并没有所谓的生命周期，因为数据源组件的状态并不作为判定进程优先级的依据。所以系统回收进程资源时，并不会将数据源组件的销毁事件告诉开发者。但构造ContentProvider组件时还是会调用onCreate()函数。所以，不要在数据源组件中部署延迟写入等写优化策略，当被系统默默回收时，一些未持久化的数据会丢失。一旦数据源组件被构造出来，就会保持长期运行的状态至其所在的进程被系统回收。所以，也不要在数据源组件中缓存过多的数据，以免占用内存空间。</p><p>到此，Android的四大组件已经介绍完毕，他们各有各的的特色和用法，同时也是我们开发时候不可缺少的工具。希望通过这些介绍能让大家体会到Android设计的巧妙和特征，学会正确的使用Android应用的框架。那么接下来可能会带来的是Android的Intent机制，尽请期待~  </p><p><embed src="http://www.xiami.com/widget/0_1773328832/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>参考文章：<br>（1）<a href="http://www.cnblogs.com/linjiqin/archive/2011/05/28/2061396.html" target="_blank" rel="noopener">ContentProvider和Uri详解</a><br>（2）<a href="http://bbs.51cto.com/thread-1024108-1.html" target="_blank" rel="noopener">ContentProvider浅析</a><br>（3）<a href="http://blog.csdn.net/worker90/article/details/7016430" target="_blank" rel="noopener">从头学Android之ContentProvider</a><br>下载：<a href="https://github.com/cpacm/android_learn/tree/master/ContentproviderDemo" target="_blank" rel="noopener">ContentProviderDemo下载</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（六）——Android数据存储（下）</title>
      <link href="/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>  </p><h2 id="一、Android数据库使用"><a href="#一、Android数据库使用" class="headerlink" title="一、Android数据库使用"></a>一、Android数据库使用</h2><p>Android中使用<code>android.database.sqlite.SQLiteDatabase</code>来表示一个数据库对象，它提供了两种模式来帮助开发者进行增删改查等基本数据库操作。</p><h3 id="利用SQL语句描述操作"><a href="#利用SQL语句描述操作" class="headerlink" title="利用SQL语句描述操作"></a>利用SQL语句描述操作</h3><p>利用SQL语句调用SQLiteDatabase.execSql或SQLiteDatabase.rawQuery来执行操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用sql查询数据</span></span><br><span class="line">Cursor data = db.rawQuery(<span class="string">"select id,name from table"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用sql插入数据</span></span><br><span class="line">db.execSql(<span class="string">"insert into contacts (id,name) values (2,'cpacm')"</span>);</span><br></pre></td></tr></table></figure></p><p>稍微学过sql语句的人应该都看的懂上面的代码（其实看语句的意思也能知道个大概~）<br>在这里我来解释一下Cursor（游标）的作用吧，游标不能顾名思义（我当时学习数据库时一度将游标当做与C语言里面的指针变量一样，虽然有点对，但意思还是理解错了），Cursor它是系统为用户开设的一个数据缓冲区，是的，它是一块数据区域，存放SQL语句的执行结果。但是它也提供了能从包括多条数据记录的结果集中每次提取一条记录的机制，这一点也跟指针很像。游标总是与一条SQL选择语句相关联因为游标由结果集（可以是零条、一条或由相关的选择语句检索出的多条记录）和结果集中指向特定记录的游标位置组成。当决定对结果集进行处理 时，必须声明一个指向该结果集的游标。用C语言作比较的话，如果写过对文件进行处理的程序，那么游标就像您打开文件所得到的文件句柄一样，只要文件打开成功，该文件句柄就可代表该文件。总之记住，游标是一块有着特有记号的一块数据区域，能够让用户逐条从中读取出数据。</p><h3 id="结构化的方式描述数据库的操作"><a href="#结构化的方式描述数据库的操作" class="headerlink" title="结构化的方式描述数据库的操作"></a>结构化的方式描述数据库的操作</h3><p>这样即使我们不熟悉SQL语句，也能使用最熟悉的面向对象的方式进行数据库操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构化的方式查询数据</span></span><br><span class="line">Cursor data = db.query(<span class="string">"contacts"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"name"</span>&#125;,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构化方式插入数据</span></span><br><span class="line">ContentValue values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">values.put(<span class="string">"id"</span>,<span class="number">2</span>);</span><br><span class="line">values.put(<span class="string">"name"</span>,<span class="string">"cpacm"</span>);</span><br><span class="line">db.insert(<span class="string">"table"</span>,<span class="keyword">null</span>,values);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 参数说明</span></span><br><span class="line"><span class="comment">* table:数据表名，columns:需要显示的列名，如果为null则相当与*</span></span><br><span class="line"><span class="comment">* selection:相当于sql语句的where条件；selectionArgs数组放的是where条件要替换的？号</span></span><br><span class="line"><span class="comment">* groupBy:SQL语句的Group， orderBy: 排序，默认asc</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span> <span class="params">(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比如说我要查询的SQL语句为<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CustomerName, <span class="keyword">SUM</span>(OrderPrice) <span class="keyword">FROM</span> Orders <span class="keyword">WHERE</span> Country=?   </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> CustomerName   </span><br><span class="line">    <span class="keyword">HAVING</span> <span class="keyword">SUM</span>(OrderPrice)&gt;<span class="number">500</span>  </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> CustomerName</span><br></pre></td></tr></table></figure></p><p>那么我写的代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据表名</span></span><br><span class="line">String table =  <span class="string">"Orders"</span> ;  </span><br><span class="line"><span class="comment">//要显示的列名</span></span><br><span class="line">String[] columns = <span class="keyword">new</span>  String[] &#123; <span class="string">"CustomerName"</span> ,  <span class="string">"SUM(OrderPrice)"</span> &#125;;  </span><br><span class="line"><span class="comment">//选择条件</span></span><br><span class="line">String selection = <span class="string">"Country=?"</span> ;  </span><br><span class="line"><span class="comment">//里面的变量对应条件中的问号，多个的时候请一一入座。</span></span><br><span class="line">String[] selectionArgs = <span class="keyword">new</span>  String[]&#123; <span class="string">"China"</span> &#125;;  </span><br><span class="line"><span class="comment">//分组名</span></span><br><span class="line">String groupBy = <span class="string">"CustomerName"</span> ;  </span><br><span class="line"><span class="comment">//分组的条件</span></span><br><span class="line">String having = <span class="string">"SUM(OrderPrice)&gt;500"</span> ;  </span><br><span class="line"><span class="comment">//按字段排序</span></span><br><span class="line">String orderBy = <span class="string">"CustomerName"</span> ;  </span><br><span class="line">Cursor c = db.query(table, columns, selection, selectionArgs, groupBy, having, orderBy);</span><br></pre></td></tr></table></figure></p><p>这样就能实现数据库的查询了。其它的语句参数都是差不多的，这里就不一一介绍了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">insert</span> <span class="params">(String table, String nullColumnHack, ContentValues values)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String table, String whereClause, String[] whereArgs)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String table, ContentValues values, String whereClause, String[] whereArgs)</span></span></span><br></pre></td></tr></table></figure></p><p><small><br><strong>课外小知识：关于GroupBy和Having的使用</strong><br><code>group by</code> 顾名思义就是按照xxx进行分组，它必须有“聚合函数”来配合才能使用，使用时至少需要一个分组标识字段。聚合函数有：sum()、count()、avg()等，使用group by目的就是要将数据分组进行汇总操作。比如上面sql语句的CustomerName，如果它有四个行{“张三”，“李四”，“张三”，“李四”}，那么此时就会分成两组，分别为张三组和李四组，然后统计出他们使用的orderprice总和。<br><code>HAVING</code>作用就是为每一个组指定条件，像where指定条件一样，也就是说，可以根据你指定的条件来选择行。如果你要使用HAVING子句的话，它必须处在GROUP BY子句之后。还是上面的SQL语句，如果张三的SUM（OrderPrice）没有超过500,那么张三组就不会显示。  </small></p><p>&lt;/small&gt;  </p><h3 id="SQL语句的预编译"><a href="#SQL语句的预编译" class="headerlink" title="SQL语句的预编译"></a>SQL语句的预编译</h3><p>在实践中，有的SQL语句需要被反复使用，为了避免反复解析SQL语句产生的开销，可以对需要复用的SQL语句进行预编译，来提高数据库操作的执行效率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译复杂的SQL语句</span></span><br><span class="line">SQLiteStatement compiledSql = db.compileStatement(aSQL);</span><br><span class="line"><span class="comment">//执行SQL</span></span><br><span class="line">compiledSql.execute();</span><br></pre></td></tr></table></figure></p><p>除此以外，Android还提供了丰富的高级数据库功能，比如支持触发器、支持复合索引以及支持对数据库事务的处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">       db.beginTransaction();</span><br><span class="line">       <span class="comment">//执行相关的数据库操作，如有异常，直接进入finally部分。</span></span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">       <span class="comment">//不论成功都要调用endTransaction来结束事务</span></span><br><span class="line">       db.endTransaction();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><small><strong>课外小知识</strong>：所谓事务是用户定义的一个数据库操作序列,这些操作要么全做要么全不做,是一个不可分割的工作单位。例如,在关系数据库中,一个事务可以是一条SQL语句、一组SQL语句或整个程序。 简单举个例子就是你要同时修改数据库中两个不同表的时候，如果它们不是一个事务的话，当第一个表修改完，可是第二表改修出现了异常而没能修改的情况下，就只有第二个表回到未修改之前的状态，而第一个表已经被修改完毕。 而当你把它们设定为一个事务的时候，当第一个表修改完，可是第二表改修出现了异常而没能修改的情况下，第一个表和第二个表都要回到未修改的状态！这就是所谓的事务回滚。</small></p><h3 id="SQLiteOpenHelper"><a href="#SQLiteOpenHelper" class="headerlink" title="SQLiteOpenHelper"></a>SQLiteOpenHelper</h3><p>在SQLiteOpenHelper中，封装了一个SqliteDatabase对象，使用着可以通过使用此类来进行数据库的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.notebook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase.CursorFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 在SQLiteOpenHelper的子类当中，必须有该构造函数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context   上下文对象 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name      数据库名称 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> version   当前数据库的版本，值必须是整数并且是递增的状态 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBHelper</span><span class="params">(Context context,String name,CursorFactory factory,<span class="keyword">int</span> version)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,name,factory,version);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBHelper</span><span class="params">(Context context, String name, <span class="keyword">int</span> version)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>(context,name,<span class="keyword">null</span>,version);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBHelper</span><span class="params">(Context context, String name)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>(context,name,VERSION);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 数据库首次构造时，会调用该函数，可以在这里构造表、索引，等等 </span></span><br><span class="line">        System.out.println(<span class="string">"create a database"</span>);  </span><br><span class="line">        <span class="comment">//execSQL用于执行SQL语句  </span></span><br><span class="line">        db.execSQL(<span class="string">"create table notebook(_id integer primary key autoincrement,pic varchar(50),title varchar(20),content text,time varchar)"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果给定的当前数据库版本高于已有数据库版本，调用该函数</span></span><br><span class="line">        System.out.println(<span class="string">"upgrade a database"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="SQLiteOpenHelper的应用"><a href="#SQLiteOpenHelper的应用" class="headerlink" title="SQLiteOpenHelper的应用"></a>SQLiteOpenHelper的应用</h3><p>新建一个数据库管理类DBManager<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.notebook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteException;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Context mContext = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase mSQLiteDatabase = <span class="keyword">null</span>;<span class="comment">//用于操作数据库的对象</span></span><br><span class="line">    <span class="keyword">private</span> DBHelper dh = <span class="keyword">null</span>;<span class="comment">//用于创建数据库的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String dbName = <span class="string">"note.db"</span>;<span class="comment">//数据库的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dbVersion = <span class="number">1</span>;<span class="comment">//数据库的版本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBManager</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            dh = <span class="keyword">new</span> DBHelper(mContext, dbName, <span class="keyword">null</span>, dbVersion);<span class="comment">//建立数据库</span></span><br><span class="line">            <span class="keyword">if</span>(dh == <span class="keyword">null</span>)&#123;</span><br><span class="line">                Log.v(<span class="string">"msg"</span>, <span class="string">"is null"</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            mSQLiteDatabase = dh.getWritableDatabase();<span class="comment">//以可写方式打开数据库</span></span><br><span class="line">            <span class="comment">//dh.onOpen(mSQLiteDatabase);</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLiteException se)&#123;</span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    mSQLiteDatabase.close();<span class="comment">//关闭数据库</span></span><br><span class="line">    dh.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">selectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//sql语句操作</span></span><br><span class="line">        String sql = <span class="string">"select * from notebook"</span>;</span><br><span class="line">        cursor = mSQLiteDatabase.rawQuery(sql, <span class="keyword">null</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        cursor = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cursor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//String result[] = &#123;&#125;;</span></span><br><span class="line">    Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//sql语句操作</span></span><br><span class="line">        String sql = <span class="string">"select * from notebook where _id='"</span> + id +<span class="string">"'"</span>;</span><br><span class="line">        cursor = mSQLiteDatabase.rawQuery(sql, <span class="keyword">null</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        cursor = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cursor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">insert</span><span class="params">(String title, String content,String pic)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> datetime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> l = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//结构化方式操作</span></span><br><span class="line">        ContentValues cv = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        cv.put(<span class="string">"title"</span>, title);</span><br><span class="line">        cv.put(<span class="string">"content"</span>, content);</span><br><span class="line">        cv.put(<span class="string">"time"</span>, datetime);</span><br><span class="line">        cv.put(<span class="string">"pic"</span>, pic);</span><br><span class="line">        l = mSQLiteDatabase.insert(<span class="string">"notebook"</span>, <span class="keyword">null</span>, cv);</span><br><span class="line">    <span class="comment">//    Log.v("datetime", datetime+""+l);</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        l = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> affect = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//结构化方式操作</span></span><br><span class="line">        affect = mSQLiteDatabase.delete(<span class="string">"notebook"</span>, <span class="string">"_id=?"</span>, <span class="keyword">new</span> String[]&#123;String.valueOf(id)&#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        affect = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> affect;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, String title, String content,String pic)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> affect = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//结构化方式操作</span></span><br><span class="line">        ContentValues cv = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        cv.put(<span class="string">"title"</span>, title);</span><br><span class="line">        cv.put(<span class="string">"content"</span>, content);</span><br><span class="line">        cv.put(<span class="string">"pic"</span>, pic);</span><br><span class="line">        String w[] = &#123;String.valueOf(id)&#125;;</span><br><span class="line">        affect = mSQLiteDatabase.update(<span class="string">"notebook"</span>, cv, <span class="string">"_id=?"</span>, w);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        affect = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> affect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取数据示例"><a href="#获取数据示例" class="headerlink" title="获取数据示例"></a>获取数据示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DBManager dm = <span class="keyword">null</span>;<span class="comment">// 数据库管理对象</span></span><br><span class="line"><span class="keyword">private</span> Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">dm = <span class="keyword">new</span> DBManager(<span class="keyword">this</span>);<span class="comment">//数据库操作对象</span></span><br><span class="line">dm.open();<span class="comment">//打开数据库操作对象</span></span><br><span class="line">cursor = dm.selectAll();<span class="comment">//获取所有数据</span></span><br><span class="line">cursor.moveToFirst();<span class="comment">//将游标移动到第一条数据，使用前必须调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = cursor.getCount();<span class="comment">//个数</span></span><br><span class="line">ArrayList&lt;String&gt; contents = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//图片的所有集合</span></span><br><span class="line">ArrayList&lt;String&gt; imgs = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//图片的所有集合</span></span><br><span class="line">ArrayList&lt;String&gt; items = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//标题的所有集合</span></span><br><span class="line">ArrayList&lt;String&gt; times = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//时间的所有集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">contents.add(cursor.getString(cursor.getColumnIndex(<span class="string">"content"</span>)));</span><br><span class="line">imgs.add(cursor.getString(cursor.getColumnIndex(<span class="string">"pic"</span>)));</span><br><span class="line">items.add(cursor.getString(cursor.getColumnIndex(<span class="string">"title"</span>)));</span><br><span class="line">times.add(cursor.getString(cursor.getColumnIndex(<span class="string">"time"</span>)));</span><br><span class="line"><span class="comment">//cursor.getInt(cursor.getColumnIndex("_id"))</span></span><br><span class="line">cursor.moveToNext();<span class="comment">//将游标指向下一个</span></span><br><span class="line">&#125;</span><br><span class="line">dm.close();<span class="comment">//关闭数据操作对象</span></span><br></pre></td></tr></table></figure><h3 id="数据库的并发问题"><a href="#数据库的并发问题" class="headerlink" title="数据库的并发问题"></a>数据库的并发问题</h3><p>并发问题是使用数据库过程中最容易碰到的问题，如果在开发中碰到了android.database.SQLException异常，并提示”database is locked”，那很有可能是出现了数据库的死锁导致无法访问。原因是Sqlite会对文件的读写进行加锁，防止数据被破坏。而在Android框架层SqliteDatabase会对所有数据库对象进行加锁保护，一旦出现了指向同一个数据库的多个SqliteDatabase对象同时在多个线程中被使用，那就跳脱了SqliteDatabase锁保护，就会导致数据库出现被锁的异常。因此在实践中，需要保证同时访问数据库的SqliteDatabase对象仅有一个。（可以使用全局变量来保存数据库对象，在整个数据源对象中使用同一个连接）<br>    <small><strong>课外小知识</strong>：在Android SDK中提供了工具Sqlite3，在shell模式下，可以对数据库进行增删改查。<br>    <code>cmd-&gt;adb shell -&gt;sqlite3 &lt;路径&gt;/&lt;数据库名&gt; -&gt;sqlite &gt; select * from sqmple</code>;  </small> </p><h2 id="二、Android数据的云端服务"><a href="#二、Android数据的云端服务" class="headerlink" title="二、Android数据的云端服务"></a>二、Android数据的云端服务</h2><p>本质上而言，云端存储就是通过网络将移动设备上的数据存储到远端服务器上。在Android中，增加了一些辅助功能，使得整个流程的实现变得更为简单。首先是通过Google账号来标识用户身份。在android中，默认支持使用Google账号作为用户身份的标识，系统上各个应用都可以通过账号系统获得用户的登录信息。其次，有了Google账号，使得开发者不需要自行构建后台服务系统。<br>Android的云端数据存取由系统服务BackupManagerService来统一管理。当应用提交备份数据请求时，BackupManagerService会将该请求放入备份队列中，该队列会按照一定的控制逻辑定时提交到云端。当有新应用安装到系统时，会触发数据恢复事件，BackupManagerService会凭借应用包名和用户账号从云端取出相应的备份数据，尝试恢复。<br>在实践中，Android会构造一个派生自BackupAgent类的子类android.app.backup.BackupAgentHelper的对象，来更方便地构建云端存储组件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.backup.BackupAgentHelper;</span><br><span class="line"><span class="keyword">import</span> android.app.backup.BackupDataInput;</span><br><span class="line"><span class="keyword">import</span> android.app.backup.BackupDataOutput;</span><br><span class="line"><span class="keyword">import</span> android.app.backup.FileBackupHelper;</span><br><span class="line"><span class="keyword">import</span> android.os.ParcelFileDescriptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBackupAgent</span> <span class="keyword">extends</span> <span class="title">BackupAgentHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"my_backup"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造文件读写对象，声明需要备份的文件</span></span><br><span class="line">        FileBackupHelper helper = <span class="keyword">new</span> FileBackupHelper(<span class="keyword">this</span>,<span class="string">"backup_file"</span>);</span><br><span class="line">        addHelper(KEY,helper);</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackup</span><span class="params">(ParcelFileDescriptor oldState, BackupDataOutput data,</span></span></span><br><span class="line"><span class="function"><span class="params">            ParcelFileDescriptor newState)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类方法，提交整个文件到云端</span></span><br><span class="line">        <span class="keyword">super</span>.onBackup(oldState, data, newState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestore</span><span class="params">(BackupDataInput data, <span class="keyword">int</span> appVersionCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            ParcelFileDescriptor newState)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类方法，将从云端获取的文件覆盖本地文件</span></span><br><span class="line">        <span class="keyword">super</span>.onRestore(data, appVersionCode, newState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreFile</span><span class="params">(ParcelFileDescriptor data, <span class="keyword">long</span> size,</span></span></span><br><span class="line"><span class="function"><span class="params">            File destination, <span class="keyword">int</span> type, <span class="keyword">long</span> mode, <span class="keyword">long</span> mtime)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.onRestoreFile(data, size, destination, type, mode, mtime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>Android不会自行将数据提交到云端，开发者需要显性调用android.app.backup.BackupManager的dataChanged函数来触发。</p><p>和所有组件一样，云端存储组件是由系统进行托管的。这就需要把组件的相关信息放入配置文件中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:backupAgent</span> = <span class="string">"MyBackupAgent"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">...</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>到这里，数据的部分就讲解的差不多了，剩下的就要回到我们的数据源组件ContentProvider了。<br>数据这一块对于开发者来说至关重要，怎样使用，如何做最有效率，这些问题也是我们技术员要一直研究的重点。</p><p>参考文章：<br><a href="http://blog.csdn.net/goohong/article/details/8026045" target="_blank" rel="noopener">Android 的Backup服务管理机制与架构分析</a><br>资源下载：（数据库+文件操作）<a href="https://github.com/cpacm/android_learn/tree/master/SqliteDemo" target="_blank" rel="noopener">SqliteDemo</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（五）——Android数据存储（上）</title>
      <link href="/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>  </p><h1 id="Android数据存储（上）"><a href="#Android数据存储（上）" class="headerlink" title="Android数据存储（上）"></a>Android数据存储（上）</h1><p>数据和程序是应用构成的两个核心要素，数据存储永远是应用开发中最重要的主题之一，也是开发平台必须提供的基础功能。不光是在Android平台上，在其他的平台上，数据的存储永远是不可缺少的一块。Android的数据存储是构建在<code>Linux</code>的文件系统上，它充分利用<code>Linux</code>的账号系统来限定应用对数据的访问，部署了一套安全和灵活并重的数据存储解决方案。Android的文件框架，以及各种数据存储手段，具体包括：<strong>Android的文件系统操作</strong>，<strong>设置文件的使用</strong>，<strong>数据库的使用</strong>，<strong>数据源组件的使用</strong>以及<strong>云端数据的存储</strong>。</p><h2 id="一、Android的文件系统"><a href="#一、Android的文件系统" class="headerlink" title="一、Android的文件系统"></a>一、Android的文件系统</h2><h3 id="Android系统文件目录"><a href="#Android系统文件目录" class="headerlink" title="Android系统文件目录"></a>Android系统文件目录</h3><p>包括：  </p><blockquote><ol><li>system —— 系统目录，放置在Android运行所需的核心库</li><li>data —— 应用目录，放置着运行在Android上的应用及其数据</li><li>sdcard —— 扩展存储卡目录，用来存放共享的数据</li><li>mnt —— 记录Android挂载的外部存储信息</li></ol></blockquote><h3 id="Android的应用数据存储机制"><a href="#Android的应用数据存储机制" class="headerlink" title="Android的应用数据存储机制"></a>Android的应用数据存储机制</h3><p>在Android中，第三方应用及其数据，都存放在data目录下。其中，应用安装包会被存放到<code>/data/app/</code>目录下，每个安装包的文件名都形如：应用包名.apk，以避免重复。<br>比如包名为<code>com.test.sample</code>的应用，其应用数据的目录为<code>/data/data/com.test.sample/</code>。对应的数据库文件存储在<code>/data/data/com.test.sample/database/</code>目录下，设置文件存储在<code>/data/data/com.test.sample/shared_prefs/</code>，自定义的应用数据文件存储在目录<code>/data/data/com.test.sample/files/</code>下，等等。<br>不仅如此，Android还会为每个应用创建一个账号，只有通过本应用的账号才有权限去运行该应用的安装包文件，读写应用数据目录下的文件（当然root权限除外啊~），从而保证了该应用数据不会再被其他应用获取或破坏。</p><h3 id="Android的文件操作"><a href="#Android的文件操作" class="headerlink" title="Android的文件操作"></a>Android的文件操作</h3><p>从应用数据目录下可以看出，数据文件可以分成两类，一类是放置在扩展存储器中的文件，即/sdcard/目录下的文件，它们可以被各个应用共享；而另一类则是放在该应用数据目录下文件，它们仅能被各个应用独享，不能被其他应用读写。<br><strong> （1）扩展存储器中的文件读写方式跟标准的java文件处理无异。</strong><br>我们可以新建一个FileUtil的工具类来帮助我们处理文件的I/O操作，首先我们先判断SD卡的状态，看看SD卡是否可用，还有多少可用容量等。新建一个FileUtil的Class,加入方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================get SDCard information===================</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSdcardAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String status = Environment.getExternalStorageState();</span><br><span class="line">        <span class="comment">//Environment.MEDIA_MOUNTED表示SD卡正常挂载</span></span><br><span class="line">        <span class="keyword">if</span> (status.equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSDAllSizeKB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//sd卡的位置</span></span><br><span class="line">        File path = Environment.getExternalStorageDirectory();</span><br><span class="line">        <span class="comment">//StatFs获取的都是以block为单位的</span></span><br><span class="line">        StatFs sf = <span class="keyword">new</span> StatFs(path.getPath());</span><br><span class="line">        <span class="comment">// 得到单个block的大小</span></span><br><span class="line">        <span class="keyword">long</span> blockSize = sf.getBlockSize();</span><br><span class="line">        <span class="comment">// 获取所有数据块数</span></span><br><span class="line">        <span class="keyword">long</span> allBlocks = sf.getBlockCount();</span><br><span class="line">        <span class="comment">// 返回SD卡大小</span></span><br><span class="line">        <span class="keyword">return</span> (allBlocks * blockSize) / <span class="number">1024</span>; <span class="comment">// KB</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * free size for normal application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSDAvalibleSizeKB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File path = Environment.getExternalStorageDirectory();</span><br><span class="line">        StatFs sf = <span class="keyword">new</span> StatFs(path.getPath());</span><br><span class="line">        <span class="keyword">long</span> blockSize = sf.getBlockSize();</span><br><span class="line">        <span class="keyword">long</span> avaliableSize = sf.getAvailableBlocks();</span><br><span class="line">        <span class="keyword">return</span> (avaliableSize * blockSize) / <span class="number">1024</span>;<span class="comment">// KB</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><code>Environment.getExternalStorageDirectory()</code>表示获取扩展存储器的目录。（建议使用此方法动态获取，因为sdcard这个目录路径是可配置的）<br><code>StatFs.getBlockSize</code>在API18后变为<code>StatFs.getBlockSizeLong</code>,其他类似的getBlock方法也一样，关于StatFs,详情可以看<a href="http://blog.csdn.net/pang3510726681/article/details/6969557" target="_blank" rel="noopener">这篇博文</a><br>然后在activity中的button1加入事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.button1: &#123;</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"sdcard?"</span>+FileUtil.isSdcardAvailable());</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"全部容量"</span>+(<span class="keyword">float</span>)FileUtil.getSDAllSizeKB()/<span class="number">1024</span>/<span class="number">1024</span>);</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"可用容量"</span>+(<span class="keyword">float</span>)FileUtil.getSDAvalibleSizeKB()/<span class="number">1024</span>/<span class="number">1024</span>);</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"status"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Data_SDCard%E6%97%A5%E5%BF%971.png" alt="Data_SDCard日志"><br>我们来判断某个文件夹是否存在在SD卡中以及创建一个文件夹<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> director 文件夹名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFileExist</span><span class="params">(String director)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory()</span><br><span class="line">                + File.separator + director);</span><br><span class="line">        <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create multiple director</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createFile</span><span class="params">(String director)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFileExist(director)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory()</span><br><span class="line">                    + File.separator + director);</span><br><span class="line">            <span class="keyword">if</span> (!file.mkdirs()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中<code>File.separator</code>是表示分隔符，在不同操作系统下是不同的，如windows就是代表”/“，而在Linux下却是代表”\”。所以介意使用File.separator来代替分隔符。File.mkdirs()表示创建一个文件夹，且可附带创建父目录，而mkdir()不行，详情的File大家可以查看官方文档，或者看看<a href="http://blog.csdn.net/ahjxly/article/details/9982855" target="_blank" rel="noopener">这篇博文</a><br>然后在activity中的button2加入响应事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.button2: &#123;</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"example文件夹存在?"</span>+FileUtil.isFileExist(<span class="string">"example"</span>));</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"创建forexample文件夹"</span>+FileUtil.createFile(<span class="string">"forexample"</span>));</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"IsFile"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>运行后可以看到<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Data_SDCard%E6%97%A5%E5%BF%972.png" alt="Data_SDCard日志"><br>我们会发现在手机的sdcard目录下新建了一个forexample的文件夹。<br>最后我们来实现文件的读和写<br>    <strong>写</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> director</span></span><br><span class="line"><span class="comment">     *            (you don't need to begin with</span></span><br><span class="line"><span class="comment">     *            Environment.getExternalStorageDirectory()+File.separator)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encoding</span></span><br><span class="line"><span class="comment">     *            (UTF-8...)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isAppend</span></span><br><span class="line"><span class="comment">     *            : Context.MODE_APPEND</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">writeToSDCardFile</span><span class="params">(String directory, String fileName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String content, String encoding, <span class="keyword">boolean</span> isAppend)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// mobile SD card path +path</span></span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!createFile(directory)) &#123;</span><br><span class="line">                <span class="keyword">return</span> file;</span><br><span class="line">            &#125;</span><br><span class="line">            file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory()</span><br><span class="line">                    + File.separator + directory + File.separator + fileName);</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(file, isAppend);</span><br><span class="line">            <span class="keyword">if</span> (encoding.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                os.write(content.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                os.write(content.getBytes(encoding));</span><br><span class="line">            &#125;</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"FileUtil"</span>, <span class="string">"writeToSDCardFile:"</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * write data from inputstream to SDCard</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">writeToSDCardFromInput</span><span class="params">(String directory, String fileName,</span></span></span><br><span class="line"><span class="function"><span class="params">            InputStream input)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (createFile(directory)) &#123;</span><br><span class="line">                <span class="keyword">return</span> file;</span><br><span class="line">            &#125;</span><br><span class="line">            file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory()</span><br><span class="line">                    + File.separator + directory + File.separator + fileName);</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferd];</span><br><span class="line">            <span class="keyword">int</span> length = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((length = input.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(data, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// clear cache</span></span><br><span class="line">            os.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.e(<span class="string">"FileUtil"</span>, <span class="string">""</span> + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>从上面可以看到有两种写入的方法，一种是将字符串直接写入，另一种是将数据流写到文件中。还有一点要提的是file的默认目录就是sdcard的目录，所以开头不必每次都要加sdcard的目录路径。<br><code>FileOutputStream(file, isAppend)</code>两个参数，左边是File文件，而右边是一个boolean值，为true时，数据将会接在原来文件的后面写入，而false是则会覆盖。<br><strong>读</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ReadFromSDCardFile</span><span class="params">(String directory,String fileName)</span></span>&#123;</span><br><span class="line">        String res=<span class="string">""</span>; </span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory()</span><br><span class="line">                + File.separator + directory + File.separator + fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="keyword">int</span> length = fis.available();</span><br><span class="line">            <span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[length]; </span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            <span class="comment">//将字节按照编码格式转成字符串</span></span><br><span class="line">            res = EncodingUtils.getString(buffer, <span class="string">"UTF-8"</span>);</span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException  e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"FileNotFound"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception  e) &#123;</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"Can Not Open File"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>编码默认是UTF-8，若是想要改变的话，将其作为参数传入就行。<br>Activity中在按钮中加入响应<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.button3: &#123;</span><br><span class="line">            FileUtil.writeToSDCardFile(<span class="string">"forexample"</span>, <span class="string">"test.txt"</span>,   </span><br><span class="line">                    editText.getText().toString(), <span class="string">"UTF-8"</span>, <span class="keyword">true</span>);</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"WriteFile"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">case</span> R.id.button4: &#123;</span><br><span class="line">            textView.setText(FileUtil.ReadFromSDCardFile(<span class="string">"forexample"</span>, <span class="string">"test.txt"</span>));</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"ReadFile"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>在文字编辑框上写入“我是cpacm”，先点击writefile按钮，再点击ReadFile，得到运行结果<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Data_Result.png" alt="结果图"><br>同时在根目录下的forexample文件夹里会找到test.txt，里面有着“我是cpacm”的一行字。到此，文件的读写成功。<br><strong>（2）放在该应用数据目录下的文件读写</strong><br>存储在应用目录下的私有数据目录，通常不会通过File类的方式直接读写，而是利用一些封装过的类或函数来操作。一般可以通过Context.openFileOutput来执行。<br>在Activity加入两个方法，分别为文件的读和写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String fileName,String writestr)</span></span>&#123; </span><br><span class="line">    <span class="keyword">try</span>&#123; </span><br><span class="line">            FileOutputStream fout =openFileOutput(fileName,MODE_PRIVATE); </span><br><span class="line">            <span class="keyword">byte</span> [] bytes = writestr.getBytes(); </span><br><span class="line">            fout.write(bytes); </span><br><span class="line">            fout.close(); </span><br><span class="line">          &#125; </span><br><span class="line">            <span class="keyword">catch</span>(Exception e)&#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">           &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//读数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readFile</span><span class="params">(String fileName)</span></span>&#123; </span><br><span class="line">  String res=<span class="string">""</span>; </span><br><span class="line">  <span class="keyword">try</span>&#123; </span><br><span class="line">         FileInputStream fin = openFileInput(fileName); </span><br><span class="line">         <span class="keyword">int</span> length = fin.available(); </span><br><span class="line">         <span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[length]; </span><br><span class="line">         fin.read(buffer);     </span><br><span class="line">         res = EncodingUtils.getString(buffer, <span class="string">"UTF-8"</span>); </span><br><span class="line">         fin.close();     </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">catch</span>(Exception e)&#123; </span><br><span class="line">         e.printStackTrace(); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同时在按钮的响应中加入<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.button5: &#123;</span><br><span class="line">            writeFile(<span class="string">"test2.txt"</span>,editText.getText().toString());</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"WritePrivateFile"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">case</span> R.id.button6: &#123;</span><br><span class="line">            textView.setText(readFile(<span class="string">"test2.txt"</span>));</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"ReadPrivateFile"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>效果图跟上张一样。</p><p>最后不要忘记在配置文件中声明权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="二、Android设置文件的使用"><a href="#二、Android设置文件的使用" class="headerlink" title="二、Android设置文件的使用"></a>二、Android设置文件的使用</h2><p>用户在使用应用时，常常会有一些个人偏好。为了满足不同用户的需求，应用通常会提供对应的设置项（Preference），让用户根据自己的喜好选择。这些设置信息会存储在本地并进行结构化地展示，使用户可以编辑。</p><h3 id="设置文件的存储和使用"><a href="#设置文件的存储和使用" class="headerlink" title="设置文件的存储和使用"></a>设置文件的存储和使用</h3><p>Android应用的设置数据，可以通过android.content.SharedPreferences类来表示。它提供了一组数据读取的接口，可以从设置文件中读取给定键值的整形数，布尔型数等数据。<br>首先是获取SharedPreferences<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SharedPreferences userInfo;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在界面组件或服务组件中调用，构造应用默认的设置文件，默认文件名字为_preferences.xml</span></span><br><span class="line"><span class="comment">//userInfo = PreferenceManager.getDefaultSharedPreferences(this);  </span></span><br><span class="line"><span class="comment">//或获取指定名字的SharedPreferences对象  参数分别为存储的文件名和存储模式。</span></span><br><span class="line">userInfo = getSharedPreferences(<span class="string">"preferences"</span>, Activity.MODE_PRIVATE); </span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据，如果无法找到则会使用默认值</span></span><br><span class="line">String username = userInfo.getString(<span class="string">"name"</span>, <span class="string">"未定义姓名"</span>);  </span><br><span class="line">String msg = userInfo.getString(<span class="string">"msg"</span>, <span class="string">"未定义信息"</span>);</span><br><span class="line"><span class="comment">//显示文本</span></span><br><span class="line">textView.setText(username+<span class="string">","</span>+msg);</span><br></pre></td></tr></table></figure><p>两种获取方式，默认或者指定一个文件<br>接下来加入响应按钮<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.button7: &#123;</span><br><span class="line">    <span class="comment">//获得SharedPreferences的编辑器</span></span><br><span class="line">    SharedPreferences.Editor editor = userInfo.edit();</span><br><span class="line">    <span class="comment">//将信息存入相应的键值中</span></span><br><span class="line">    editor.putString(<span class="string">"name"</span>, editText.getText().toString()).commit();</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"SetName"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">case</span> R.id.button8: &#123;</span><br><span class="line">    <span class="comment">//获得SharedPreferences的编辑器</span></span><br><span class="line">    SharedPreferences.Editor editor = userInfo.edit();</span><br><span class="line">    <span class="comment">//将信息存入相应的键值中ss</span></span><br><span class="line">    editor.putString(<span class="string">"msg"</span>, editText.getText().toString()).commit();</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"SetMessage"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">case</span> R.id.button9: &#123;</span><br><span class="line">    <span class="comment">//获得SharedPreferences文件</span></span><br><span class="line">    userInfo = getSharedPreferences(<span class="string">"preferences"</span>, Activity.MODE_PRIVATE);</span><br><span class="line">    String username = userInfo.getString(<span class="string">"name"</span>, <span class="string">"未定义姓名"</span>);  </span><br><span class="line">    String msg = userInfo.getString(<span class="string">"msg"</span>, <span class="string">"未定义信息"</span>);</span><br><span class="line">    textView.setText(username+<span class="string">","</span>+msg);</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"ShowMsg"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">case</span> R.id.button10: &#123;</span><br><span class="line">    <span class="comment">//输出XML文件</span></span><br><span class="line">    textView.setText(print());</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"ShowXML"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按钮7,8可以设置信息，按钮9则从SharedPreferences文件中读取信息并显示在文字框中。按钮10会显示这个XML文件中的所有信息。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/%E6%8C%89%E9%92%AE%E5%B8%83%E5%B1%80.png" alt="按钮布局"><br><strong>访问其他应用中的Preference</strong>(在SecondApp中访问FirstApp的数据)，前提条件是：FirstApp的preference创建时指定了Context.MODE_WORLD_READABLE或者Context.MODE_WORLD_WRITEABLE权限。<br>如：在<code>&lt;package name&gt;</code>为<code>com.first.app</code>的应用使用下面语句创建了<code>preference(&quot;first_app_perferences&quot;)</code>。<br>Java代码:<figure class="highlight java"><figcaption><span>getSharedPreferences("first_app_perferences", Context.MODE_WORLD_READABLE)```;  </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在SecondApp中要访问FirstApp应用中的preference，首先需要创建FirstApp应用的Context，然后通过Context 访问preference ，访问preference时会在应用所在包下的shared_prefs目录找到preference</span><br><span class="line">```java</span><br><span class="line">    Context firstAppContext = createPackageContext(<span class="string">"com.first.app"</span>, Context.CONTEXT_IGNORE_SECURITY);   </span><br><span class="line">    SharedPreferences sharedPreferences = firstAppContext.getSharedPreferences(<span class="string">"first_app_perferences"</span>,  Context.MODE_WORLD_READABLE);   </span><br><span class="line">    String name = sharedPreferences.getString(<span class="string">"name"</span>, <span class="string">""</span>);  </span><br><span class="line">    <span class="keyword">int</span> age = sharedPreferences.getInt(<span class="string">"age"</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>如果不通过创建Context访问FirstApp应用的preference，可以以读取xml文件方式直接访问FirstApp应用的preference对应的xml文件，<br>如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File xmlFile = <span class="keyword">new</span> File(“/data/data/&lt;<span class="keyword">package</span> name&gt;/shared_prefs/first_app_perferences.xml”);<span class="comment">//&lt;package name&gt;应替换成应用的包名: com.first.app</span></span><br></pre></td></tr></table></figure></p><p>设置界面组件<br>有一类特殊的Preference对象：android.preference.PreferenceGroup。它是容器型的Preference对象，负责管理一组相关联的Preference对象。设置项编辑的界面组件，通常派生自android.preference.PreferenceActivity类。它可以将一个定制好的设置树转换成对应的控件呈现出来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreferencesDemo</span> <span class="keyword">extends</span> <span class="title">PreferenceActivity</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savadInstanceState)</span></span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.onCreate(savadInstanceState);</span><br><span class="line">         <span class="keyword">this</span>.addPreferencesFromResource(R.xml.preference);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，R.xml.preference表示描述设置信息的资源文件。放在XML资源目录下。<br>详细可以参考Android的配置界面<a href="http://www.cnblogs.com/zhangdongzi/archive/2012/01/05/2313519.html" target="_blank" rel="noopener">PreferenceActivity</a></p><p>资源下载：<a href="https://github.com/cpacm/android_learn/tree/master/DataDemo" target="_blank" rel="noopener">DataDemo</a><br>参考文章<br>（1）<a href="http://blog.csdn.net/zuolongsnail/article/details/6556703" target="_blank" rel="noopener">Android中的SharedPreferences存储数据方式</a><br>（2）<a href="http://www.open-open.com/lib/view/open1330957864280.html" target="_blank" rel="noopener">Android - 文件操作小结</a></p><p><embed src="http://www.xiami.com/widget/0_1772625006/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>限于篇幅，这篇文章就到此结束，这篇主要讲了如何在Android中读写文件，包括SDCard中和应用内部的文件。以及如何使用设置文件。在下一篇我会讲解Android内部自带的数据库使用及操作。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（四）——Android四大组件之Broadcast Receiver</title>
      <link href="/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BBroadcast-Receiver/"/>
      <url>/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BBroadcast-Receiver/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>  </p><h2 id="一、广播的功能和特征"><a href="#一、广播的功能和特征" class="headerlink" title="一、广播的功能和特征"></a>一、广播的功能和特征</h2><ol><li>广播的生命周期很短，经过 <strong>调用对象—实现onReceive—结束</strong> 整个过程就结束了。从实现的复杂度和代码量来看，广播无疑是最迷你的Android组件，实现往往只需几行代码。广播对象被构造出来后通常只执行<code>BroadcastReceiver.onReceive</code>方法，便结束了其生命周期。所以有的时候我们可以把它当做函数看也未必不可。</li><li>和所有组件一样，广播对象也是在应用进程的主线程中被构造，所以广播对象的执行必须是要同步且快速的。也不推荐在里面开子线程，因为往往线程还未结束，广播对象就已经执行完毕被系统销毁。如果需要完成一项比较耗时的工作 , 应该通过发送 Intent 给 Service, 由 Service 来完成。</li><li>每次广播到来时,会重新创建 <code>BroadcastReceiver</code> 对象 , 并且调用 <code>onReceive()</code> 方法 , 执行完以后 , 该对象即被销毁 . 当 <code>onReceive()</code> 方法在 10 秒内没有执行完毕， Android 会认为该程序无响应。</li></ol><h2 id="二、广播事件监听的两种方法"><a href="#二、广播事件监听的两种方法" class="headerlink" title="二、广播事件监听的两种方法"></a>二、广播事件监听的两种方法</h2><p>使用广播进行事件监听有两种方法，静态注册和动态注册，又或者称冷插拔和热插拔。静态注册就是将广播接收器的相关信息写在应用的配置文件中。当有广播事件发生时，组件管理服务就会从安装包管理服务中获取已安装应用的广播组件信息。动态注册则是通过Context.registerReceiver和Context.unregisterRecever，动态将广播接收器与所需要监听的事件绑定。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>首先是在应用的配置文件中写入注册消息，同样是跟其他组件一样写在application标签之内<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".ColdReceiver"</span>&gt;</span><span class="comment">&lt;!-- 你的Receiver名称 --&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.COLD_BROADCAST"</span>/&gt;</span>  <span class="comment">&lt;!-- 你广播要接受的intent名称 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后我们建一个ColdReceiver的类，继承BroadcastReceiver，里面代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColdReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//跳转到service中</span></span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//开启service</span></span><br><span class="line">        context.startService(intent);</span><br><span class="line">        <span class="comment">//日志打印</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"静态注册"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中service的配置和内容如下<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=".BroadcastService"&gt;&lt;!-- 你自定义的service文件   （在&lt;application&gt;&lt;/application&gt;里面加）--&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=<span class="string">"android.intent.action.BroadcastService"</span> /&gt;&lt;!-- 用intent启动时的快捷名（也可以用常规的方式启动） --&gt;</span><br><span class="line">                &lt;category android:name=<span class="string">"android.intent.category.default"</span> /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启服务时会首先调用该方法</span></span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据每次intent传过来的信息进行判断来显示不同信息</span></span><br><span class="line">        <span class="keyword">switch</span>(intent.getFlags())&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"静态注册"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"动态注册"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"普通广播"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"有序广播"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 停止service后会调用此方法</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"destroy"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态广播的创建就此完成，简单的两个步骤，一是配置广播，二是继承BroadcastReceiver，重写里面的onReceive函数。<br>接下来我们再新建一个工程来检测广播是否可以响应消息。（检测应用的代码全部都在下方，并且不用再做更改了）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button b1,b2,b3,b4;</span><br><span class="line">    <span class="keyword">private</span> Intent intent;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        <span class="comment">//获得界面的控件</span></span><br><span class="line">        b1 = (Button) findViewById(R.id.button1);</span><br><span class="line">        b1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b2 = (Button) findViewById(R.id.button2);</span><br><span class="line">        b2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b3 = (Button) findViewById(R.id.button3);</span><br><span class="line">        b3.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b4 = (Button) findViewById(R.id.button4);</span><br><span class="line">        b4.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"===初始化完成==="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span>(v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button1:&#123;<span class="comment">//发送到静态注册广播</span></span><br><span class="line">                intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.COLD_BROADCAST"</span>);  </span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">                <span class="comment">//intent.putExtra("msg", "hello coldreceiver.");  </span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button2:&#123;<span class="comment">//发送到动态注册广播</span></span><br><span class="line">                intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.HOT_BROADCAST"</span>);  </span><br><span class="line">                <span class="comment">//intent.putExtra("msg", "hello hotreceiver.");  </span></span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button3:&#123;<span class="comment">//普通广播</span></span><br><span class="line">                intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.NORMAL_BROADCAST"</span>);  </span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button4:&#123;<span class="comment">//有序广播</span></span><br><span class="line">                intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.SORT_BROADCAST"</span>);  </span><br><span class="line">                sendOrderedBroadcast(intent, <span class="string">"scott.permission.SORT_BROADCAST_PERMISSION"</span>);  </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, str, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ok,将两个应用都安装到设备上，启动测试用的应用，点击第一个按钮，运行的效果如下<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/broadcast%E6%97%A5%E5%BF%971.png" alt="Broadcast静态注册日志"><br>同时，会出现”静态注册”的Toast(不方便截图)。可以看出静态注册广播能够跨应用来响应信息，这都要归功于安卓上的组件管理服务，它会读取每个应用的配置文件，然后获取里面的组件信息，每当有消息响应时，组件管理服务会从中查找有没有需要调用的组件，并判断是否进行执行。</p><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册也可以分成两部分，一在代码中进行动态注册，二还是继承BroadcastReceiver，重写里面的onReceive函数。<br>我们在广播应用中新建一个HotReceiver，继承BroadcastReceiver<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String msg = intent.getStringExtra("msg");  </span></span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">2</span>);</span><br><span class="line">        context.startService(intent);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"动态注册"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Activity中进行动态注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HotReceiver receiver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//动态注册广播</span></span><br><span class="line">        <span class="comment">//新建一个广播对象</span></span><br><span class="line">        receiver = <span class="keyword">new</span> HotReceiver();  </span><br><span class="line">        <span class="comment">//新建一个intent管理机制，（功能是对组件进行过滤，只获取需要的消息）</span></span><br><span class="line">        IntentFilter filter = <span class="keyword">new</span> IntentFilter(); </span><br><span class="line">        <span class="comment">//添加白名单（只获取该动作的信息）</span></span><br><span class="line">        filter.addAction(<span class="string">"android.intent.action.HOT_BROADCAST"</span>);          </span><br><span class="line">        <span class="comment">//与广播绑定，进行注册</span></span><br><span class="line">        registerReceiver(receiver, filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取消注册，一定要记得，不然系统会报错误</span></span><br><span class="line">        unregisterReceiver(receiver);</span><br><span class="line">        stopService(<span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>));</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ok,再使用测试应用来检查一下效果，注意步骤，安装好广播应用打开，不要让它退出，切换到测试用的广播，点击第二个按钮。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/broadcast%E6%97%A5%E5%BF%972.png" alt="Broadcast动态注册日志"><br>测试成功。那么我们关掉广播应用在测试一下，会发现不会再出现动态注册的打印消息。这说明动态注册的广播是与Activity绑定的，当Activity销毁时，广播也会被销毁。<br>在Android中，很多时候最好是使用动态注册的方式使用广播，比如时间变化事件，电量变更事件等，这些事件触发率太高，如果使用静态注册，会导致进程频繁的被构造和销毁从而影响整个系统的效率。</p><h2 id="三、广播的两种类型"><a href="#三、广播的两种类型" class="headerlink" title="三、广播的两种类型"></a>三、广播的两种类型</h2><h3 id="普通广播"><a href="#普通广播" class="headerlink" title="普通广播"></a>普通广播</h3><p>普通广播对于多个接收者来说是完全异步的，通常每个接收者都无需等待即可以接收到广播，接收者相互之间不会有影响。对于这种广播，接收者无法终止广播，即无法阻止其他接收者的接收动作。<br>接下来我们新建三个广播来进行验证。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalReceiver1</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">3</span>);</span><br><span class="line">        context.startService(intent);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"普通广播1"</span>);</span><br><span class="line">        abortBroadcast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalReceiver2</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">3</span>);</span><br><span class="line">        context.startService(intent);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"普通广播2"</span>);</span><br><span class="line">        abortBroadcast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalReceiver3</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">3</span>);</span><br><span class="line">        context.startService(intent);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"普通广播3"</span>);</span><br><span class="line">        abortBroadcast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".NormalReceiver1"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.NORMAL_BROADCAST"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".NormalReceiver2"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.NORMAL_BROADCAST"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".NormalReceiver3"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.NORMAL_BROADCAST"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>安装完毕后，我们点击检测应用的第三个按钮，可以看到<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/broadcast_normal.png" alt="普通广播"><br><code>abortBroadcast()</code>作用是阻断广播向下一级传播，显然在这里不起作用，并会让系统报错。所以如果要让广播有一定的优先级进行传播就要使用到有序广播。</p><h3 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h3><p>有序广播通过调用sendOrderedBroadcast函数进行发送。它每次只发送到优先级较高的接收者那里，然后由优先级高的接受者再传播到优先级低的接收者那里，优先级高的接收者有能力终止这个广播。在有序广播的传递过程中，每个执行中的触发器组件都可以通过BroadcastReceiver.setResult等函数附加额外的数据，而下一个广播则可以使用这些数据（BroadcastReceiver.getResultData）。这样可以构成一个消息数据处理链。<br>为了保证某一事件一定会被处理，可以指明默认的广播接收器（Final Receiver）。<br>一样的，新建三个广播样例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortReceiver1</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//String msg = intent.getStringExtra("msg");  </span></span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">4</span>);</span><br><span class="line">        context.startService(intent);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"有序广播1"</span>);</span><br><span class="line">        abortBroadcast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortReceiver2</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//String msg = intent.getStringExtra("msg");  </span></span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">4</span>);</span><br><span class="line">        context.startService(intent);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"有序广播2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortReceiver3</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//String msg = intent.getStringExtra("msg");  </span></span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.BroadcastService"</span>); </span><br><span class="line">        intent.addFlags(<span class="number">4</span>);</span><br><span class="line">        context.startService(intent);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"有序广播3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".SortReceiver1"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1000"</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SORT_BROADCAST"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".SortReceiver2"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"999"</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SORT_BROADCAST"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".SortReceiver3"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"998"</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SORT_BROADCAST"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到，现在这三个接收者的<intent-filter>多了一个android:priority属性，并且依次减小。这个属性的范围在-1000到1000，数值越大，优先级越高。<br>同样发送广播的代码也是不一样的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendOrderedBroadcast(intent, <span class="string">"scott.permission.SORT_BROADCAST_PERMISSION"</span>);</span><br></pre></td></tr></table></figure></intent-filter></p><p>注意，使用<code>sendOrderedBroadcast</code>方法发送有序广播时，需要一个权限参数，如果为null则表示不要求接收者声明指定的权限，如果不为 null，则表示接收者若要接收此广播，需声明指定权限。这样做是从安全角度考虑的，例如系统的短信就是有序广播的形式，一个应用可能是具有拦截垃圾短信 的功能，当短信到来时它可以先接受到短信广播，必要时终止广播传递，这样的软件就必须声明接收短信的权限。<br>所以我们在AndroidMainfest.xml中定义一个权限，并获得权限：（是要在广播的应用中声明）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:protectionLevel</span>=<span class="string">"normal"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"scott.permission.SORT_BROADCAST_PERMISSION"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"scott.permission.SORT_BROADCAST_PERMISSION"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>（这里不是写在application内部，而是同application同级）<br>运行后只会出现这么一个消息：<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/broadcast_order.png" alt="有序广播"><br>因为在第一个广播出我们就终止了广播的继续传递，所以就只会出现这么一条打印消息。</p><h2 id="四、形形色色的广播"><a href="#四、形形色色的广播" class="headerlink" title="四、形形色色的广播"></a>四、形形色色的广播</h2><p><embed src="http://www.xiami.com/widget/0_3500480/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>在android中有很多系统自带的intent.action，通过监听这些事件我们可以完成很多功能。<br><small><br>开机：<br>String BOOT_COMPLETED_ACTION 广播：在系统启动后。这个动作被广播一次（只有一次）。监听： “android.intent.action.BOOT_COMPLETED”<br>电话拨入：<br>String ANSWER_ACTION 动作：处理拨入的电话。监听： “android.intent.action.ANSWER”<br>电量变化：<br>String BATTERY_CHANGED_ACTION 广播：充电状态，或者电池的电量发生变化。监听： “android.intent.action.BATTERY_CHANGED”<br>日期改变：<br>String DATE_CHANGED_ACTION 广播：日期被改变。 监听：“android.intent.action.DATE_CHANGED”<br>取消更新下载：<br>String FOTA_CANCEL_ACTION 广播：取消所有被挂起的 (pending) 更新下载。 监听：“android.server.checkin.FOTA_CANCEL”<br>更新开始安装：<br>String FOTA_READY_ACTION 广播：更新已经被下载 可以开始安装。监听 “android.server.checkin.FOTA_READY”<br>主屏幕：<br>String HOME_CATEGORY 类别：主屏幕 (activity)。设备启动后显示的第一个 activity。 监听：”android.intent.category.HOME”<br>新应用：<br>String PACKAGE_ADDED_ACTION 广播：设备上新安装了一个应用程序包。监听： “android.intent.action.PACKAGE_ADDED”<br>删除应用：<br>String PACKAGE_REMOVED_ACTION 广播：设备上删除了一个应用程序包。监听： “android.intent.action.PACKAGE_REMOVED”<br>屏幕关闭：<br>String SCREEN_OFF_ACTION 广播：屏幕被关闭。监听： “android.intent.action.SCREEN_OFF”<br>屏幕开启：<br>String SCREEN_ON_ACTION 广播：屏幕已经被打开。 监听：“android.intent.action.SCREEN_ON”<br>时区改变：<br>String TIMEZONE_CHANGED_ACTION 广播：时区已经改变。监听： “android.intent.action.TIMEZONE_CHANGED”<br>时间改变：<br>String TIME_CHANGED_ACTION 广播：时间已经改变（重新设置）。 “android.intent.action.TIME_SET”<br>时间流逝：<br>String TIME_TICK_ACTION 广播：当前时间已经变化（正常的时间流逝）。 “android.intent.action.TIME_TICK”<br>进入大容量存储模式：<br>String UMS_CONNECTED_ACTION 广播：设备进入 USB 大容量存储模式。 “android.intent.action.UMS_CONNECTED”<br>退出大容量存储模式：<br>String UMS_DISCONNECTED_ACTION 广播：设备从 USB 大容量存储模式退出。 “android.intent.action.UMS_DISCONNECTED”<br>壁纸改变：<br>String WALLPAPER_CHANGED_ACTION 广播：系统的墙纸已经改变。 “android.intent.action.WALLPAPER_CHANGED”<br>web搜索：<br>String WEB_SEARCH_ACTION 动作：执行 web 搜索。 “android.intent.action.WEB_SEARCH”<br>网络变化：<br>String CONNECTIVITY_CHANGE_ACTION 动作：网络变化。“android.intent.action.CONNECTIVITY_CHANGE_ACTION”</small><br>广播本身的使用很简单，它所包含的内容也很少，最多是要多记住几个系统常用的几个ACTION。但是结合广播来进行应用的开发却会给用户带来更好的体验，广播的使用会让用户觉得开发者能够为用户考虑到各个情况的发生，这点往往能够留住大多数的用户。</p><p>资源下载：<a href="https://github.com/cpacm/android_learn/tree/master/BroadcastDemo" target="_blank" rel="noopener">BroadcastDemo</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mina框架的学习笔记——Android客户端的实现</title>
      <link href="/2015/03/22/Mina%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2015/03/22/Mina%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mina框架的学习笔记——Android客户端的实现"><a href="#Mina框架的学习笔记——Android客户端的实现" class="headerlink" title="Mina框架的学习笔记——Android客户端的实现"></a>Mina框架的学习笔记——Android客户端的实现</h1><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Mina%20Logo.jpg" alt="Mina Logo"><br>Apache MINA(Multipurpose Infrastructure for Network Applications) 是 Apache 组织一个较新的项目，它为开发高性能和高可用性的网络应用程序提供了非常便利的框架。当前发行的 MINA 版本支持基于 Java NIO 技术的 TCP/UDP 应用程序开发、串口通讯程序（只在最新的预览版中提供），MINA 所支持的功能也在进一步的扩展中。目前正在使用 MINA 的软件包括有：Apache Directory Project、AsyncWeb、AMQP（Advanced Message Queuing Protocol）、RED5 Server（Macromedia Flash Media RTMP）、ObjectRADIUS、Openfire 等等。  </p><h2 id="一、相关资源下载"><a href="#一、相关资源下载" class="headerlink" title="一、相关资源下载"></a>一、相关资源下载</h2><p> (1) Apache官方网站：<a href="http://mina.apache.org" target="_blank" rel="noopener">http://mina.apache.org</a><br> (2) Android用jar包（包括官网的资源，我会一律放在百度网盘下）</p><h2 id="二、Mina简单配置"><a href="#二、Mina简单配置" class="headerlink" title="二、Mina简单配置"></a>二、Mina简单配置</h2><p>服务器端一共要用到四个jar包，包括一个日志包。将他们放在lib中，并加载进去，它们分别为 mina-core-2.0.7.jar , slf4j-log4j12-1.7.6.jar , slf4j-api-1.7.6.jar , log4j-1.2.14.jar<br>如果要使用log4j.jar包，则要在项目的src目录下新建一个log4j.properties,添加内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootCategory=INFO, stdout , R   </span><br><span class="line">   </span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender   </span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout   </span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=[QC] %p [%t] %C.%M(%L) | %m%n   </span><br><span class="line">    </span><br><span class="line">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender   </span><br><span class="line">log4j.appender.R.File=D:\\Tomcat 5.5\\logs\\qc.log   </span><br><span class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout   </span><br><span class="line">1log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n   </span><br><span class="line">   </span><br><span class="line">log4j.logger.com.neusoft=DEBUG   </span><br><span class="line">log4j.logger.com.opensymphony.oscache=ERROR   </span><br><span class="line">log4j.logger.net.sf.navigator=ERROR   </span><br><span class="line">log4j.logger.org.apache.commons=ERROR   </span><br><span class="line">log4j.logger.org.apache.struts=WARN   </span><br><span class="line">log4j.logger.org.displaytag=ERROR   </span><br><span class="line">log4j.logger.org.springframework=DEBUG   </span><br><span class="line">log4j.logger.com.ibatis.db=WARN   </span><br><span class="line">log4j.logger.org.apache.velocity=FATAL   </span><br><span class="line">   </span><br><span class="line">log4j.logger.com.canoo.webtest=WARN   </span><br><span class="line">   </span><br><span class="line">log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN   </span><br><span class="line">log4j.logger.org.hibernate=DEBUG   </span><br><span class="line">log4j.logger.org.logicalcobwebs=WARN  </span><br><span class="line"></span><br><span class="line">log4j.rootCategory=INFO, stdout , R</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=[QC] %p [%t] %C.%M(%L) | %m%n</span><br><span class="line"> </span><br><span class="line">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.R.File=D:\\Tomcat 5.5\\logs\\qc.log</span><br><span class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class="line">1log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.com.neusoft=DEBUG</span><br><span class="line">log4j.logger.com.opensymphony.oscache=ERROR</span><br><span class="line">log4j.logger.net.sf.navigator=ERROR</span><br><span class="line">log4j.logger.org.apache.commons=ERROR</span><br><span class="line">log4j.logger.org.apache.struts=WARN</span><br><span class="line">log4j.logger.org.displaytag=ERROR</span><br><span class="line">log4j.logger.org.springframework=DEBUG</span><br><span class="line">log4j.logger.com.ibatis.db=WARN</span><br><span class="line">log4j.logger.org.apache.velocity=FATAL</span><br><span class="line"></span><br><span class="line">log4j.logger.com.canoo.webtest=WARN</span><br><span class="line"></span><br><span class="line">log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN</span><br><span class="line">log4j.logger.org.hibernate=DEBUG</span><br><span class="line">log4j.logger.org.logicalcobwebs=WARN</span><br></pre></td></tr></table></figure><p>Android客户端要加入的jar包：mina-core-2.0.7.jar , slf4j-android-1.6.1-RC1.jar 两个jar包（可能直接使用上面的jar包也会行，我没试过~）  </p><h2 id="三、Mina服务端"><a href="#三、Mina服务端" class="headerlink" title="三、Mina服务端"></a>三、Mina服务端</h2><p>我这边使用的是mina2.0版本，所以可能与mina1.0的版本有所不同。那么首先在服务器端创建开始</p><h3 id="程序入口文件"><a href="#程序入口文件" class="headerlink" title="程序入口文件"></a>程序入口文件</h3><p>新建一个Demo1Server.class文件，里面包含着程序的入口，端口号，Acceptor连接.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Server</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志类的实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(Demo1Server.class);</span><br><span class="line">    <span class="comment">//端口号，要求客户端与服务器端一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">4444</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IoAcceptor acceptor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建一个非阻塞的server端的Socket</span></span><br><span class="line">            acceptor = <span class="keyword">new</span> NioSocketAcceptor();</span><br><span class="line">            <span class="comment">//设置过滤器（使用mina提供的文本换行符编解码器）</span></span><br><span class="line">            acceptor.getFilterChain().addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> ProtocolCodecFilter(<span class="keyword">new</span> TextLineCodecFactory(Charset.forName(<span class="string">"UTF-8"</span>),LineDelimiter.WINDOWS.getValue(),LineDelimiter.WINDOWS.getValue())));</span><br><span class="line">            <span class="comment">//自定义的编解码器</span></span><br><span class="line">            <span class="comment">//acceptor.getFilterChain().addLast("codec", new ProtocolCodecFilter(new CharsetCodecFactory()));</span></span><br><span class="line">            <span class="comment">//设置读取数据的换从区大小</span></span><br><span class="line">            acceptor.getSessionConfig().setReadBufferSize(<span class="number">2048</span>);</span><br><span class="line">            <span class="comment">//读写通道10秒内无操作进入空闲状态</span></span><br><span class="line">            acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, <span class="number">10</span>);</span><br><span class="line">            <span class="comment">//为接收器设置管理服务</span></span><br><span class="line">            acceptor.setHandler(<span class="keyword">new</span> Demo1ServerHandler());</span><br><span class="line">            <span class="comment">//绑定端口</span></span><br><span class="line">            acceptor.bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            </span><br><span class="line">            logger.info(<span class="string">"服务器启动成功...    端口号未："</span>+PORT);</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"服务器启动异常..."</span>,e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个很简单的程序入口，简单的说就是在服务器上设置一个消息接收器，让它监听从端口传过来的消息并进行处理。那么接下来我们看看怎么进行消息处理。  </p><h3 id="消息处理类"><a href="#消息处理类" class="headerlink" title="消息处理类"></a>消息处理类</h3><p>新建一个消息处理类，或者说是是业务逻辑处理器——Demo1ServerHandler，它继承了IoHandlerAdapter类，它默认覆盖了七个方法，而我们主要使用messageReceived()。\<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1ServerHandler</span> <span class="keyword">extends</span> <span class="title">IoHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(Demo1ServerHandler.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从端口接受消息，会响应此方法来对消息进行处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(IoSession session, Object message)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String msg = message.toString();</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"exit"</span>.equals(msg))&#123;</span><br><span class="line">                     <span class="comment">//如果客户端发来exit，则关闭该连接</span></span><br><span class="line">                     session.close(<span class="keyword">true</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">        <span class="comment">//向客户端发送消息</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        session.write(date);</span><br><span class="line">        logger.info(<span class="string">"服务器接受消息成功..."</span>);        </span><br><span class="line">        <span class="keyword">super</span>.messageReceived(session, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向客服端发送消息后会调用此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageSent</span><span class="params">(IoSession session, Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"服务器发送消息成功..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.messageSent(session, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭与客户端的连接时会调用此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionClosed</span><span class="params">(IoSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"服务器与客户端断开连接..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.sessionClosed(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务器与客户端创建连接</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(IoSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"服务器与客户端创建连接..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.sessionCreated(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务器与客户端连接打开</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionOpened</span><span class="params">(IoSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"服务器与客户端连接打开..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.sessionOpened(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionIdle</span><span class="params">(IoSession session, IdleStatus status)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"服务器进入空闲状态..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.sessionIdle(session, status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(IoSession session, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"服务器发送异常..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(session, cause);</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很直白的一段程序，相当于将服务器分成了七个状态，而每个状态都有自己的一套逻辑处理方案。<br>至此，一个最简单的Mina服务器框架就搭好了，我们可以使用电脑上的telnet命令来测试一下服务器能否使用<br>cmd控制台—&gt;telnet <ip地址> &lt;端口号&gt;  如我的服务器ip地为192.168.1.10  那我就写telnet 192.168.1.10 4444 .此时我们可以看到输出日志为<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Mina%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97.jpg" alt="服务器输出日志"><br>此时连接已经创建，我们在输入信息服务器就会对信息进行处理，并给出相应的应答。</ip地址></p><h2 id="四、Mina客户端（Android端）"><a href="#四、Mina客户端（Android端）" class="headerlink" title="四、Mina客户端（Android端）"></a>四、Mina客户端（Android端）</h2><p>服务器简单搭建完毕，开始在Android端是配置服务器吧。同样的不要忘记加载jar包，Android自带Logout，所以就不使用Mina的日志包了。<br>由于接受消息会阻塞Android的进程，所以我把它开在子线程中（同时将其放在Service中，让其在后台运行）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IoSession session = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"客户端链接开始..."</span>);</span><br><span class="line">        IoConnector connector = <span class="keyword">new</span> NioSocketConnector();</span><br><span class="line">        <span class="comment">//设置链接超时时间</span></span><br><span class="line">        connector.setConnectTimeoutMillis(<span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//添加过滤器</span></span><br><span class="line">        <span class="comment">//connector.getFilterChain().addLast("codec", new ProtocolCodecFilter(new CharsetCodecFactory()));</span></span><br><span class="line">        connector.getFilterChain().addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> ProtocolCodecFilter(<span class="keyword">new</span> TextLineCodecFactory(Charset.forName(<span class="string">"UTF-8"</span>),LineDelimiter.WINDOWS.getValue(),LineDelimiter.WINDOWS.getValue())));</span><br><span class="line">        connector.setHandler(<span class="keyword">new</span> MinaClientHandler(minaService));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ConnectFuture future = connector.connect(<span class="keyword">new</span> InetSocketAddress(ConstantUtil.WEB_MATCH_PATH,ConstantUtil.WEB_MATCH_PORT));<span class="comment">//创建链接</span></span><br><span class="line">            future.awaitUninterruptibly();<span class="comment">// 等待连接创建完成</span></span><br><span class="line">            session = future.getSession();<span class="comment">//获得session</span></span><br><span class="line">            session.write(<span class="string">"start"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            Log.d(<span class="string">"TEST"</span>,<span class="string">"客户端链接异常..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        session.getCloseFuture().awaitUninterruptibly();<span class="comment">//等待连接断开</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"客户端断开..."</span>);</span><br><span class="line">        connector.dispose();</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不知道你们注意到了没，客户端的代码与服务器端的极其相似，不同的是服务器是创建NioSocketAcceptor对象，而客户端是创建NioSocketConnect对象。当然同样需要添加编码解码过滤器和业务逻辑过滤器。<br>业务逻辑过滤器代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaClientHandler</span> <span class="keyword">extends</span> <span class="title">IoHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(IoSession session, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"客户端发生异常"</span>);</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(session, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(IoSession session, Object message)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String msg = message.toString();</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"客户端接收到的信息为:"</span> + msg);</span><br><span class="line">        <span class="keyword">super</span>.messageReceived(session, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageSent</span><span class="params">(IoSession session, Object message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.messageSent(session, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法功能与服务器端一样。测试这里就不做了。可以的话自己写个Demo效果更好</p><h2 id="五、Mina的更多功能"><a href="#五、Mina的更多功能" class="headerlink" title="五、Mina的更多功能"></a>五、Mina的更多功能</h2><pre><code>(1)拿到所有客户端Session  Collection&lt;IoSession&gt; sessions = session.getService().getManagedSessions().values();(2)自定义编码解码器，可以对消息进行预处理。要继承ProtocolEncoder和ProtocolDecode类。(3)数据对象的传递</code></pre><p>及时总结和归纳自己学到的新知识也是一个好的程序员该具有的习惯。那么Mina的简单搭建就到这里为止了，希望对大家有所帮助。</p><p>参考文章：<br>（1）<a href="http://www.cnblogs.com/hoojo/archive/2012/08/01/2617857.html" target="_blank" rel="noopener">Apache MiNa 实现多人聊天室</a><br>（2）<a href="http://wenku.baidu.com/link?url=TLN1-v6ejvNVHZsVJ40RtcnGOPzZBDJlmrrBxHIWwrP9FjmgDZAY-8qqtskFXaB_e7Slfjf1qmLCUGmh6ZPJS_1Yi-uGMJDSMw6-YiDylTK&amp;qq-pf-to=pcqq.c2c" target="_blank" rel="noopener">MINA官方教程(中文版)</a><br>资源下载：<a href="http://pan.baidu.com/s/1i3sY1N3" target="_blank" rel="noopener">Mina相关资源</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mina </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（三）——Android四大组件之Service</title>
      <link href="/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService/"/>
      <url>/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>  </p><h1 id="Android四大组件之Service"><a href="#Android四大组件之Service" class="headerlink" title="Android四大组件之Service"></a>Android四大组件之Service</h1><p>Service作为Android的服务组件，默默地在后台为整个程序服务，辅助应用与系统中的其他组件或系统服务进行沟通。它跟Activity的级别差不多，但不能自己运行只能后台运行。service可以在很多场合的应用中使用，比如播放多媒体的时候用户启动了其他Activity这个时候程序要在后台继续播放，比如检测SD卡上文件的变化，再或者在后台记录你地理信息位置的改变等等， 总之服务总是藏在后台的。</p><h2 id="一、注册Service"><a href="#一、注册Service" class="headerlink" title="一、注册Service"></a>一、注册Service</h2><p>service的注册跟activity的注册类似，同样是要在AndroidManifest.xml的文件里注册。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MinaService"</span>&gt;</span><span class="comment">&lt;!-- 你自定义的service文件   （在&lt;application&gt;&lt;/application&gt;里面加）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.MinaService"</span> /&gt;</span><span class="comment">&lt;!-- 用intent启动时的快捷名（也可以用常规的方式启动） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.default"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="二、Service的两种模式"><a href="#二、Service的两种模式" class="headerlink" title="二、Service的两种模式"></a>二、Service的两种模式</h2><p>service有两种模式，本地服务和远程服务。我们一般开发应用都是用的本地服务，而远程服务经常在做系统开发时被用到。所以今天我会主要讲本地的服务，远程服务放着以后再讲吧<br><strong>本地服务</strong>依附在主进程上，当主进程被kill后，服务便会终止，常见的应用如：HTC的音乐播放服务，天天动听音乐播放服务。<br><strong>远程服务</strong>是独立的进程，对应进程名为所在包名加上你指定的android:process字符串。由于是独立的进程，因此在Activity所在进程被Kill的时候，该服务依然在运行，不受其他进程影响，有利于为多个进程提供服务具有较高的灵活性。常见的应用为一些提供系统服务的Service，这种Service就是常驻的。<br><img src="https://images0.cnblogs.com/i/653760/201408/141516183737021.gif" alt="service周期表"></p><h2 id="三、Service的生命周期及两种启动方式"><a href="#三、Service的生命周期及两种启动方式" class="headerlink" title="三、Service的生命周期及两种启动方式"></a>三、Service的生命周期及两种启动方式</h2><p>service的生命周期比activity简单多了，原因是service是在后台运行的，它是一直运行的，所以不需要那么多的状态判断。它只继承了onCreate()、onStart()或者说是onStartCommand()、onDestroy()三个方法。<br>// 2.0 API level之后，实现onStart等同于重写onStartCommand并返回。—&gt;关于onStartCommon()的<a href="http://blog.csdn.net/lizzy115/article/details/7001731" target="_blank" rel="noopener">详解</a>。</p><p>服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。这两个方法都可以启动Service，但是它们的使用场合有所不同。</p><blockquote><p><small>使用<strong>startService()</strong>方法启用服务，调用者与服务之间没有关连，即使调用者退出了，服务仍然运行。    如果打算采用Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。 采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。</small><br><small>使用<strong>bindService()</strong>方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。onBind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务绑定时被调用，当调用者与服务已经绑定，多次调用Context.bindService()方法并不会导致该方法被多次调用。采用Context.bindService()方法启动服务时只能调用onUnbind()方法解除调用者与服务解除，服务结束时会调用onDestroy()方法。</small></p></blockquote><h2 id="四、Service实例"><a href="#四、Service实例" class="headerlink" title="四、Service实例"></a>四、Service实例</h2><p>接下来我会写一个关于service的实例demo,希望看了之后会对大家有所帮助。</p><h3 id="建立Service"><a href="#建立Service" class="headerlink" title="建立Service"></a>建立Service</h3><p>先新建一个项目，并新建一个class文件，命名为MinaService，继承于service（不要忘记在AndroidManifest.xml文件里注册），其中代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"service bind success"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder mBinder = <span class="keyword">new</span> LocalBinder();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"onbind"</span>);</span><br><span class="line">        <span class="comment">//onBind service时会调用此方法，用于绑定Activity</span></span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启服务时会首先调用该方法</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"onCreate"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//start service时会在onCreate后调用该方法</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 停止service后会调用此方法</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"destroy"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取消Activity与service绑定时要调用此方法</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"onunbind"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRebind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 重新绑定时调用此方法</span></span><br><span class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"onrebind"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onRebind(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> cpacm</span></span><br><span class="line"><span class="comment">     * 通过Binder返回service的引用到Activity中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">        <span class="function">MinaService <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MinaService.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//普通方法，证明service在后台运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对Activity进行处理"><a href="#对Activity进行处理" class="headerlink" title="对Activity进行处理"></a>对Activity进行处理</h3><p>回到MainActivity中，来看一下我们需要做的处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MinaService ms = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Button b1,b2,b3,b4,b5,b6;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//获得界面的控件</span></span><br><span class="line">        textView = (TextView) findViewById(R.id.textView1);</span><br><span class="line">        editText = (EditText) findViewById(R.id.editText1);</span><br><span class="line">        b1 = (Button) findViewById(R.id.button1);</span><br><span class="line">        b1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b2 = (Button) findViewById(R.id.button2);</span><br><span class="line">        b2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b3 = (Button) findViewById(R.id.button3);</span><br><span class="line">        b3.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b4 = (Button) findViewById(R.id.button4);</span><br><span class="line">        b4.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b5 = (Button) findViewById(R.id.button5);</span><br><span class="line">        b5.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        b6 = (Button) findViewById(R.id.button6);</span><br><span class="line">        b6.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"===初始化完成==="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span>(v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button1:&#123;<span class="comment">//按钮一：用startService开启服务</span></span><br><span class="line">                Intent i  = <span class="keyword">new</span> Intent();  </span><br><span class="line">                i.setClass(MainActivity.<span class="keyword">this</span>, MinaService.class);  </span><br><span class="line">                startService(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button2:&#123;<span class="comment">//按钮二:停止服务</span></span><br><span class="line">                Intent i  = <span class="keyword">new</span> Intent();  </span><br><span class="line">                i.setClass(MainActivity.<span class="keyword">this</span>, MinaService.class);  </span><br><span class="line">                stopService(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button3:&#123;<span class="comment">//按钮三:用bindService来绑定Service和Activity</span></span><br><span class="line">                bindService(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,    </span><br><span class="line">                        MinaService.class), mConnection, Context.BIND_AUTO_CREATE); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button4:&#123;<span class="comment">//取消绑定</span></span><br><span class="line">                unbindService(mConnection); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button5:&#123;<span class="comment">//跳转到下一个Activity</span></span><br><span class="line">                Intent i  = <span class="keyword">new</span> Intent();  </span><br><span class="line">                i.setClass(MainActivity.<span class="keyword">this</span>, SecondActivity.class); </span><br><span class="line">                startActivity(i);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> R.id.button6:&#123;<span class="comment">//显示Service里面的信息</span></span><br><span class="line">                textView.setText(ms.getMsg());</span><br><span class="line">                ms.setMsg(editText.getText().toString());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, str, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection()&#123;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 绑定Service和Activity时会用到这个函数，所以可以在这里获取到Service的引用对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> android.content.ServiceConnection#onServiceConnected(android.content.ComponentName, android.os.IBinder)</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获取Service的引用对象</span></span><br><span class="line">             ms = ((MinaService.LocalBinder)service).getService();</span><br><span class="line">             Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"connect"</span>,</span><br><span class="line">                     Toast.LENGTH_SHORT).show(); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个函数是在绑定异常时调用，平时不会使用到这个函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> android.content.ServiceConnection#onServiceDisconnected(android.content.ComponentName)</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            ms = <span class="keyword">null</span>;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"cutdown"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show(); </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="SecondActivity"><a href="#SecondActivity" class="headerlink" title="SecondActivity"></a>SecondActivity</h3><p>再新建一个SecondActivity（不要忘记在AndroidManifest.xml里注册Activity），里面代码基本和MainActivity里一样，改一下这里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.button5:&#123;</span><br><span class="line">    Intent i  = <span class="keyword">new</span> Intent();  </span><br><span class="line">     i.setClass(SecondActivity.<span class="keyword">this</span>, MainActivity.class); </span><br><span class="line">    startActivity(i);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是Demo里面的组成部分了。接下来我们来看一下运行结果。首先我们先启动项目，按下第一个按钮（start service）,我们可以看到在LogCat里打印出<br><img src="https://images0.cnblogs.com/i/653760/201408/150909562647516.png" alt="Log输出"><br>可以看出项目先后调用了onCreate()和onStartCommand()。接下来按下第二个按钮（stop service）<br><img src="https://images0.cnblogs.com/i/653760/201408/150912412029437.png" alt="Log输出"><br>发现直接将service给destroy掉了。<br>接下来我们用BindService来启动Service依次按下第三个和第四个按钮，结果如图<br><img src="https://images0.cnblogs.com/i/653760/201408/150947364366911.png" alt="Log输出"><br>可以发现BindService不会调用onStartCommand()方法，它会使用onbind来代替。unbind后，Service也是会摧毁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法的第1个参数表示与服务类相关联的Intent对象，第2个参数是一个ServiceConnection类型的变量，负责连接Intent对象指定的服务。通过ServiceConnection对象可以获得连接成功或失败的状态，并可以获得连接后的服务对象。第3个参数是一个标志位，一般设为 Context.BIND_AUTO_CREATE。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn, <span class="keyword">int</span> flags)</span></span></span><br></pre></td></tr></table></figure></p><p>如果我们想保持和 Service 的通信，又不想让 Service 随着 Activity 退出而退出呢？  </p><blockquote><p>你可以先 startService() 然后再 bindService() 。当你不需要绑定的时候就执行 unbindService() 方法，执行这个方法只会触发 Service 的 onUnbind() 而不会把这个 Service 销毁。这样就可以既保持和 Service 的通信，也不会随着 Activity 销毁而销毁了。（销毁Service还是要调用StopService）   </p></blockquote><p>在应用中，我们先按下第一个按钮，再按下第三个按钮，这样activity就获得了service的对象。现在我们改变service里的值，在输入框输入“Activity与Service通信”，按下第六个按钮。然后按下第五个按钮跳转到下一个Activity。在跳转到的Activity中，我们按下第三个按钮（onBind）,在按下第六个按钮，你会发现文本框会出现“Activity与Service通信”的字符串。<br><img src="https://images0.cnblogs.com/i/653760/201408/151012152953512.png" alt="First Activity"> <img src="https://images0.cnblogs.com/i/653760/201408/151014165926901.png" alt="SecondActivity"><br>从截图上看，第二个activity成功获得了service里面的值。（注意，跳转到下一个Activity前一定要unbind,不然会报错）<br>关于service的一些技巧：<br>（1）可以在一个Activity启动Service,再在另一个Activity绑定。<br>（2）可以多次start同一个Service（通过该方法，可以经由intent传递信息到Service中）<br>（3）start-&gt;bind-&gt;stop,此时service还是存在的不会被销毁，但在调用unbind后，Service会被销毁。<br>可能还会有更多的可能性组合，大家可以自己写个demo来好好研究。</p><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p><embed src="http://www.xiami.com/widget/0_3500490/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>Service不仅可以与前端界面组件建立双向连接、提供数据和功能支持，也可以单向接受Intent对象的请求，进行数据的分析处理和功能调度。在不同的使用方式下，Service服务组件扮演的角色和开发模式完全不同。这种设计，也为理解Service带来了一定的难度。所以理解和习惯Service的使用显得非常重要。<br>参考文章：<a href="http://android.blog.51cto.com/268543/527314/" target="_blank" rel="noopener">Service学习之本地服务</a><br>源码：<a href="https://github.com/cpacm/android_learn/tree/master/ServiceDemo" target="_blank" rel="noopener">Service DEMO</a>（Github）</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（二）——Android四大组件之Activity</title>
      <link href="/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BActivity/"/>
      <url>/2015/03/22/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BActivity/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em>  </p><h2 id="一、Activity-的生命周期"><a href="#一、Activity-的生命周期" class="headerlink" title="一、Activity 的生命周期"></a>一、Activity 的生命周期</h2><p>Activity 的生命周期是被以下的函数控制的。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFreeze</span><span class="params">(Bundle outIcicle)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  onCreate函数：函数是你进行初始化的地方，这个也是执行setContentView(View)函数的地方,setContentView(View)函数可以传入一个由XML编制的UI界面，可以使UI和具体实现完全分离。<br>  onStart函数：该方法在 onCreate() 方法之后被调用。<br>  onRestart()函数：在 Activity 从 Stop 状态转换为 Active 状态时被调用。<br>  onResume()函数：在 Activity 从 Pause 状态转换到 Active 状态时被调用。<br>  onFreeze()函数：当你的activity被暂停而其他的activity恢复与用户交互的时候这个方法会被调用（在其他activity显示之前）<br>  onPause()函数：当系统要启动一个其他的activity时调用（其他的activity显示之前）<br>  onStop()函数：当另外一个activity恢复并遮盖住此activity,导致其对用户不再可见时调用。<br>  onDestroy()函数：在你的activity被销毁前所调用的最后一个方法。  </p></blockquote><p><center>![Activity 活动周期](http://7xi4up.com1.z0.glb.clouddn.com/android_2_Activity活动周期.png)</center></p><h2 id="二、Activity-的配置"><a href="#二、Activity-的配置" class="headerlink" title="二、Activity 的配置"></a>二、Activity 的配置</h2><pre><code>注册Activity，除了系统自动生成的Activity之外，其他的Activity都必须在manifest.xml文件中进行注册  </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Demo"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span> //.Demo是要注册的Activity名字，当然不在默认包内的话，前面要加上包名。后面的是Activity的名字</span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>启动另一个Activity  </code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    Intent intent =<span class="keyword">new</span> Intent(CurrentActivity.<span class="keyword">this</span>,OtherActivity.class); </span><br><span class="line">    startActivity(intent);</span><br><span class="line">```java</span><br><span class="line">    当然OtherActivity也必须在manifest.xml文件中进行注册。其中intent是一个通信机制，这个以后会专门介绍它。</span><br><span class="line"></span><br><span class="line">## 三、一些关于 Activity 的技巧</span><br><span class="line"></span><br><span class="line">    锁定Activity屏幕的运行方向  </span><br><span class="line">```xml</span><br><span class="line">    &lt;activity android:name=<span class="string">".EX01"</span></span><br><span class="line">     android:label=<span class="string">"@string/app_name"</span> </span><br><span class="line">     android:screenOrientation=<span class="string">"portrait"</span>&gt;<span class="comment">// 竖屏 , 值为 landscape 时为横屏</span></span><br><span class="line">     &lt;/activity&gt;</span><br></pre></td></tr></table></figure><pre><code>全屏的Activity  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置全屏模式</span></span><br><span class="line"> getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, </span><br><span class="line">    WindowManager.LayoutParams.FLAG_FULLSCREEN); </span><br><span class="line"> <span class="comment">// 去除标题栏</span></span><br><span class="line"> requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br></pre></td></tr></table></figure><pre><code>在Activity的title中加入进度条  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不明确进度条</span></span><br><span class="line"> requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS); </span><br><span class="line"> setContentView(R.layout.main); </span><br><span class="line"> setProgressBarIndeterminateVisibility(<span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 明确进度条</span></span><br><span class="line"> requestWindowFeature(Window.FEATURE_PROGRESS); </span><br><span class="line"> setContentView(R.layout.main); </span><br><span class="line"> setProgress(<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>Activity还有更多可以详细讲解的地方，比如它的交互事件，构造菜单、对话框等附加的交互资源以及它的数据结构等等。这些在以后的学习中我们肯定会遇到。所以今天在这里就不再赘述了，只是让大家了解一下它的简单机制。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><embed src="http://www.xiami.com/widget/0_3500481/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>（1）<a href="http://www.cnblogs.com/draem0507/archive/2012/11/28/2793332.html" target="_blank" rel="noopener">android之Activity生命周期</a><br>（2）<a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-android-actvt/" target="_blank" rel="noopener">详解 Android 的 Activity 组件</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git上开源介绍（二）—— side-menu</title>
      <link href="/2015/03/22/Git%E4%B8%8A%E5%BC%80%E6%BA%90%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-side-menu/"/>
      <url>/2015/03/22/Git%E4%B8%8A%E5%BC%80%E6%BA%90%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-side-menu/</url>
      
        <content type="html"><![CDATA[<p><em>该系列源于 <a href="https://github.com/trinea" target="_blank" rel="noopener">Trinea</a> 组织的开源活动 <a href="http://codekk.com/open-source-project-analysis" target="_blank" rel="noopener">codeKK</a>。</em></p><h1 id="Side-Menu-Android-源码解析"><a href="#Side-Menu-Android-源码解析" class="headerlink" title="Side Menu.Android 源码解析"></a>Side Menu.Android 源码解析</h1><blockquote><p>本文为 <a href="https://github.com/aosp-exchange-group/android-open-project-analysis" target="_blank" rel="noopener">Android 开源项目源码解析</a> 中 Side Menu.Android 部分<br>项目地址：<a href="https://github.com/Yalantis/Side-Menu.Android" target="_blank" rel="noopener">Side Menu.Android</a>，分析的版本：<a href="https://github.com/Yalantis/Side-Menu.Android/commit/2c23bff1dbebb87b3a3291e3f7d629cc0d5efbfa" target="_blank" rel="noopener">2c23bff</a>，Demo 地址：<a href="https://github.com/aosp-exchange-group/android-open-project-demo/tree/master/side-menu-demo" target="_blank" rel="noopener">side-menu-demo</a><br>分析者：<a href="https://github.com/cpacm" target="_blank" rel="noopener">cpacm</a>  </p></blockquote><p><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_demo.gif" alt="side-menu demo">  </p><h2 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1. 功能介绍"></a>1. 功能介绍</h2><h4 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h4><p>提供了一个翻页动画——<code>Flip Animation</code>。<br>基于Android 5.0开发。<br>使用ToolBar控制菜单。  </p><h4 id="1-2-要求"><a href="#1-2-要求" class="headerlink" title="1.2 要求"></a>1.2 要求</h4><p><strong>（1）</strong>界面布局使用DrawerLayout为容器，当通过xml来布局的话，需要把DrawerLayout作为父容器，内容布局作为其第一个子节点，而菜单布局则紧随其后作为第二个子节点，这样做就能把内容展示区和菜单区分开来，之后只需要分别在这两个区域里设置内容即可。<br><strong>（2）</strong>内容布局中，使用Toolbar并将其作为菜单界面的载体，通过Toolbar来控制菜单界面的打开和关闭。<br><strong>（3）</strong>内容布局中的信息界面需要继承ScreenShotable接口（如demo中的ContentFragment），以便切换信息。<br><strong>（4）</strong>主界面需要继承ViewAnimator.ViewAnimatorListener接口（如demo中的myActivity）。</p><h2 id="2-流程图"><a href="#2-流程图" class="headerlink" title="2. 流程图"></a>2. 流程图</h2><p><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_side_menu.jpg" alt="流程图" title="流程图"></p><h2 id="3-详细介绍"><a href="#3-详细介绍" class="headerlink" title="3. 详细介绍"></a>3. 详细介绍</h2><h4 id="3-1-类"><a href="#3-1-类" class="headerlink" title="3.1 类"></a>3.1 类</h4><p><em>（一）ViewAnimator类</em> <code>Side Menu 的管理类</code><br>1、ViewAnimator的构造函数需要传入5个参数，分别为<code>作为主界面的ActionBarActivity</code>、<code>子按钮列表</code>、<code>继承ScreenShotable接口的信息界面</code>、<code>DrawerLayout</code>、<code>继承ViewAnimatorListener接口的主界面</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewAnimator</span><span class="params">(ActionBarActivity activity,</span></span></span><br><span class="line"><span class="function"><span class="params">                        List&lt;T&gt; items,</span></span></span><br><span class="line"><span class="function"><span class="params">                        ScreenShotable screenShotable,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">final</span> DrawerLayout drawerLayout,</span></span></span><br><span class="line"><span class="function"><span class="params">                        ViewAnimatorListener animatorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actionBarActivity = activity;</span><br><span class="line">        <span class="keyword">this</span>.list = items;</span><br><span class="line">        <span class="keyword">this</span>.screenShotable = screenShotable;</span><br><span class="line">        <span class="keyword">this</span>.drawerLayout = drawerLayout;</span><br><span class="line">        <span class="keyword">this</span>.animatorListener = animatorListener;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>2、showMenuContent()方法，打开菜单界面。<br>简单地将其分成几部分：（1）在菜单未完全打开前设置按钮为不可用同时调用了ViewAnimatorListener接口中的disableHomeButton()方法。清空原先存放按钮视图的列表。（2）根据传入的按钮个数生成相应个数的按钮View,并为每个按钮添加点击事件，当事件发生时调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *参数分别为：选中的按钮，当前的信息界面，触摸点的Y坐标</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">animatorListener.onSwitch(slideMenuItem, screenShotable, topPosition)</span><br></pre></td></tr></table></figure></p><p>方法并关闭菜单列表。（3）将其添加到存放按钮视图的列表中。调用AnimatorListener接口的<code>addViewToContainer(viewMenu)</code>方法（我们要在Activity中人为的将其添加到界面布局中）。在菜单打开动画未完成情况下，将其属性设为不可用。调用<code>animateView（）</code>方法使用FlipAnimation类来实现动画设置，Handler实现延时播放。<br>3、hideMenuContent()方法，关闭菜单界面。<br>为每个按钮视图调用<code>animateHideView()</code>方法来设置关闭的动画，并通过Handler进行延时播放。在动画结束的监听器中设置视图不可见，drawerLayout上的关闭视图方法是最后一个按钮动画结束时调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animatorListener.enableHomeButton();<span class="comment">//回调函数，使主界面的菜单键生效</span></span><br><span class="line">drawerLayout.closeDrawers();</span><br></pre></td></tr></table></figure></p><p><em>（二）SlideMenuItem类</em> <code>选项按钮类</code><br>一个按钮容器类，里面存放着两个变量。主要用来设置菜单按钮。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;<span class="comment">//名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> imageRes;<span class="comment">//图片id</span></span><br></pre></td></tr></table></figure></p><p><em>（三）FlipAnimation类</em> <code>翻转动画</code><br>一个翻转动画工具类，继承自Animation类。根据传入的参数来实现不同的翻转效果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数分别为：起始角度，终止角度，中心点的X坐标，中心点的Y坐标</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlipAnimation</span><span class="params">(<span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees,<span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>（四）Resourceble接口</em> <code>选项接口</code><br>按钮选项必须继承该接口(如SlideMenuItem就继承了该接口)，用于存放资源。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resourceble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageRes</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>（五）ScreenShotable接口</em> <code>用于信息变更的接口</code><br>该接口包含两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScreenShotable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeScreenShot</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、takeScreenShot()方法是在按钮被点击时触发。<br>2、getBitmap()方法,获取当前显示的Bitmap。  </p><h4 id="3-2-类关系图"><a href="#3-2-类关系图" class="headerlink" title="3.2 类关系图"></a>3.2 类关系图</h4><p><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_side_menu_class.jpg" alt="类图" title="类图"></p><h2 id="4-个人总结"><a href="#4-个人总结" class="headerlink" title="4.个人总结"></a>4.个人总结</h2><p>一个很简单的一个项目，所以从难度上没有什么好讲的（自己的收获则是熟悉了在Android5.0下Toolbar的用法）。<br>我认为问题最大的是它的扩展性太差，从ViewAnimator类的构造函数就能发现这个库一定要在相应的环境下（ActionBarActivity,DrawerLayout）才会产生作用。<br>其次是动画类型不能让开发者进行二次定制，要想改变动画类型则要进library库进行修改。最后是ViewAnimator里的很多设置是通过回调函数返回给开发者自己设置，感觉变得更复杂了。<br>总体上而言这更像专门定制的一款UI设计。不过我认为它最大的意义在于提供了一种在Toolbar下自定义菜单的思路，这是最值得我们借鉴的~</p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git上开源介绍（一）—— CFA Menu</title>
      <link href="/2015/03/21/Git%E4%B8%8A%E5%BC%80%E6%BA%90%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94CFA-Menu/"/>
      <url>/2015/03/21/Git%E4%B8%8A%E5%BC%80%E6%BA%90%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94CFA-Menu/</url>
      
        <content type="html"><![CDATA[<p><em>该系列源于 <a href="https://github.com/trinea" target="_blank" rel="noopener">Trinea</a> 组织的开源活动 <a href="http://codekk.com/open-source-project-analysis" target="_blank" rel="noopener">codeKK</a>。</em></p><h2 id="CircularFloatingActionMenu-源码解析"><a href="#CircularFloatingActionMenu-源码解析" class="headerlink" title="CircularFloatingActionMenu 源码解析"></a>CircularFloatingActionMenu 源码解析</h2><blockquote><p>本文为 <a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="noopener">Android 开源项目源码解析</a> 中 circular-foating-action-menu 部分<br>项目地址：<a href="https://github.com/oguzbilgener/CircularFloatingActionMenu" target="_blank" rel="noopener">CircularFloatingActionMenu</a>，分析的版本：<a href="https://github.com/oguzbilgener/CircularFloatingActionMenu/commit/8efb1aab2b361ed9019fa4af6e5d43e77777bcb6" target="_blank" rel="noopener">8efb1aa</a>，Demo 地址：<a href="https://github.com/android-cn/android-open-project-demo/tree/master/circular-floating-actionmenu-demo" target="_blank" rel="noopener">CFAMenu-demo</a><br>分析者：<a href="https://github.com/cpacm" target="_blank" rel="noopener">cpacm</a>，校对者：<a href="https://github.com/dkmeteor" target="_blank" rel="noopener">dkmeteor</a>、<a href="https://github.com/trinea" target="_blank" rel="noopener">Trinea</a>  </p></blockquote><h3 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1. 功能介绍"></a>1. 功能介绍</h3><p>一个与著名应用 <a href="https://play.google.com/store/apps/details?id=com.path" target="_blank" rel="noopener">Path</a> 菜单类似的圆形弹出菜单，可方便的定制菜单以及动画。<br>菜单可能是非完整圆形，本文统称为<code>圆形菜单</code>。  </p><h4 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h4><p>可自定义动画、菜单、角度范围、半径等。  </p><h4 id="1-2-概念"><a href="#1-2-概念" class="headerlink" title="1.2 概念"></a>1.2 概念</h4><p><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_cfa_menu-demo.jpeg" alt="Menu Demo"><br>以上是简单的圆形弹出菜单示例，更详细的示例图见：<a href="https://github.com/android-cn/android-open-project-demo/blob/master/circular-floating-actionmenu-demo/README.md#2-screenshot" target="_blank" rel="noopener">Screenshot</a>。<br><strong>菜单按钮(Event)：</strong>点击会弹出圆形菜单的控件，如上图的 + 对应控件，对应代码中的<code>FloatingActionButton.java</code>。  </p><p><strong>子菜单按钮(Event)：</strong>圆形菜单中的控件，如上图的定位、视频、相机、文本对应的控件，对应代码中的<code>SubActionButton.java</code>。  </p><p><strong>菜单：</strong>整个菜单，包含上面的<code>菜单按钮</code>和<code>子菜单按钮</code>，对应代码中的<code>FloatingActionMenu.java</code>。  </p><p><strong>菜单动画回调：</strong>点击<code>菜单按钮</code>弹出<code>子菜单按钮</code>的动画设置的抽象类，对应代码中的<code>MenuAnimationHandler.java</code>。  </p><h3 id="2-总体设计"><a href="#2-总体设计" class="headerlink" title="2. 总体设计"></a>2. 总体设计</h3><p>本项目较为简单，总体设计省略。  </p><h3 id="3-流程图"><a href="#3-流程图" class="headerlink" title="3. 流程图"></a>3. 流程图</h3><p><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_cfa_circlemenu.jpg" alt="设计流程图" title="流程图"><br>流程图如上图所示，中间最复杂的可能是计算<code>子菜单按钮</code>位置的地方。</p><h3 id="4-详细设计"><a href="#4-详细设计" class="headerlink" title="4. 详细设计"></a>4. 详细设计</h3><h4 id="4-1-类关系图"><a href="#4-1-类关系图" class="headerlink" title="4.1 类关系图"></a>4.1 类关系图</h4><p><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_cfa_menu_uml.jpg" alt="uml" title="uml"><br>以上是<code>CircularFloatingActionMenu</code>主要类的关系图。  </p><p><code>FloatingActionButton</code>、<code>SubActionButton</code>都是继承自<code>FrameLayout</code>的自定义控件，可支持以其他 View 为内容，如<code>ImageView</code>、<code>TextView</code>。  </p><p><code>FloatingActionMenu</code>由<code>FloatingActionButton</code>、<code>SubActionButton</code>以及<code>MenuAnimationHandler</code>等构成。  </p><h4 id="4-2-类功能介绍"><a href="#4-2-类功能介绍" class="headerlink" title="4.2 类功能介绍"></a>4.2 类功能介绍</h4><p><code>CircularFloatingActionMenu</code>源码主要分成两部分，一部分是构成菜单的 View 部分，另一部分是动画的操作类。  </p><p>View 部分包含我们上面提到的菜单按钮<code>FloatingActionButton.java</code>、子菜单按钮<code>SubActionButton.java</code>、菜单<code>FloatingActionMenu.java</code>。 </p><p>动画部分包含菜单动画回调抽象类<code>MenuAnimationHandler.java</code>以及它默认的实现<code>DefaultAnimationHandler.java</code>。  </p><h5 id="4-2-1-SubActionButton-java"><a href="#4-2-1-SubActionButton-java" class="headerlink" title="4.2.1 SubActionButton.java"></a>4.2.1 SubActionButton.java</h5><p>子菜单按钮，即按菜单键弹出来的选项按钮。这个类继承自<code>FrameLayout</code>，实现一个自定义图标的功能。<br>可以根据构造函数传进来的参数来选择不同风格的图案底纹，然后将其传给<code>FloatingActionMenu</code>以便控制。<br>首先是构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubActionButton</span><span class="params">(Activity activity, LayoutParams layoutParams, <span class="keyword">int</span> theme, Drawable backgroundDrawable, View contentView, LayoutParams contentParams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(activity);</span><br><span class="line">        setLayoutParams(layoutParams);</span><br><span class="line">        <span class="comment">// If no custom backgroundDrawable is specified, use the background drawable of the theme.</span></span><br><span class="line">        <span class="keyword">if</span>(backgroundDrawable == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(theme == THEME_LIGHT) &#123;</span><br><span class="line">                backgroundDrawable = activity.getResources().getDrawable(R.drawable.button_sub_action_selector);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(theme == THEME_DARK) &#123;</span><br><span class="line">                backgroundDrawable = activity.getResources().getDrawable(R.drawable.button_sub_action_dark_selector);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(theme == THEME_LIGHTER) &#123;</span><br><span class="line">                backgroundDrawable = activity.getResources().getDrawable(R.drawable.button_action_selector);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(theme == THEME_DARKER) &#123;</span><br><span class="line">                backgroundDrawable = activity.getResources().getDrawable(R.drawable.button_action_dark_selector);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unknown SubActionButton theme: "</span> + theme);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//通过mutate()方法解决Drawable共用一个内存空间的问题</span></span><br><span class="line">            backgroundDrawable = backgroundDrawable.mutate().getConstantState().newDrawable();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置背景（考虑版本问题）</span></span><br><span class="line">        setBackgroundResource(backgroundDrawable);</span><br><span class="line">        <span class="keyword">if</span>(contentView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//添加view(即菜单的选项视图)</span></span><br><span class="line">            setContentView(contentView, contentParams);</span><br><span class="line">        &#125;</span><br><span class="line">        setClickable(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>从构造函数可以看的出来，选项按钮有四个主题可以选择，分别是下面的四种颜色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THEME_LIGHT = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THEME_DARK = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THEME_LIGHTER = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THEME_DARKER = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><p>之后是设定 ImageView 到这个按钮上，并且设定与父 View 的距离。（通过 setMargins()）<br>这个我们在创建 subActionButton 时就要调用。核心函数是 addView(contentView, params)。这个方法能够在视图上再添加一个 view，作为子视图。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets a content view with custom LayoutParams that will be displayed inside this SubActionButton.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> contentView</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View contentView, LayoutParams params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(params == <span class="keyword">null</span>) &#123;</span><br><span class="line">        params = <span class="keyword">new</span> LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.CENTER);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> margin = getResources().getDimensionPixelSize(R.dimen.sub_action_button_content_margin);</span><br><span class="line">        params.setMargins(margin, margin, margin, margin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    contentView.setClickable(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.addView(contentView, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后就是一个建造器了，专门生成用于生成该类的建造器，静态全局<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A builder for &#123;<span class="doctag">@link</span> com.cpacm.library.SubActionButton&#125; in conventional Java Builder format</span></span><br><span class="line"><span class="comment"> * 菜单选项的建造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SubActionButton <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubActionButton(activity,</span><br><span class="line">                layoutParams,</span><br><span class="line">                theme,</span><br><span class="line">                backgroundDrawable,</span><br><span class="line">                contentView,</span><br><span class="line">                contentParams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>传入 activity，视图特性配置，主题的 id，背景图，imageview（子视图），imageview（子视图）的特性配置。用这些来配置选项按钮。</p><h5 id="4-2-2-FloatingActionButton-java"><a href="#4-2-2-FloatingActionButton-java" class="headerlink" title="4.2.2 FloatingActionButton.java"></a>4.2.2 FloatingActionButton.java</h5><p>菜单按钮，点击会弹出圆形菜单的控件。   </p><p>这个类跟<code>SubActionButton</code>基本相似，同样可以通过内部自定义的<code>build</code>构造器来定制自己的按钮。<br>菜单按钮其实跟选项按钮的代码模式差不多，也是由设定子视图和一个建造器组成。<br>不过它多了几个方法：<br>设定位置，如左下，右下等方位<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the position of the button by calculating its Gravity from the position parameter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> position one of 8 specified positions.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> layoutParams</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPosition</span><span class="params">(<span class="keyword">int</span> position, FrameLayout.LayoutParams layoutParams)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> gravity;</span><br><span class="line">    <span class="keyword">switch</span>(position) &#123;</span><br><span class="line">        ...<span class="comment">//具体代码请自行查看源代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    layoutParams.gravity = gravity;</span><br><span class="line">    setLayoutParams(layoutParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将视图绑定到 activity 的主视图中。这样我们就能在 activity 的主视图中操作这个 view 了。<br>FloatingActionButton的建造器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A builder for &#123;<span class="doctag">@link</span> com.cpacm.library.FloatingActionButton&#125; in conventional Java Builder format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FloatingActionButton <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FloatingActionButton(activity,</span><br><span class="line">                                           layoutParams,</span><br><span class="line">                                           theme,</span><br><span class="line">                                           backgroundDrawable,</span><br><span class="line">                                           position,</span><br><span class="line">                                           contentView,</span><br><span class="line">                                           contentParams);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比 SubActionButton 多了一个位置的属性。</p><h5 id="4-2-3-FloatingActionMenu-java"><a href="#4-2-3-FloatingActionMenu-java" class="headerlink" title="4.2.3 FloatingActionMenu.java"></a>4.2.3 FloatingActionMenu.java</h5><p>那么最重要的类来了，<code>FloatingActionMenu</code>表示整个菜单，它存放着所有的按钮以及动画操作。  </p><p>基本结构图如下：<br><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_cfa_menu.jpg" alt="Alt text" title="menu"><br>这个类也是由一个建造器生成，那么我们从建造器开始说起<br>我们先看看生成 Menu 的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FloatingActionMenu rightLowerMenu = <span class="keyword">new</span> FloatingActionMenu.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .addSubActionView(rLSubBuilder.setContentView(rlIcon1).build())</span><br><span class="line">                .addSubActionView(rLSubBuilder.setContentView(rlIcon2).build())</span><br><span class="line">                .addSubActionView(rLSubBuilder.setContentView(rlIcon3).build())</span><br><span class="line">                .addSubActionView(rLSubBuilder.setContentView(rlIcon4).build())</span><br><span class="line">                .setAnimationHandler(<span class="keyword">new</span> SliderAnimationHandler())</span><br><span class="line">                .attachTo(rightLowerButton)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure></p><ul><li>Builder(this) 将 activity 传入 menu 中</li><li>addSubActionView 添加选项按钮到 activity 的视图中。在 FloatingActionMenu中管理 SubActionView 是一个 Item 的 list 集合，每次加一个按钮就往里面添加。Item 是一个辅助类，里面包括一个视图，x 坐标，y 坐标，长度，宽度。</li><li>setAnimationHandler 则是设定动画。</li><li>attachTo 是将 menu 与 activity 的视图绑定。（即把菜单按钮的视图添加到 activity 的视图中）  </li></ul><p>FloatingActionMenu 类主要是管理菜单按钮和选项按钮的位置和状态（开和关）<br>（1）首先是通过 view 的 onClick 监听器来控制状态  </p><p>（2）开关主要是两种状态，开的时候会获得菜单按钮的中心位置 center（getActionViewCenter()）和计算 item 的位置（calculateItemPositions()）。然后发送动画的请求到 AnimationHandler 中（animationHandler.animateMenuOpening(center)）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simply opens the menu by doing necessary calculations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> animated if true, this action is executed by the current &#123;<span class="doctag">@link</span> MenuAnimationHandler&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">boolean</span> animated)</span> </span>&#123;</span><br><span class="line">    ...<span class="comment">//具体代码请自行查看源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 item 的 x，y 是记录视图的终点位置，然后经过动画把 view 移到 x，y 的位置上。  </p><p>stateChangeListener 为状态变化的监听器，开关都会响应相应的方法。主要在 AnimationHandler 中添加具体方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A listener to listen open/closed state changes of the Menu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">MenuStateChangeListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMenuOpened</span><span class="params">(FloatingActionMenu menu)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMenuClosed</span><span class="params">(FloatingActionMenu menu)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（3）计算位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculates the desired positions of all items.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateItemPositions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...<span class="comment">//具体代码请自行查看源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="4-2-4-MenuAnimationHandler-java"><a href="#4-2-4-MenuAnimationHandler-java" class="headerlink" title="4.2.4 MenuAnimationHandler.java"></a>4.2.4 MenuAnimationHandler.java</h5><p>这是是所有动画类的父类，它主要定义了菜单打开，关闭，以及运行结束后状态的保存的方法。  </p><pre><code>animateMenuOpening(Point center)animateMenuClosing(Point center)   restoreSubActionViewAfterAnimation(FloatingActionMenu.Item subActionItem, ActionType actionType)</code></pre><h5 id="4-2-5-DefaultAnimationHandler-java"><a href="#4-2-5-DefaultAnimationHandler-java" class="headerlink" title="4.2.5 DefaultAnimationHandler.java"></a>4.2.5 DefaultAnimationHandler.java</h5><p>这一个默认的动画类，当我们不对动画做修改时就会默认使用这个类里面的动画效果。我们也可以参考这个类来进行设计新的动画效果。<br>动画效果主要是通过<code>ObjectAnimator.ofPropertyValuesHolder(menu.getSubActionItems().get(i).view, pvhX, pvhY, pvhR, pvhsX, pvhsY, pvhA)</code>来实现。<br>动画实现的主要类，继承自 MenuAnimationHandler<br>主要通过 Animator 来实现属性动画。<br>里面有一个 restoreSubActionViewAfterAnimation 的方法，它主要是恢复选项按钮到未打开的状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Restores the specified sub action view to its final state, accoding to the current actionType</span></span><br><span class="line"><span class="comment"> * Should be called after an animation finishes.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subActionItem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> actionType</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">restoreSubActionViewAfterAnimation</span><span class="params">(FloatingActionMenu.Item subActionItem, ActionType actionType)</span> </span>&#123;</span><br><span class="line">    ...<span class="comment">//具体代码请自行查看源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Animator属性动画以及其他动画的实现请参考我写的博客<br><a href="http://www.cnblogs.com/cpacm/p/4067283.html" target="_blank" rel="noopener">Android的动画效果</a></p><h4 id="4-3-如何使用"><a href="#4-3-如何使用" class="headerlink" title="4.3 如何使用"></a>4.3 如何使用</h4><pre><code>    // Set up the white button on the lower right corner    // more or less with default parameter    ImageView fabIconNew = new ImageView(this);    fabIconNew.setImageDrawable(getResources().getDrawable(R.drawable.ic_action_new_light));    FloatingActionButton rightLowerButton = new FloatingActionButton.Builder(this)            .setContentView(fabIconNew)            .build();    SubActionButton.Builder rLSubBuilder = new SubActionButton.Builder(this);    ImageView rlIcon1 = new ImageView(this);    ImageView rlIcon2 = new ImageView(this);    ImageView rlIcon3 = new ImageView(this);    ImageView rlIcon4 = new ImageView(this);    rlIcon1.setImageDrawable(getResources().getDrawable(R.drawable.ic_action_chat_light));    rlIcon2.setImageDrawable(getResources().getDrawable(R.drawable.ic_action_camera_light));    rlIcon3.setImageDrawable(getResources().getDrawable(R.drawable.ic_action_video_light));    rlIcon4.setImageDrawable(getResources().getDrawable(R.drawable.ic_action_place_light));    // Build the menu with default options: light theme, 90 degrees, 72dp radius.    // Set 4 default SubActionButtons    FloatingActionMenu rightLowerMenu = new FloatingActionMenu.Builder(this)            .addSubActionView(rLSubBuilder.setContentView(rlIcon1).build())            .addSubActionView(rLSubBuilder.setContentView(rlIcon2).build())            .addSubActionView(rLSubBuilder.setContentView(rlIcon3).build())            .addSubActionView(rLSubBuilder.setContentView(rlIcon4).build())            .setAnimationHandler(new SliderAnimationHandler())            .attachTo(rightLowerButton)            .build();</code></pre><p>如以上代码所示  </p><p>（1）先建立一个 view 来作为一个总容器，设置好图片，然后作为菜单的按钮  </p><p>（2）建立好选项菜单的视图，添加属性后，添加到 FloatingActionMenu 中的 ArrayList<item> 数组中，并同时绑定上面的菜单按钮。  </item></p><p>（3）如果使用自己定义的动画，setAnimationHandler(new SliderAnimationHandler())。  </p><p>这样子，一个简单的案例就做好了</p><p><img src="http://7xi4up.com1.z0.glb.clouddn.com/git_cfa_流程图.jpg" alt="流程图" title="流程图"></p><h3 id="5-杂谈"><a href="#5-杂谈" class="headerlink" title="5. 杂谈"></a>5. 杂谈</h3><p><embed src="http://www.xiami.com/widget/0_1769131051/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>动画的类型有点少，以及在屏幕尺寸异常的机子上测试时（如 mx3 的 1800x1080）会出现子选项偏离中心菜单键的问题，原因出在 view 的位置计算上，它没有考虑到一些特殊机型的机子。</p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记（一）——开发工具Android Studio</title>
      <link href="/2015/03/20/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Android-Studio/"/>
      <url>/2015/03/20/Android%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Android-Studio/</url>
      
        <content type="html"><![CDATA[<p><em>本系列原本写于博客园，现移植到自己的博客上并重新编辑。</em></p><h2 id="一、Android-Studio"><a href="#一、Android-Studio" class="headerlink" title="一、Android Studio"></a>一、Android Studio</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Android_Studio.jpg" alt="Android_Studio"><br>&#160; &#160; &#160; &#160;Android Studio正式版已经发布好久了，现在最新的版本是<em><a href="http://tools.android.com/download/studio" target="_blank" rel="noopener">Android Studio 1.1.0</a></em>。<br>外网无力的可以到这里下载<em><a href="http://www.android-studio.org/" target="_blank" rel="noopener">ANDROID STUDIO V1.0</a></em>，因为是国内资源所以速度很快，但是版本更新还是必须要连上Android的官网才行。<br>&#160; &#160; &#160; &#160;Android Studio的安装这里就不复述了，不了解的大可以自行百度，网上教程有很多（<a href="http://ask.android-studio.org/?/article/9" target="_blank" rel="noopener">Windows环境下Android Studio v1.0安装教程</a>）。<br>这里主要记录一点自己经常要用到的设置：  </p><h4 id="（1）快捷键设置"><a href="#（1）快捷键设置" class="headerlink" title="（1）快捷键设置"></a>（1）快捷键设置</h4><p><center> ![Keymap](http://7xi4up.com1.z0.glb.clouddn.com/android_1_AS_Keymap.jpg) </center><br>&#160; &#160; &#160; &#160;<strong>File—&gt;Settings</strong>，然后在列表中找到<strong>Keymap</strong>选项。你可以从 Keymaps 中选择对应IDE的快捷键，Android Studio对其他IDE的快捷键像Eclipse支持还是比较多的，你可以直接将AS的快捷键设置成其他IDE的快捷键，也可以在下方自己编辑。</p><h4 id="（2）Gitub"><a href="#（2）Gitub" class="headerlink" title="（2）Gitub"></a>（2）Gitub</h4><p><center> ![Gitmap](http://7xi4up.com1.z0.glb.clouddn.com/android_1_AS_Git.jpg) </center><br>&#160; &#160; &#160; &#160;同样是在<strong>Settings</strong>中找到<strong>Version Control</strong>选项，在其下拉菜单中选择Github中输入你的Github账号和密码，选择Git,将其链接到你的 Git 安装目录中。  </p><h4 id="（3）插件"><a href="#（3）插件" class="headerlink" title="（3）插件"></a>（3）插件</h4><p><center> ![Plugins](http://7xi4up.com1.z0.glb.clouddn.com/android_1_AS_Plugins.jpg) </center><br>&#160; &#160; &#160; &#160;同样是在<strong>Settings</strong>中找到<strong>Plugins</strong>，在其右边可以管理AS上所安装的插件目录。比如模拟器Genymotion所需的插件。  </p><h2 id="二、Gradle"><a href="#二、Gradle" class="headerlink" title="二、Gradle"></a>二、Gradle</h2><p>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。Android Studio正是依赖于Gradle来管理项目。—&gt;<a href="http://segmentfault.com/blog/stormzhang/1190000002439306" target="_blank" rel="noopener">Gradle详解</a><br>在Android Studio的项目中共包含两个build.gradle。</p><p><center> ![Gradle](http://7xi4up.com1.z0.glb.clouddn.com/android_1_AS_Gradle.jpg) </center><br>外面的build.gradle通常用于定义全局配置。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*repositories &#123;</span></span><br><span class="line"><span class="comment">        //从中央库里面获取依赖</span></span><br><span class="line"><span class="comment">        mavenCentral()</span></span><br><span class="line"><span class="comment">        //或者使用指定的本地maven 库</span></span><br><span class="line"><span class="comment">        maven&#123;</span></span><br><span class="line"><span class="comment">            url "file://F:/githubrepo/releases"</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //或者使用指定的远程maven库</span></span><br><span class="line"><span class="comment">        maven&#123;</span></span><br><span class="line"><span class="comment">            url "远程库地址"</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.0.0'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而我们通常要修改的则是放在app文件夹里面的build.gradle文件。使用示例：    </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.2"</span></span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        <span class="comment">// 防止在发布的时候出现因MissingTranslation导致Build Failed!</span></span><br><span class="line">        disable <span class="string">'MissingTranslation'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.cpacm.demo.side_menu_demo"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Android默认配置</span></span><br><span class="line">    <span class="comment">/*sourceSets &#123;</span></span><br><span class="line"><span class="comment">        main &#123;</span></span><br><span class="line"><span class="comment">            manifest.srcFile 'AndroidManifest.xml'</span></span><br><span class="line"><span class="comment">            java.srcDirs = ['src']</span></span><br><span class="line"><span class="comment">            resources.srcDirs = ['src']</span></span><br><span class="line"><span class="comment">            aidl.srcDirs = ['src']</span></span><br><span class="line"><span class="comment">            renderscript.srcDirs = ['src']</span></span><br><span class="line"><span class="comment">            res.srcDirs = ['res']</span></span><br><span class="line"><span class="comment">            assets.srcDirs = ['assets']</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //测试所在的路径，这里假设是tests文件夹，没有可以不写这一行</span></span><br><span class="line"><span class="comment">        instrumentTest.setRoot('tests')</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        <span class="comment">//默认debug keystore</span></span><br><span class="line">        <span class="comment">//debug &#123;</span></span><br><span class="line">        <span class="comment">//     storeFile file("debug.keystore")</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        myConfig &#123;</span><br><span class="line">            storeFile file(<span class="string">"./cpacm.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"shen1013"</span></span><br><span class="line">            keyAlias <span class="string">"cpacm"</span></span><br><span class="line">            keyPassword <span class="string">"shen1013"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">            <span class="comment">//app发布用</span></span><br><span class="line">            signingConfig signingConfigs.myConfig</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渠道打包（不同包名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*productFlavors &#123;</span></span><br><span class="line"><span class="comment">        qqqq &#123;</span></span><br><span class="line"><span class="comment">            applicationId = '包名'</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        hhhhh &#123;</span></span><br><span class="line"><span class="comment">            applicationId='包名'</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * .so文件的导入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*task copyNativeLibs(type: Copy) &#123;</span></span><br><span class="line"><span class="comment">    from fileTree(dir: 'libs', include: 'armeabi*/</span><span class="comment">/*.so') into 'build/lib'</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*tasks.withType(Compile) &#123;</span></span><br><span class="line"><span class="comment">    options.encoding = "UTF-8"</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*tasks.withType(Compile) &#123;</span></span><br><span class="line"><span class="comment">    compileTask -&gt; compileTask.dependsOn copyNativeLibs</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clean.dependsOn 'cleanCopyNativeLibs'</span></span><br><span class="line"><span class="comment">tasks.withType(com.android.build.gradle.tasks.PackageApplication) &#123; pkgTask -&gt;</span></span><br><span class="line"><span class="comment">    pkgTask.jniFolders = [new File(buildDir, 'lib')]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//依赖库</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.yalantis:sidemenu:1.0'</span></span><br><span class="line">    compile project(<span class="string">':circualreveal-library'</span>)</span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:21.0.3'</span></span><br><span class="line">    compile <span class="string">'com.android.support:support-v4:21.0.3'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>,<span class="string">'*.aar'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、模拟器Genymotion"><a href="#三、模拟器Genymotion" class="headerlink" title="三、模拟器Genymotion"></a>三、模拟器Genymotion</h2><p><a href="https://www.genymotion.com" title="Genymotion is a fast and easy-to-use Android emulator to run and test your Android apps" target="_blank" rel="noopener">Genymotion</a>是一款快速且能够轻松使用的模拟器，它支持Eclipse和Android Studio两款IDE的集成。<br>在Android Studio的插件安装很简单，只要打开<strong>Settings</strong>里面的<strong>Plugins</strong>选项，在右边中点开<strong>Browse Repositories</strong>,选择Genymotion并下载安装就ok了。</p><p><center> ![Genymotion](http://7xi4up.com1.z0.glb.clouddn.com/android_1_AS_Genymotion.jpg_blog) </center></p><h2 id="四、结束"><a href="#四、结束" class="headerlink" title="四、结束"></a>四、结束</h2><p><embed src="http://www.xiami.com/widget/5188237_1770505319/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>从Eclipse到Android Studio刚开始时是很不习惯的，不光光是熟悉新的快捷键，还有学习Gradle的依赖管理都要时间的沉淀。但Android Studio是一个趋势，不得不学，不跟紧科技的脚步会被时代抛弃。  </p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 开发系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ogre三维框架基础篇（六）</title>
      <link href="/2015/02/17/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2015/02/17/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="准备CEGUI"><a href="#准备CEGUI" class="headerlink" title="准备CEGUI"></a>准备CEGUI</h2><p>没有配置好CEGUI可以回到上一篇文章中重新配置。配置成功后将<strong>TutorialApplication</strong>初始化。</p><h3 id="TutorialApplication-h"><a href="#TutorialApplication-h" class="headerlink" title="TutorialApplication.h"></a>TutorialApplication.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BaseApplication.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CEGUI/CEGUI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CEGUI/RendererModules/Ogre/Renderer.h&gt; //from 0.8 it's just Ogre/Renderer.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialApplication</span> :</span> <span class="keyword">public</span> BaseApplication</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TutorialApplication(<span class="keyword">void</span>);</span><br><span class="line">    <span class="keyword">virtual</span> ~TutorialApplication(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">CEGUI::OgreRenderer* mRenderer;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createScene</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createFrameListener</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Ogre::FrameListener</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">frameRenderingQueued</span><span class="params">(<span class="keyword">const</span> Ogre::FrameEvent&amp; evt)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// OIS::KeyListener</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">keyPressed</span><span class="params">( <span class="keyword">const</span> OIS::KeyEvent &amp;arg )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">keyReleased</span><span class="params">( <span class="keyword">const</span> OIS::KeyEvent &amp;arg )</span></span>;</span><br><span class="line">    <span class="comment">// OIS::MouseListener</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">mouseMoved</span><span class="params">( <span class="keyword">const</span> OIS::MouseEvent &amp;arg )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">mousePressed</span><span class="params">( <span class="keyword">const</span> OIS::MouseEvent &amp;arg, OIS::MouseButtonID id )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">mouseReleased</span><span class="params">( <span class="keyword">const</span> OIS::MouseEvent &amp;arg, OIS::MouseButtonID id )</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">quit</span><span class="params">(<span class="keyword">const</span> CEGUI::EventArgs &amp;e)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="TutorialApplication-cpp"><a href="#TutorialApplication-cpp" class="headerlink" title="TutorialApplication.cpp"></a>TutorialApplication.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TutorialApplication.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line">TutorialApplication::TutorialApplication(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line">TutorialApplication::~TutorialApplication(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createScene(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createFrameListener(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::frameRenderingQueued(<span class="keyword">const</span> Ogre::FrameEvent&amp; evt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::keyPressed( <span class="keyword">const</span> OIS::KeyEvent &amp;arg )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::keyReleased( <span class="keyword">const</span> OIS::KeyEvent &amp;arg )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mouseMoved( <span class="keyword">const</span> OIS::MouseEvent &amp;arg )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mousePressed( <span class="keyword">const</span> OIS::MouseEvent &amp;arg, OIS::MouseButtonID id )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mouseReleased( <span class="keyword">const</span> OIS::MouseEvent &amp;arg, OIS::MouseButtonID id )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::quit(<span class="keyword">const</span> CEGUI::EventArgs &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OGRE_PLATFORM == OGRE_PLATFORM_WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OGRE_PLATFORM == OGRE_PLATFORM_WIN32</span></span><br><span class="line"><span class="function">INT WINAPI <span class="title">WinMain</span><span class="params">( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">else</span></span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">endif</span></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Create application object</span></span><br><span class="line">TutorialApplication app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">app.go();</span><br><span class="line">&#125; <span class="keyword">catch</span>( Ogre::Exception&amp; e ) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OGRE_PLATFORM == OGRE_PLATFORM_WIN32</span></span><br><span class="line">MessageBox( <span class="literal">NULL</span>, e.getFullDescription().c_str(), <span class="string">"An exception has occured!"</span>, MB_OK | MB_ICONERROR | MB_TASKMODAL);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"An exception has occured: "</span> &lt;&lt;</span><br><span class="line">e.getFullDescription().c_str() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="初始化CEGUI"><a href="#初始化CEGUI" class="headerlink" title="初始化CEGUI"></a>初始化CEGUI</h2><p>在<code>createScene()</code>方法中加入<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CEGUI的主要渲染器，bootstrapSystem()方法会初始化CEGUI中重要的几个管理器，如OgreRenderer，System，OgreResourceProvider，OgreImageCodec</span></span><br><span class="line">mRenderer = &amp;CEGUI::OgreRenderer::bootstrapSystem();</span><br><span class="line"><span class="comment">//读取资源文件</span></span><br><span class="line">CEGUI::ImageManager::setImagesetDefaultResourceGroup(<span class="string">"Imagesets"</span>);</span><br><span class="line">CEGUI::Font::setDefaultResourceGroup(<span class="string">"Fonts"</span>);</span><br><span class="line">CEGUI::Scheme::setDefaultResourceGroup(<span class="string">"Schemes"</span>);</span><br><span class="line">CEGUI::WidgetLookManager::setDefaultResourceGroup(<span class="string">"LookNFeel"</span>);</span><br><span class="line">CEGUI::WindowManager::setDefaultResourceGroup(<span class="string">"Layouts"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择UI皮肤</span></span><br><span class="line">CEGUI::SchemeManager::getSingleton().createFromFile(<span class="string">"TaharezLook.scheme"</span>);</span><br><span class="line"><span class="comment">//设置鼠标</span></span><br><span class="line">CEGUI::System::getSingleton().getDefaultGUIContext().getMouseCursor().setDefaultImage(<span class="string">"TaharezLook/MouseArrow"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="移除SDKTrays"><a href="#移除SDKTrays" class="headerlink" title="移除SDKTrays"></a>移除SDKTrays</h2><p>通过重写<strong>createFrameListener()</strong>和<strong>frameRenderingQueued()</strong>移除SDKTrays。（Ogre的logo部分）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> TutorialApplication::createFrameListener(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">Ogre::LogManager::getSingletonPtr()-&gt;logMessage(<span class="string">"*** Initializing OIS ***"</span>);</span><br><span class="line">OIS::ParamList pl;</span><br><span class="line"><span class="keyword">size_t</span> windowHnd = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">ostringstream</span> windowHndStr;</span><br><span class="line"></span><br><span class="line">mWindow-&gt;getCustomAttribute(<span class="string">"WINDOW"</span>, &amp;windowHnd);</span><br><span class="line">windowHndStr &lt;&lt; windowHnd;</span><br><span class="line">pl.insert(<span class="built_in">std</span>::make_pair(<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"WINDOW"</span>), windowHndStr.str()));</span><br><span class="line"></span><br><span class="line">mInputManager = OIS::InputManager::createInputSystem( pl );</span><br><span class="line"></span><br><span class="line">mKeyboard = <span class="keyword">static_cast</span>&lt;OIS::Keyboard*&gt;(mInputManager-&gt;createInputObject( OIS::OISKeyboard, <span class="literal">true</span> ));</span><br><span class="line">mMouse = <span class="keyword">static_cast</span>&lt;OIS::Mouse*&gt;(mInputManager-&gt;createInputObject( OIS::OISMouse, <span class="literal">true</span> ));</span><br><span class="line"></span><br><span class="line">mMouse-&gt;setEventCallback(<span class="keyword">this</span>);</span><br><span class="line">mKeyboard-&gt;setEventCallback(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set initial mouse clipping size</span></span><br><span class="line">windowResized(mWindow);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Register as a Window listener</span></span><br><span class="line">Ogre::WindowEventUtilities::addWindowEventListener(mWindow, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">mRoot-&gt;addFrameListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::frameRenderingQueued(<span class="keyword">const</span> Ogre::FrameEvent&amp; evt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mWindow-&gt;isClosed())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mShutDown)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Need to capture/update each device</span></span><br><span class="line">mKeyboard-&gt;capture();</span><br><span class="line">mMouse-&gt;capture();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Need to inject timestamps to CEGUI System.</span></span><br><span class="line">CEGUI::System::getSingleton().injectTimePulse(evt.timeSinceLastFrame);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="注入输入事件——键盘和鼠标"><a href="#注入输入事件——键盘和鼠标" class="headerlink" title="注入输入事件——键盘和鼠标"></a>注入输入事件——键盘和鼠标</h2><p>CEGUI不会自己处理输入，它不读取鼠标的移动和键盘的输入。相反地，它依赖用户把按键鼠标事件注入到系统，换句话说必须要人为的将其放到事件响应的方法中。CEGUI一般以缓冲模式注入到系统中。</p><h3 id="注入键盘响应事件中"><a href="#注入键盘响应事件中" class="headerlink" title="注入键盘响应事件中"></a>注入键盘响应事件中</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::keyPressed( <span class="keyword">const</span> OIS::KeyEvent &amp;arg )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//UI上下文</span></span><br><span class="line">CEGUI::GUIContext&amp; context = CEGUI::System::getSingleton().getDefaultGUIContext();</span><br><span class="line"><span class="comment">//注入按键按下的事件</span></span><br><span class="line">context.injectKeyDown((CEGUI::Key::Scan)arg.key);</span><br><span class="line"><span class="comment">//注入获取按下Unicode的事件</span></span><br><span class="line">context.injectChar((CEGUI::Key::Scan)arg.text);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::keyReleased( <span class="keyword">const</span> OIS::KeyEvent &amp;arg )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注入按键松开的事件</span></span><br><span class="line">CEGUI::System::getSingleton().getDefaultGUIContext().injectKeyUp((CEGUI::Key::Scan)arg.key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注入鼠标响应事件中"><a href="#注入鼠标响应事件中" class="headerlink" title="注入鼠标响应事件中"></a>注入鼠标响应事件中</h3><p>鼠标主要有三个响应类型，左键，中键以及右键，所以添加一个根据OIS反馈鼠标的响应类型的函数，把OIS的按钮ID转换为CEGUI的按钮ID<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CEGUI::<span class="function">MouseButton <span class="title">convertButton</span><span class="params">(OIS::MouseButtonID buttonID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (buttonID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> OIS::MB_Left:</span><br><span class="line"><span class="keyword">return</span> CEGUI::LeftButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::MB_Right:</span><br><span class="line"><span class="keyword">return</span> CEGUI::RightButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::MB_Middle:</span><br><span class="line"><span class="keyword">return</span> CEGUI::MiddleButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> CEGUI::LeftButton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>鼠标移动，按下和松开的响应事件<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mouseMoved( <span class="keyword">const</span> OIS::MouseEvent &amp;arg )</span><br><span class="line">&#123;</span><br><span class="line">CEGUI::System &amp;sys = CEGUI::System::getSingleton();</span><br><span class="line"><span class="comment">//参数分别为x,y的移动距离</span></span><br><span class="line">sys.getDefaultGUIContext().injectMouseMove(arg.state.X.rel, arg.state.Y.rel);</span><br><span class="line"><span class="comment">// 滚轮</span></span><br><span class="line"><span class="keyword">if</span> (arg.state.Z.rel)</span><br><span class="line"><span class="comment">//滚轮滚过的角度</span></span><br><span class="line">sys.getDefaultGUIContext().injectMouseWheelChange(arg.state.Z.rel / <span class="number">120.0f</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mousePressed( <span class="keyword">const</span> OIS::MouseEvent &amp;arg, OIS::MouseButtonID id )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注入鼠标按下的事件，参数为鼠标的响应类型</span></span><br><span class="line">CEGUI::System::getSingleton().getDefaultGUIContext().injectMouseButtonDown(convertButton(id));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mouseReleased( <span class="keyword">const</span> OIS::MouseEvent &amp;arg, OIS::MouseButtonID id )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注入鼠标松开的事件，参数为鼠标的响应类型</span></span><br><span class="line">CEGUI::System::getSingleton().getDefaultGUIContext().injectMouseButtonUp(convertButton(id));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="窗口、表单、组件-Windows-Sheets-and-Widgets"><a href="#窗口、表单、组件-Windows-Sheets-and-Widgets" class="headerlink" title="窗口、表单、组件(Windows, Sheets, and Widgets)"></a>窗口、表单、组件(Windows, Sheets, and Widgets)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>CEGUI与其它多数GUI系统有所不同。在CEGUI里，所有能显示出来的东西都是CEGUI::Window类的一个子类，而且一个window可以有任意数量的子window。这样会导致一些奇怪的事情发生。你能在一个按钮里面放置另外一个按钮，虽然实际上不会这么干。我提这些的原因是，当你正寻找放在应用程序里的某个特殊的小部件时，它们都被称作Windows，而且可以通过访问Windows的函数来访问。<br>CEGUI最常用的用法是，你不必在代码里创建每一个单独的对象。而你可以通过一个像<code>CEGUI Layout Editor</code>这样的编辑器，来为你的程序创建一个GUI布局。根据你的喜好，放置你的窗口、按钮以及其它部件到屏幕上之后，编辑器会把布局保存到一个文本文件里。你就可以之后加载这个布局到GUI sheet里面（它也是CEGUI::Window的一个子类）。<br>最后，要知道CEGUI包含大量的小部件供你的程序使用。我们在这里不去涉及，所以如果你决定使用CEGUI，最好还是去它们的网站了解更多的信息。</p><h3 id="载入表单"><a href="#载入表单" class="headerlink" title="载入表单"></a>载入表单</h3><p>在CEGUI里载入一个表单(sheet)是非常容易的事。WindowManager类提供了一个”loadWindowLayout”函数来加载表单，并把它放入CEGUI::Window对象。然后你可以通过CEGUI::System::setGUISheet来显示它。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本次示例程序中不需要添加</span></span><br><span class="line">CEGUI::Window *guiRoot = CEGUI::WindowManager::getSingleton().loadLayoutFromFile(<span class="string">"TextDemo.layout"</span>); </span><br><span class="line">CEGUI::System::getSingleton().getDefaultGUIContext().setRootWindow(guiRoot);</span><br></pre></td></tr></table></figure></p><h3 id="手动创建部件"><a href="#手动创建部件" class="headerlink" title="手动创建部件"></a>手动创建部件</h3><p>一个可以响应的退出按钮<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建CEGUI窗口</span></span><br><span class="line"><span class="comment">//-----------------------------------------------</span></span><br><span class="line"><span class="comment">//获取窗口管理器</span></span><br><span class="line">CEGUI::WindowManager &amp;wmgr = CEGUI::WindowManager::getSingleton();</span><br><span class="line"><span class="comment">//创建一个默认窗口（DefaultWindow），名字为"CEGUIDemo/Sheet"</span></span><br><span class="line">CEGUI::Window *sheet = wmgr.createWindow(<span class="string">"DefaultWindow"</span>, <span class="string">"CEGUIDemo/Sheet"</span>);</span><br><span class="line"><span class="comment">//创建按钮（样式在TaharezLook文件的Button节点中），名称为"CEGUIDemo/QuitButton"</span></span><br><span class="line">CEGUI::Window *quit = wmgr.createWindow(<span class="string">"TaharezLook/Button"</span>, <span class="string">"CEGUIDemo/QuitButton"</span>);</span><br><span class="line"><span class="comment">//设置文字</span></span><br><span class="line">quit-&gt;setText(<span class="string">"Quit"</span>);</span><br><span class="line"><span class="comment">//设置大小</span></span><br><span class="line">quit-&gt;setSize(CEGUI::USize(CEGUI::UDim(<span class="number">0.15</span>, <span class="number">0</span>), CEGUI::UDim(<span class="number">0.05</span>, <span class="number">0</span>)));</span><br><span class="line"><span class="comment">//为按钮绑定事件，参数分别为：点击响应，响应的事件</span></span><br><span class="line">quit-&gt;subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&amp;TutorialApplication::quit, <span class="keyword">this</span>));</span><br><span class="line"><span class="comment">//将按钮放置在默认窗口上</span></span><br><span class="line">sheet-&gt;addChild(quit);</span><br><span class="line"><span class="comment">//设置默认窗口为全局窗口</span></span><br><span class="line">CEGUI::System::getSingleton().getDefaultGUIContext().setRootWindow(sheet);</span><br></pre></td></tr></table></figure></p><p><code>quit()</code>方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::quit(<span class="keyword">const</span> CEGUI::EventArgs &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//关闭窗口</span></span><br><span class="line">mShutDown = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="渲染到纹理"><a href="#渲染到纹理" class="headerlink" title="渲染到纹理"></a>渲染到纹理</h2><p>用CEGUI创建一个纹理窗口的渲染器。这可以让我们能够创建一个可以直接渲染到CEGUI部件的视口。</p><h3 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h3><p>首先创建一个能让我们看见的场景（createScene()方法中）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建模型</span></span><br><span class="line">mSceneMgr-&gt;setAmbientLight(Ogre::ColourValue(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">mSceneMgr-&gt;setSkyDome(<span class="literal">true</span>, <span class="string">"Examples/CloudySky"</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">Ogre::Entity* ogreHead = mSceneMgr-&gt;createEntity(<span class="string">"Head"</span>, <span class="string">"ogrehead.mesh"</span>);</span><br><span class="line">Ogre::SceneNode* headNode = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(Ogre::Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-300</span>));</span><br><span class="line">headNode-&gt;attachObject(ogreHead);</span><br></pre></td></tr></table></figure></p><h3 id="创建纹理"><a href="#创建纹理" class="headerlink" title="创建纹理"></a>创建纹理</h3><p><strong>RenderSystem对象</strong>提供了一种渲染到纹理的功能。我们用<code>RenderSystem::createRenderTexture</code>函数创建一个纹理。在这个程序里，我们创建一个512 x 512的纹理<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ogre::TexturePtr tex = mRoot-&gt;getTextureManager()-&gt;createManual(</span><br><span class="line"><span class="string">"RTT"</span>,</span><br><span class="line">Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,</span><br><span class="line">Ogre::TEX_TYPE_2D,</span><br><span class="line"><span class="number">512</span>,</span><br><span class="line"><span class="number">512</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">Ogre::PF_R8G8B8,</span><br><span class="line">Ogre::TU_RENDERTARGET);</span><br><span class="line">Ogre::RenderTexture *rtex = tex-&gt;getBuffer()-&gt;getRenderTarget();</span><br></pre></td></tr></table></figure></p><h3 id="创建视口"><a href="#创建视口" class="headerlink" title="创建视口"></a>创建视口</h3><p>接下来创建一个摄像机和一个视口，以便察看创建的场景。注意，要关闭Overlays，否则你会看见CEGUI与Ogre在小窗口里面重叠在一起。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   Ogre::Camera *cam = mSceneMgr-&gt;createCamera(<span class="string">"RTTCam"</span>);</span><br><span class="line">cam-&gt;setPosition(<span class="number">100</span>, <span class="number">-100</span>, <span class="number">-400</span>);</span><br><span class="line">cam-&gt;lookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-300</span>);</span><br><span class="line"><span class="comment">//在材质上添加一个视口</span></span><br><span class="line">Ogre::Viewport *v = rtex-&gt;addViewport(cam);</span><br><span class="line"><span class="comment">//关掉透视</span></span><br><span class="line">v-&gt;setOverlaysEnabled(<span class="literal">false</span>);</span><br><span class="line">v-&gt;setClearEveryFrame(<span class="literal">true</span>);</span><br><span class="line">v-&gt;setBackgroundColour(Ogre::ColourValue::Black);</span><br><span class="line">CEGUI::Texture &amp;guiTex = mRenderer-&gt;createTexture(<span class="string">"textname"</span>, tex);</span><br></pre></td></tr></table></figure></p><h3 id="创建图像部件"><a href="#创建图像部件" class="headerlink" title="创建图像部件"></a>创建图像部件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CEGUI的图像</span></span><br><span class="line">    <span class="comment">//图像显示区域的大小</span></span><br><span class="line"><span class="keyword">const</span> CEGUI::<span class="function">Rectf <span class="title">rect</span><span class="params">(CEGUI::Vector2f(<span class="number">0.0f</span>, <span class="number">0.0f</span>), guiTex.getOriginalDataSize())</span></span>;</span><br><span class="line"><span class="comment">//创建图像部件</span></span><br><span class="line">CEGUI::BasicImage* image = (CEGUI::BasicImage*)( &amp;CEGUI::ImageManager::getSingleton().create(<span class="string">"BasicImage"</span>, <span class="string">"RTTImage"</span>));</span><br><span class="line"><span class="comment">//设置部件的材质</span></span><br><span class="line">image-&gt;setTexture(&amp;guiTex);</span><br><span class="line"><span class="comment">//设置区域</span></span><br><span class="line">image-&gt;setArea(rect);</span><br><span class="line"><span class="comment">//设置缩放</span></span><br><span class="line">image-&gt;setAutoScaled(CEGUI::ASM_Both);</span><br></pre></td></tr></table></figure><h3 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加窗口显示图像</span></span><br><span class="line">CEGUI::Window *si = CEGUI::WindowManager::getSingleton().createWindow(<span class="string">"TaharezLook/StaticImage"</span>, <span class="string">"RTTWindow"</span>);</span><br><span class="line"><span class="comment">//si-&gt;setSize(CEGUI::UVector2(CEGUI::UDim(0.5f, 0),</span></span><br><span class="line">si-&gt;setSize(CEGUI::USize(CEGUI::UDim(<span class="number">0.5f</span>, <span class="number">0</span>),</span><br><span class="line">CEGUI::UDim(<span class="number">0.4f</span>, <span class="number">0</span>)));</span><br><span class="line">si-&gt;setPosition(CEGUI::UVector2(CEGUI::UDim(<span class="number">0.5f</span>, <span class="number">0</span>),</span><br><span class="line">CEGUI::UDim(<span class="number">0.0f</span>, <span class="number">0</span>)));</span><br><span class="line"><span class="comment">//设置要显示的图像</span></span><br><span class="line">si-&gt;setProperty(<span class="string">"Image"</span>, <span class="string">"RTTImage"</span>);</span><br><span class="line"><span class="comment">//将窗口添加到表单中</span></span><br><span class="line">sheet-&gt;addChild(si);</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_CEGUI_Result.jpg" alt="Ogre+CEGUI"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>CEGUI具有强大的功能，同时也能够简单上手，给我们开发Ogre提供了很大的便利。</p><p><embed src="http://www.xiami.com/widget/0_1770128803/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>参考文章：<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+7&amp;structure=Tutorials" target="_blank" rel="noopener">Ogre基础教程7</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ogre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ogre三维框架基础篇（五）</title>
      <link href="/2015/02/16/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2015/02/16/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="CEGUI的构建"><a href="#CEGUI的构建" class="headerlink" title="CEGUI的构建"></a>CEGUI的构建</h2><p>工具的版本分别为Ogre:1.9+CEGUI:0.8.4+VS2010+Cmake:3.2.1</p><h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>1.<a href="http://sourceforge.net/projects/crayzedsgui/files/CEGUI%20Mk-2/0.8/cegui-0.8.4.zip/download?use_mirror=cznic&amp;download=" target="_blank" rel="noopener">CEGUI 0.8.4 SRC</a>,<strong>含CMakeLists的源代码，主要支持于CMAKE下的平台SDK构建</strong><br>2.<a href="http://sourceforge.net/projects/crayzedsgui/files/CEGUI%20Mk-2%20Dependencies/0.8.x/cegui-deps-0.8.x-src.zip/download?use_mirror=liquidtelecom&amp;download=" target="_blank" rel="noopener">cegui-deps-0.8.x-src</a>,<strong>CEGUI搭建所需的未生成依赖项，可以用CMAKE生成包含了SRC所需的lib,include等内容</strong><br>3.<a href="http://sourceforge.net/projects/crayzedsgui/files/CEGUI%20Mk-2/0.8/cegui-docs-0.8.4.zip/download?use_mirror=cznic&amp;download=" target="_blank" rel="noopener">cegui-docs-0.8.4</a>,<strong>Documentations文档，方便我们对API等相关内容的资料查询</strong><br>4.<a href="http://www.cmake.org/download/" target="_blank" rel="noopener">Cmake-3.2.1</a>,<strong>一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)</strong><br>5.<a href="http://www.microsoft.com/en-us/download/details.aspx?id=6812" target="_blank" rel="noopener">DirectX SDK</a>,<strong>建议用Feb10或June10版,安装即可使用，建议添加到环境变量中</strong>  </p><h3 id="编译CEGUI"><a href="#编译CEGUI" class="headerlink" title="编译CEGUI"></a>编译CEGUI</h3><p>将CEGUI 的SRC,DOCS,DPENDENCIES解压到同一个目录下，目录自选。我的目录为”F:\Ogre1.9”。</p><h4 id="编译CEGUI依赖库"><a href="#编译CEGUI依赖库" class="headerlink" title="编译CEGUI依赖库"></a>编译CEGUI依赖库</h4><p>1.安装Cmake，在其bin目录找到<code>cmake-gui.exe</code>程序并打开。<br>2.添加源SRC目录和目标目录，选择你的VS版本，我的是选择Visual Studio 2010。详细如下图：<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_CEGUI_dep.jpg" alt="编译CEGUI依赖库"><br>3.按下Configure,当显示所有为白色时，这就表明为我们所需的最终配置，接下按下Generate生成<br>4.生成完毕后，进入<code>cegui-deps-0.8.x-src</code>目录中找到<code>CEGUI-DEPS.sln</code>打开，分别在debug和release两种模式下生成解决方法。<br>5.完成后将<code>cegui-deps-0.8.x-src</code>目录下的<code>denpendencies</code>文件夹拷贝到<code>F:\Ogre1.9\cegui-0.8.4</code>根目录下，以确保CMAKE搭建CEGUI时能够正确的找到配置路径。  </p><h4 id="编译CEGUI-1"><a href="#编译CEGUI-1" class="headerlink" title="编译CEGUI"></a>编译CEGUI</h4><p>1.打开cmake-gui.exe配置如下的源目录和目标目录，进行Configure配置<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_CEGUI_src.jpg" alt="编译CEGUI"><br>2.检查Boost，OIS, OGRE, DIRECTXSDK有没有正确配置。(一些关于CEGUI的使用DIRECT3D9的最好勾上)<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_CEGUI_Boost.jpg" alt="CEGUI_Boost"><br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/CEGUI_Ogre.jpg" alt="CEGUI_OGRE"><br>3.手动设置完成后，按下Configure，直到所有显示为白色（这样就表明所有都设置为最终配置了），点击Generate生成SDK，成功后进入到<code>F:\Ogre1.9\cegui-0.8.4</code>,打开cegui.sln.<br>4.生成解决方案。</p><h4 id="资源转移，完成SDK的构建"><a href="#资源转移，完成SDK的构建" class="headerlink" title="资源转移，完成SDK的构建"></a>资源转移，完成SDK的构建</h4><p>1.将<code>F:\Ogre1.9\cegui-0.8.4\dependencies</code>下的bin,include,lib拷贝到<code>F:\Ogre1.9\cegui-0.8.4</code>下与原有内容合并<br>2.将<code>F:\Orge1.9\cegui-0.8.4\cegui\include</code>下的CEGUI文件夹拷贝到<code>F:\Orge1.9\cegui-0.8.4\include</code>中<br>3.设置系统环境变量 <strong>CEGUI_HOME：F:\Orge1.9\cegui-0.8.4</strong>  </p><h2 id="Ogre-CEGUI的项目配置"><a href="#Ogre-CEGUI的项目配置" class="headerlink" title="Ogre+CEGUI的项目配置"></a>Ogre+CEGUI的项目配置</h2><p>1.添加依赖include——<strong>$(CEGUI_HOME)\include</strong>，分别在debug和release模式下各设置一遍。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_CEGUI_Set1.jpg" alt="添加include"><br>2.添加依赖包lib——<strong>$(CEGUI_HOME)\lib</strong>，分别在debug和release模式下各设置一遍。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_CEGUI_Set2.jpg" alt="添加lib"><br>3.添加依赖项——debug模式下添加<strong>CEGUIBase-0_d.lib和CEGUIOgreRenderer-0_d.lib</strong>，release模式下添加<strong>CEGUIBase-0.lib和CEGUIOgreRenderer-0.lib</strong><br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_CEGUI_Set3.jpg" alt="添加依赖项"><br>4.在<code>F:\Orge1.9\cegui-0.8.4\bin</code>下找到下列文件，分别对应release和debug放到Ogre目录里面的<code>bin\Debug or Release</code>下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//对应release</span><br><span class="line">CEGUIBase-0.dll</span><br><span class="line">CEGUIOgreRenderer-0.dll</span><br><span class="line">expat-0.dll</span><br><span class="line">freetype-0.dll</span><br><span class="line">pcre-0.dll</span><br><span class="line">//对应debug</span><br><span class="line">CEGUIBase-0_d.dll</span><br><span class="line">CEGUIOgreRenderer-0_d.dll</span><br><span class="line">expat-0_d.dll</span><br><span class="line">freetype-0_d.dll</span><br><span class="line">pcre-0_d.dll</span><br></pre></td></tr></table></figure></p><p>5.修改Ogre的<code>bin\Debug or Release</code>下的资源文件，加入以下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Imagesets]</span><br><span class="line">FileSystem=path_to_cegui/imagesets</span><br><span class="line">[Fonts]</span><br><span class="line">FileSystem=path_to_cegui/fonts</span><br><span class="line">[Schemes]</span><br><span class="line">FileSystem=path_to_cegui/schemes</span><br><span class="line">[LookNFeel]</span><br><span class="line">FileSystem=path_to_cegui/looknfeel</span><br><span class="line">[Layouts]</span><br><span class="line">FileSystem=path_to_cegui/layouts</span><br></pre></td></tr></table></figure></p><p>比如我加入的为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># CEGUI Resource Path</span><br><span class="line">[Imagesets]</span><br><span class="line">FileSystem=F:/Orge1.9/cegui-0.8.4/datafiles/imagesets</span><br><span class="line">[Fonts]</span><br><span class="line">FileSystem=F:/Orge1.9/cegui-0.8.4/datafiles/fonts</span><br><span class="line">[Schemes]</span><br><span class="line">FileSystem=F:/Orge1.9/cegui-0.8.4/datafiles/schemes</span><br><span class="line">[LookNFeel]</span><br><span class="line">FileSystem=F:/Orge1.9/cegui-0.8.4/datafiles/looknfeel</span><br><span class="line">[Layouts]</span><br><span class="line">FileSystem=F:/Orge1.9/cegui-0.8.4/datafiles/layouts</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Ogre+CEGUI项目的结合就到此完成了，要注意的是Cmake搭建时不能有路径的错误，CEGUI搭建时要注意其版本是否符合自己的系统环境和工具。</p><p><embed src="http://www.xiami.com/widget/0_1771125780/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>参考文章：<br>1、<a href="http://m.blog.csdn.net/blog/u013025310/22477095" target="_blank" rel="noopener">关于CEGUI环境搭建的图文教程</a><br>2、<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+7&amp;structure=Tutorials" target="_blank" rel="noopener">Ogre基础教程7</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ogre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ogre三维框架基础篇（四）</title>
      <link href="/2015/02/15/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2015/02/15/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>我们的目标是不借助已有的<code>BaseApplication</code>文件，从零新建一个Ogre项目。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>腾空整个项目，只使用<code>TutorialApplication</code>文件，其中代码为<br><strong>TutorialApplication.h</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialApplication</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TutorialApplication();</span><br><span class="line">    <span class="keyword">virtual</span> ~TutorialApplication();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">go</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TutorialApplication.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreException.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">TutorialApplication::TutorialApplication()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TutorialApplication::~TutorialApplication()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::go()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// MAIN FUNCTION OMITTED</span></span><br></pre></td></tr></table></figure></p><h2 id="Ogre启动过程"><a href="#Ogre启动过程" class="headerlink" title="Ogre启动过程"></a>Ogre启动过程</h2><p><strong>启动过程如下：</strong>  </p><ol><li>创建Root对象。</li><li>定义Ogre将要使用的资源。</li><li>选择并设置渲染系统（即DirectX, OpenGL等)。</li><li>创建渲染窗口（Ogre所处的窗口）。</li><li>初始化你要使用的资源。</li><li>用这些资源来建立一个场景。</li><li>设置第三方库或插件。</li><li>创建一些帧监听器。</li><li>启动渲染循环<br><small>请注意步骤1-4必须严格按顺序进行，而5和6可以放在更后一点</small>  </li></ol><h3 id="创建Root对象"><a href="#创建Root对象" class="headerlink" title="创建Root对象"></a>创建Root对象</h3><p>Root对象是Ogre引擎的核心，在用这个引擎做其它事情之前，必须先创建它。Root的构造函数需要三个参数。第一个是插件配置文件的名称和路径。第二个是Ogre配置文件的路径(它告诉Ogre关于显卡、显示设置等信息)。最后一个是日志文件的名称和路径。因为我们不需要修改任何一个属性，所以用默认的就行。<br>首先在<code>TutorialApplication.h</code>中的私有区域中定义变量<br><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreRoot.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ogre核心对象</span></span><br><span class="line">Ogre::Root* mRoot;</span><br><span class="line"><span class="comment">//资源的配置文件</span></span><br><span class="line">Ogre::String mResourcesCfg;</span><br><span class="line"><span class="comment">//插件的配置文件</span></span><br><span class="line">Ogre::String mPluginsCfg;</span><br></pre></td></tr></table></figure><p>在<strong>TutorialApplication.cpp</strong>中添加代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">TutorialApplication::TutorialApplication()</span><br><span class="line">: mRoot(<span class="number">0</span>),</span><br><span class="line">mResourcesCfg(Ogre::StringUtil::BLANK),</span><br><span class="line">mPluginsCfg(Ogre::StringUtil::BLANK)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TutorialApplication::~TutorialApplication(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//释放Root内存</span></span><br><span class="line"><span class="keyword">delete</span> mRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::go()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调试模式下的文件路径</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">mResourcesCfg = <span class="string">"resources_d.cfg"</span>;</span><br><span class="line">mPluginsCfg = <span class="string">"plugins_d.cfg"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">mResourcesCfg = <span class="string">"resources.cfg"</span>;</span><br><span class="line">mPluginsCfg = <span class="string">"plugins.cfg"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">mRoot = <span class="keyword">new</span> Ogre::Root(mPluginsCfg);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中Root的构造函数有三个参数，分别为</p><blockquote><p>Ogre::String pluginFileName ———— “plugins.cfg”<br>Ogre::String configFileName ———— “ogre.cfg”<br>Ogre::String logFileName ———— “Ogre.log”  </p></blockquote><h3 id="定义资源"><a href="#定义资源" class="headerlink" title="定义资源"></a>定义资源</h3><p>资源包括纹理、模型、脚本等。Ogre中的资源，必须先定义，再初始化，然后才能使用。定义资源就是把每一个资源所在的文件夹添加到资源组管理器中<code>ResourceGroupManager</code>。<br><code>resources.cfg</code>配置文件让Ogre知道从哪里读取资源。<br><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreConfigFile.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>在方法<code>go()</code>中添加代码让程序读取资源文件的配置<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取资源文件的配置</span></span><br><span class="line">Ogre::ConfigFile cf;</span><br><span class="line">cf.load(mResourcesCfg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历配置文件中的所有节点使得程序记住文件路径</span></span><br><span class="line">   Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();</span><br><span class="line"></span><br><span class="line">   Ogre::String secName, typeName, archName;</span><br><span class="line">   <span class="keyword">while</span> (seci.hasMoreElements())</span><br><span class="line">   &#123;</span><br><span class="line">       secName = seci.peekNextKey();</span><br><span class="line">       Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();</span><br><span class="line">       Ogre::ConfigFile::SettingsMultiMap::iterator i;</span><br><span class="line">       <span class="keyword">for</span> (i = settings-&gt;begin(); i != settings-&gt;end(); ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           typeName = i-&gt;first;</span><br><span class="line">           archName = i-&gt;second;</span><br><span class="line">           Ogre::ResourceGroupManager::getSingleton().addResourceLocation(</span><br><span class="line">               archName, typeName, secName);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建渲染系统"><a href="#创建渲染系统" class="headerlink" title="创建渲染系统"></a>创建渲染系统</h3><p>我们需要选择一个渲染系统( 如DirectX或OpenGL)，然后配置它。在Demo中使用一个Ogre配置对话框来进行。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染窗口</span></span><br><span class="line">Ogre::RenderWindow* mWindow;</span><br><span class="line"><span class="comment">//显示默认设置窗口</span></span><br><span class="line"><span class="keyword">if</span>(!(mRoot-&gt;restoreConfig() || mRoot-&gt;showConfigDialog()))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p><h3 id="创建渲染窗口"><a href="#创建渲染窗口" class="headerlink" title="创建渲染窗口"></a>创建渲染窗口</h3><p>选择渲染系统后，还需要一个渲染Ogre的窗口。实际上有许多种方式来创建渲染窗口。下面由Ogre为你创建一个渲染窗口，第一个参数表示是否让Ogre为你创建一个渲染窗口，第二个为窗口标题。也可以使用win32 API、wxWidgets或其它Windows/Linux的GUI系统，自己创建一个渲染窗口。<br><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"OgreRenderWindow.h"</span></span></span><br></pre></td></tr></table></figure></p><p><code>TutorialApplication.cpp</code>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加渲染窗口，可以在窗口中更改程序的设置(Ogre.cfg)</span></span><br><span class="line">mWindow = mRoot-&gt;initialise(<span class="literal">true</span>, <span class="string">"TutorialApplication Render Window"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="初始化资源"><a href="#初始化资源" class="headerlink" title="初始化资源"></a>初始化资源</h3><p>初始化我们将要使用的资源，从mesh到脚本，到所有的东西，由于在某一时刻，只用部分资源。为了减少内存消耗，可以只加载正在使用的资源。为此，我们把资源分解成各种部分，只在运行时初始化它们。初始化资源之前，我们应该设置纹理mipmap的缺省值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//材质管理器的缺省值</span></span><br><span class="line">Ogre::TextureManager::getSingleton().setDefaultNumMipmaps(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//资源管理器初始化</span></span><br><span class="line">Ogre::ResourceGroupManager::getSingleton().initialiseAllResourceGroups();</span><br></pre></td></tr></table></figure></p><h3 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h3><p>包括三件事：创建场景管理器，创建摄像机，添加视口(cpp中的代码都放在go()方法下)</p><h4 id="创建场景管理器"><a href="#创建场景管理器" class="headerlink" title="创建场景管理器"></a>创建场景管理器</h4><p><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加依赖</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreSceneManager.h&gt;</span></span></span><br><span class="line"><span class="comment">//添加变量</span></span><br><span class="line">Ogre::SceneManager* mSceneMgr;</span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSceneMgr = mRoot-&gt;createSceneManager(Ogre::ST_GENERIC);</span><br></pre></td></tr></table></figure></p><h4 id="创建摄像机"><a href="#创建摄像机" class="headerlink" title="创建摄像机"></a>创建摄像机</h4><p><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加依赖</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreCamera.h&gt;</span></span></span><br><span class="line"><span class="comment">//添加变量</span></span><br><span class="line">Ogre::Camera* mCamera;</span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mCamera = mSceneMgr-&gt;createCamera(<span class="string">"MainCam"</span>);</span><br><span class="line"> </span><br><span class="line">mCamera-&gt;setPosition(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>);</span><br><span class="line">mCamera-&gt;lookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-300</span>);</span><br><span class="line">mCamera-&gt;setNearClipDistance(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></p><h4 id="添加视口"><a href="#添加视口" class="headerlink" title="添加视口"></a>添加视口</h4><p><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加依赖</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreViewport.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加视口</span></span><br><span class="line">Ogre::Viewport* vp = mWindow-&gt;addViewport(mCamera);</span><br><span class="line"></span><br><span class="line">vp-&gt;setBackgroundColour(Ogre::ColourValue(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">mCamera-&gt;setAspectRatio(</span><br><span class="line">Ogre::Real(vp-&gt;getActualWidth()) / </span><br><span class="line">Ogre::Real(vp-&gt;getActualHeight()));</span><br></pre></td></tr></table></figure></p><h4 id="设置场景"><a href="#设置场景" class="headerlink" title="设置场景"></a>设置场景</h4><p><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加依赖</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreEntity.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ogre::Entity* ogreEntity = mSceneMgr-&gt;createEntity(<span class="string">"ogrehead.mesh"</span>);</span><br><span class="line"> </span><br><span class="line">Ogre::SceneNode* ogreNode = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode();</span><br><span class="line">ogreNode-&gt;attachObject(ogreEntity);</span><br><span class="line"> </span><br><span class="line">mSceneMgr-&gt;setAmbientLight(Ogre::ColourValue(<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>));</span><br><span class="line"> </span><br><span class="line">Ogre::Light* light = mSceneMgr-&gt;createLight(<span class="string">"MainLight"</span>);</span><br><span class="line">light-&gt;setPosition(<span class="number">20</span>, <span class="number">80</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><h4 id="无线循环渲染进程"><a href="#无线循环渲染进程" class="headerlink" title="无线循环渲染进程"></a>无线循环渲染进程</h4><p><strong>TutorialApplication.h</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加依赖</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OgreWindowEventUtilities.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环渲染</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">Ogre::WindowEventUtilities::messagePump();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mWindow-&gt;isClosed()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!mRoot-&gt;renderOneFrame()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="设置第三方库"><a href="#设置第三方库" class="headerlink" title="设置第三方库"></a>设置第三方库</h3><p>虽然在OGRE里，OIS不是唯一的选择，但它是最好的之一。若要使用这个库，请参考OIS自身的文档。主要有以下三步：<br>1.利用渲染窗口句柄创建输入系统<br>2.创建鼠标、键盘等输入对象<br>3.在帧监听其中捕获输入对象并处理输入  </p><p><strong>TutorialApplication.h</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OISEvents.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OISInputManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OISKeyboard.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OISMouse.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加变量</span></span><br><span class="line">OIS::InputManager* mInputManager;</span><br><span class="line">OIS::Mouse* mMouse;</span><br><span class="line">OIS::Keyboard* mKeyboard;</span><br></pre></td></tr></table></figure><h3 id="OIS的初始化"><a href="#OIS的初始化" class="headerlink" title="OIS的初始化"></a>OIS的初始化</h3><p>在渲染循环前加入<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ogre::LogManager::getSingletonPtr()-&gt;logMessage(<span class="string">"*** Initializing OIS ***"</span>);</span><br><span class="line">OIS::ParamList pl;</span><br><span class="line"><span class="keyword">size_t</span> windowHnd = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">ostringstream</span> windowHndStr;</span><br><span class="line"> </span><br><span class="line">mWindow-&gt;getCustomAttribute(<span class="string">"WINDOW"</span>, &amp;windowHnd);</span><br><span class="line">windowHndStr &lt;&lt; windowHnd;</span><br><span class="line">pl.insert(<span class="built_in">std</span>::make_pair(<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"WINDOW"</span>), windowHndStr.str()));</span><br><span class="line"> </span><br><span class="line">mInputManager = OIS::InputManager::createInputSystem( pl );</span><br><span class="line"></span><br><span class="line">mKeyboard = <span class="keyword">static_cast</span>&lt;OIS::Keyboard*&gt;(mInputManager-&gt;createInputObject( OIS::OISKeyboard, <span class="literal">false</span> ));</span><br><span class="line">mMouse = <span class="keyword">static_cast</span>&lt;OIS::Mouse*&gt;(mInputManager-&gt;createInputObject( OIS::OISMouse, <span class="literal">false</span> ));</span><br></pre></td></tr></table></figure></p><h3 id="关闭OIS"><a href="#关闭OIS" class="headerlink" title="关闭OIS"></a>关闭OIS</h3><p>使<strong>TutorialApplication.h</strong>继承<strong>WindowEventListener</strong>接口<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialApplication</span> :</span> <span class="keyword">public</span> Ogre::WindowEventListener</span><br></pre></td></tr></table></figure></p><p>添加接口中的方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Adjust mouse clipping area</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">windowResized</span><span class="params">(Ogre::RenderWindow* rw)</span></span>;</span><br><span class="line"><span class="comment">//Unattach OIS before window shutdown (very important under Linux)</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">windowClosed</span><span class="params">(Ogre::RenderWindow* rw)</span></span>;</span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong>具体实现方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//窗口尺寸改变时调用</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::windowResized(Ogre::RenderWindow* rw)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> width, height, depth;</span><br><span class="line">    <span class="keyword">int</span> left, top;</span><br><span class="line">    rw-&gt;getMetrics(width, height, depth, left, top);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> OIS::MouseState &amp;ms = mMouse-&gt;getMouseState();</span><br><span class="line">    ms.width = width;</span><br><span class="line">    ms.height = height;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//窗口结束前卸掉OIS (very important under Linux)</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::windowClosed(Ogre::RenderWindow* rw)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Only close for window that created OIS (the main window in these demos)</span></span><br><span class="line">    <span class="keyword">if</span>(rw == mWindow)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mInputManager)</span><br><span class="line">        &#123;</span><br><span class="line">            mInputManager-&gt;destroyInputObject( mMouse );</span><br><span class="line">            mInputManager-&gt;destroyInputObject( mKeyboard );</span><br><span class="line"> </span><br><span class="line">            OIS::InputManager::destroyInputSystem(mInputManager);</span><br><span class="line">            mInputManager = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在程序中注册。在<code>go()</code>方法中加入(循环渲染前)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新鼠标位置和状态</span></span><br><span class="line">windowResized(mWindow);</span><br><span class="line"><span class="comment">//注册WindowEventListener</span></span><br><span class="line">Ogre::WindowEventUtilities::addWindowEventListener(mWindow, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p><p>析构方法中加入<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ogre::WindowEventUtilities::removeWindowEventListener(mWindow, <span class="keyword">this</span>);</span><br><span class="line">windowClosed(mWindow);</span><br></pre></td></tr></table></figure></p><h2 id="帧监听器"><a href="#帧监听器" class="headerlink" title="帧监听器"></a>帧监听器</h2><p>在我们开始渲染循环，并让程序运行之前，我们还需要添加帧监听器。<br>使<strong>TutorialApplication.h</strong>继承<strong>FrameListener</strong>接口,并添加接口内的方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialApplication</span> :</span> <span class="keyword">public</span> Ogre::WindowEventListener, <span class="keyword">public</span> Ogre::FrameListener</span><br><span class="line"></span><br><span class="line"><span class="comment">// 帧监听器</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">frameRenderingQueued</span><span class="params">(<span class="keyword">const</span> Ogre::FrameEvent&amp; evt)</span></span>;</span><br></pre></td></tr></table></figure></p><p>在<strong>TutorialApplication.cpp</strong>实现接口方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TutorialApplication::frameRenderingQueued(<span class="keyword">const</span> Ogre::FrameEvent&amp; evt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(mWindow-&gt;isClosed())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Need to capture/update each device</span></span><br><span class="line">    mKeyboard-&gt;capture();</span><br><span class="line">    mMouse-&gt;capture();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(mKeyboard-&gt;isKeyDown(OIS::KC_ESCAPE))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="注册帧监听器"><a href="#注册帧监听器" class="headerlink" title="注册帧监听器"></a>注册帧监听器</h3><p>在<code>go()</code>方法中注册帧监听器，而先前的循环渲染就可以去掉<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mRoot-&gt;addFrameListener(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p><h3 id="开始循环"><a href="#开始循环" class="headerlink" title="开始循环"></a>开始循环</h3><p><code>go()</code>方法开启帧的监听<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mRoot-&gt;startRendering();</span><br></pre></td></tr></table></figure></p><h3 id="WinMain"><a href="#WinMain" class="headerlink" title="WinMain"></a>WinMain</h3><p>最后不要忘记了<strong>TutorialApplication.cpp</strong>中的入口函数，它负责运行<code>go()</code>方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OGRE_PLATFORM == OGRE_PLATFORM_WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OGRE_PLATFORM == OGRE_PLATFORM_WIN32</span></span><br><span class="line">    <span class="function">INT WINAPI <span class="title">WinMain</span><span class="params">( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">else</span></span></span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">endif</span></span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Create application object</span></span><br><span class="line">        TutorialApplication app;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            app.go();</span><br><span class="line">        &#125; <span class="keyword">catch</span>( Ogre::Exception&amp; e ) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OGRE_PLATFORM == OGRE_PLATFORM_WIN32</span></span><br><span class="line">            MessageBox( <span class="literal">NULL</span>, e.getFullDescription().c_str(), <span class="string">"An exception has occured!"</span>, MB_OK | MB_ICONERROR | MB_TASKMODAL);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"An exception has occured: "</span> &lt;&lt;</span><br><span class="line">                e.getFullDescription().c_str() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>自己建的类可能会很乱，可以参考<strong>BaseApplication</strong>将类优化并作为基类或者直接把它拿过来使用。</p><p><embed src="http://www.xiami.com/widget/0_1769394228/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>参考文章：<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+6&amp;structure=Tutorials" target="_blank" rel="noopener">Ogre基础教程6</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ogre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ogre三维框架基础篇（三）</title>
      <link href="/2015/02/13/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2015/02/13/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>在讲输入之前，先理清几个概念。</p><h3 id="无缓冲输入unbuffered"><a href="#无缓冲输入unbuffered" class="headerlink" title="无缓冲输入unbuffered"></a>无缓冲输入unbuffered</h3><p>不断的响应按键信息，直到按键放开。例如，按下上下左右，使得角色持续移动。一般来讲适合于3D场景漫游过程，当在每帧渲染之前，系统捕获输入设备状态，并根据这些状态对场景中的物体和摄象机进行控制。</p><h3 id="缓冲输入buffered"><a href="#缓冲输入buffered" class="headerlink" title="缓冲输入buffered"></a>缓冲输入buffered</h3><p>在一个按键放开之前，只处理一次输入信息。例如呼出主菜单。适合于GUI界面的情况（如设置菜单），输入设备状态可以被发送到各GUI元素进行处理（如按钮被按下）。</p><h2 id="无缓冲输入"><a href="#无缓冲输入" class="headerlink" title="无缓冲输入"></a>无缓冲输入</h2><p>动画都是一帧一帧刷新的，故三维动画也不例外。在Ogre框架中，在帧刷新的地方加入了响应方法以便开发者调用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Root::renderOneFrame(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(!_fireFrameStarted())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!_updateAllRenderTargets())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> _fireFrameEnded();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上分为三步，帧动画开始前，帧动画开始时，帧动画结束后。这些方法会在每次帧刷新时调用。对用的方法也分别为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fireFrameStarted();</span><br><span class="line">updateAllRenderTargets();</span><br><span class="line">fireFrameEnded();</span><br></pre></td></tr></table></figure></p><p>而在<code>updateAllRenderTargets()</code>方法中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Root::_updateAllRenderTargets(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  mActiveRenderer-&gt;_updateAllRenderTargets(<span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">bool</span> ret = _fireFrameRenderingQueued();</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// thread is blocked for final swap</span></span><br><span class="line">  mActiveRenderer-&gt;_swapAllRenderTargetBuffers(</span><br><span class="line">    mActiveRenderer-&gt;getWaitForVerticalBlank());</span><br><span class="line"> </span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>那么调用关系就清楚了，简单归纳为下列五步：<br>1.触发所有FrameListener的frameStarted<br>2.更新所有渲染目标（不翻转）<br>3.触发所有FrameListener的frameRenderingQueued<br>4.翻转所有渲染目标<br>5.触发所有FrameListener的frameEnded。  </p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>TutorialApplication.h</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BaseApplication.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialApplication</span> :</span> <span class="keyword">public</span> BaseApplication</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  TutorialApplication();</span><br><span class="line">  <span class="keyword">virtual</span> ~TutorialApplication();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createScene</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">frameRenderingQueued</span><span class="params">(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">processUnbufferedInput</span><span class="params">(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TutorialApplication.h"</span></span></span><br><span class="line"> </span><br><span class="line">TutorialApplication::TutorialApplication()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TutorialApplication::~TutorialApplication()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createScene()</span><br><span class="line">&#123;</span><br><span class="line">  mSceneMgr-&gt;setAmbientLight(Ogre::ColourValue(<span class="number">.25</span>, <span class="number">.25</span>, <span class="number">.25</span>));</span><br><span class="line"> </span><br><span class="line">  Ogre::Light* pointLight = mSceneMgr-&gt;createLight(<span class="string">"PointLight"</span>);</span><br><span class="line">  pointLight-&gt;setType(Ogre::Light::LT_POINT);</span><br><span class="line">  pointLight-&gt;setPosition(<span class="number">250</span>, <span class="number">150</span>, <span class="number">250</span>);</span><br><span class="line">  pointLight-&gt;setDiffuseColour(Ogre::ColourValue::White);</span><br><span class="line">  pointLight-&gt;setSpecularColour(Ogre::ColourValue::White);</span><br><span class="line"> </span><br><span class="line">  Ogre::Entity* ninjaEntity = mSceneMgr-&gt;createEntity(<span class="string">"ninja.mesh"</span>);</span><br><span class="line">  Ogre::SceneNode* ninjaNode = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(<span class="string">"NinjaNode"</span>);</span><br><span class="line">  ninjaNode-&gt;attachObject(ninjaEntity);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::frameRenderingQueued(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">bool</span> ret = BaseApplication::frameRenderingQueued(fe);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::processUnbufferedInput(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在类中定义变量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> mouseDownLastFrame = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">static</span> Ogre::Real toggleTimer = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">static</span> Ogre::Real rotate = <span class="number">.13</span>;</span><br><span class="line"><span class="keyword">static</span> Ogre::Real move = <span class="number">250</span>;</span><br></pre></td></tr></table></figure></p><h3 id="监听鼠标左键"><a href="#监听鼠标左键" class="headerlink" title="监听鼠标左键"></a>监听鼠标左键</h3><p>鼠标左键打开和关闭灯源，写入<code>processUnbufferedInput</code>中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TutorialApplication::processUnbufferedInput(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监控鼠标左键，按下则为true</span></span><br><span class="line"><span class="keyword">bool</span> leftMouseDown = mMouse-&gt;getMouseState().buttonDown(OIS::MB_Left);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保证鼠标为非长按状态</span></span><br><span class="line"><span class="keyword">if</span> (leftMouseDown &amp;&amp; !mouseDownLastFrame)</span><br><span class="line">&#123;</span><br><span class="line">Ogre::Light* light = mSceneMgr-&gt;getLight(<span class="string">"PointLight"</span>);</span><br><span class="line">light-&gt;setVisible(!light-&gt;isVisible());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mouseDownLastFrame = leftMouseDown;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="监听鼠标右键"><a href="#监听鼠标右键" class="headerlink" title="监听鼠标右键"></a>监听鼠标右键</h3><p>鼠标右键有个计时的功能，即只能在一定时差下才能改变灯源的状态<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TutorialApplication::frameRenderingQueued(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = BaseApplication::frameRenderingQueued(fe);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!processUnbufferedInput(fe)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">toggleTimer -= fe.timeSinceLastFrame;</span><br><span class="line"><span class="comment">//计时器。在0.5秒内右键不能控制灯光的开关</span></span><br><span class="line"><span class="keyword">if</span> ((toggleTimer &lt; <span class="number">0</span>) &amp;&amp; mMouse-&gt;getMouseState().buttonDown(OIS::MB_Right))</span><br><span class="line">&#123;</span><br><span class="line">toggleTimer  = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">Ogre::Light* light = mSceneMgr-&gt;getLight(<span class="string">"PointLight"</span>);</span><br><span class="line">light-&gt;setVisible(!light-&gt;isVisible());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h3><p>继续在<code>frameRenderingQueued</code>方法下添加方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Ogre::Vector3 dirVec = Ogre::Vector3::ZERO;</span><br><span class="line"><span class="comment">//键盘I的监听</span></span><br><span class="line"><span class="keyword">if</span> (mKeyboard-&gt;isKeyDown(OIS::KC_I))</span><br><span class="line">dirVec.z -= move;</span><br><span class="line"><span class="comment">//键盘U的监听</span></span><br><span class="line"><span class="keyword">if</span> (mKeyboard-&gt;isKeyDown(OIS::KC_U))</span><br><span class="line">dirVec.y += move;</span><br><span class="line"><span class="comment">//键盘O的监听</span></span><br><span class="line"><span class="keyword">if</span> (mKeyboard-&gt;isKeyDown(OIS::KC_O))</span><br><span class="line">dirVec.y -= move;</span><br><span class="line"><span class="comment">//键盘J的监听</span></span><br><span class="line"><span class="keyword">if</span> (mKeyboard-&gt;isKeyDown(OIS::KC_J))</span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//如果同时按下了左shift键，则顺时针旋转模型</span></span><br><span class="line"><span class="keyword">if</span>(mKeyboard-&gt;isKeyDown(OIS::KC_LSHIFT))</span><br><span class="line">mSceneMgr-&gt;getSceneNode(<span class="string">"NinjaNode"</span>)-&gt;yaw(Ogre::Degree(<span class="number">5</span> * rotate));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dirVec.x -= move;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//键盘L的监听</span></span><br><span class="line"><span class="keyword">if</span> (mKeyboard-&gt;isKeyDown(OIS::KC_L))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果同时按下了左shift键，则逆时针旋转模型</span></span><br><span class="line"><span class="keyword">if</span>(mKeyboard-&gt;isKeyDown(OIS::KC_LSHIFT))</span><br><span class="line">mSceneMgr-&gt;getSceneNode(<span class="string">"NinjaNode"</span>)-&gt;yaw(Ogre::Degree(<span class="number">-5</span> * rotate));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dirVec.x += move;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移动模型</span></span><br><span class="line">mSceneMgr-&gt;getSceneNode(<span class="string">"NinjaNode"</span>)-&gt;translate(</span><br><span class="line">dirVec * fe.timeSinceLastFrame,</span><br><span class="line">Ogre::Node::TS_LOCAL);</span><br></pre></td></tr></table></figure></p><h2 id="缓冲输入"><a href="#缓冲输入" class="headerlink" title="缓冲输入"></a>缓冲输入</h2><p>准备<code>tudohouse.mesh</code>和fw12b.jpg的材质图片。在material Examples的脚本中写入<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">material Examples/TudorHouse</span><br><span class="line">&#123;</span><br><span class="line">technique</span><br><span class="line">&#123;</span><br><span class="line">pass</span><br><span class="line">&#123;</span><br><span class="line">texture_unit</span><br><span class="line">&#123;</span><br><span class="line">texture fw12b.jpg</span><br><span class="line">tex_address_mode clamp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（Ogre1.9中已经包括这些东西）<br><strong>TutorialApplication.h</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TUTORIALAPPLICATION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TUTORIALAPPLICATION_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BaseApplication.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialApplication</span> :</span> <span class="keyword">public</span> BaseApplication</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  TutorialApplication();</span><br><span class="line">  <span class="keyword">virtual</span> ~TutorialApplication();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createScene</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">frameRenderingQueued</span><span class="params">(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span></span>;</span><br><span class="line"> </span><br><span class="line">  Ogre::Real mRotate;</span><br><span class="line">  Ogre::Real mMove;</span><br><span class="line">  Ogre::SceneNode* mCamNode;</span><br><span class="line">  Ogre::Vector3 mDirection;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">TutorialApplication::TutorialApplication()</span><br><span class="line">  : mRotate(<span class="number">.13</span>),</span><br><span class="line">    mMove(<span class="number">250</span>),</span><br><span class="line">    mCamNode(<span class="number">0</span>),</span><br><span class="line">    mDirection(Ogre::Vector3::ZERO)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TutorialApplication::~TutorialApplication()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createScene()</span><br><span class="line">&#123;</span><br><span class="line">  mSceneMgr-&gt;setAmbientLight(Ogre::ColourValue(<span class="number">.2</span>, <span class="number">.2</span>, <span class="number">.2</span>));</span><br><span class="line"> </span><br><span class="line">  Ogre::Entity* tudorEntity = mSceneMgr-&gt;createEntity(<span class="string">"tudorhouse.mesh"</span>);</span><br><span class="line">  Ogre::SceneNode* node = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(</span><br><span class="line">    <span class="string">"Node"</span>);</span><br><span class="line">  node-&gt;attachObject(tudorEntity);</span><br><span class="line"> </span><br><span class="line">  Ogre::Light* light = mSceneMgr-&gt;createLight(<span class="string">"Light1"</span>);</span><br><span class="line">  light-&gt;setType(Ogre::Light::LT_POINT);</span><br><span class="line">  light-&gt;setPosition(Ogre::Vector3(<span class="number">250</span>, <span class="number">150</span>, <span class="number">250</span>));</span><br><span class="line">  light-&gt;setDiffuseColour(Ogre::ColourValue::White);</span><br><span class="line">  light-&gt;setSpecularColour(Ogre::ColourValue::White);</span><br><span class="line"> </span><br><span class="line">  mCamera-&gt;setPosition(<span class="number">0</span>, <span class="number">-370</span>, <span class="number">1000</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::frameRenderingQueued(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">bool</span> ret = BaseApplication::frameRenderingQueued(fe);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="按键响应和接口"><a href="#按键响应和接口" class="headerlink" title="按键响应和接口"></a>按键响应和接口</h3><p>键盘有两个方法，按下和松开<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.h</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">keyPressed</span><span class="params">(<span class="keyword">const</span> OIS::KeyEvent&amp; ke)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">keyReleased</span><span class="params">(<span class="keyword">const</span> OIS::KeyEvent&amp; ke)</span></span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.cpp</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::keyPressed(<span class="keyword">const</span> OIS::KeyEvent&amp; ke) </span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::keyReleased(<span class="keyword">const</span> OIS::KeyEvent&amp; ke) </span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标有三个方法，鼠标移动，鼠标按下，鼠标松开<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.h</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">mouseMoved</span><span class="params">(<span class="keyword">const</span> OIS::MouseEvent&amp; me)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">mousePressed</span><span class="params">(<span class="keyword">const</span> OIS::MouseEvent&amp; me, OIS::MouseButtonID id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">mouseReleased</span><span class="params">(<span class="keyword">const</span> OIS::MouseEvent&amp; me, OIS::MouseButtonID id)</span></span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.cpp</span></span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mouseMoved(<span class="keyword">const</span> OIS::MouseEvent&amp; me) </span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mousePressed(</span><br><span class="line">  <span class="keyword">const</span> OIS::MouseEvent&amp; me, OIS::MouseButtonID id) </span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::mouseReleased(</span><br><span class="line">  <span class="keyword">const</span> OIS::MouseEvent&amp; me, OIS::MouseButtonID id) </span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">### 设置两个摄像头结点</span><br><span class="line">在`createScene`方法中的创建灯源后面加上代码</span><br><span class="line">```c++</span><br><span class="line"><span class="comment">//创造结点用于设置摄像头</span></span><br><span class="line">node = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(<span class="string">"CamNode1"</span>, Ogre::Vector3(<span class="number">1200</span>, <span class="number">-370</span>, <span class="number">0</span>));</span><br><span class="line">node-&gt;yaw(Ogre::Degree(<span class="number">90</span>));</span><br><span class="line"><span class="comment">//将结点与摄像头绑定</span></span><br><span class="line">mCamNode = node;</span><br><span class="line">node-&gt;attachObject(mCamera);</span><br><span class="line"><span class="comment">//第二个摄像头结点</span></span><br><span class="line">node = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(<span class="string">"CamNode2"</span>, Ogre::Vector3(<span class="number">-500</span>, <span class="number">-370</span>, <span class="number">1000</span>));</span><br><span class="line">node-&gt;yaw(Ogre::Degree(<span class="number">-30</span>));</span><br></pre></td></tr></table></figure><h3 id="键盘监听并处理"><a href="#键盘监听并处理" class="headerlink" title="键盘监听并处理"></a>键盘监听并处理</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TutorialApplication::keyPressed(<span class="keyword">const</span> OIS::KeyEvent&amp; ke) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">switch</span> (ke.key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> OIS::KC_ESCAPE: </span><br><span class="line">mShutDown = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//设置摄像头1</span></span><br><span class="line"><span class="keyword">case</span> OIS::KC_1:</span><br><span class="line"><span class="comment">//解除当前摄像头的绑定</span></span><br><span class="line">mCamera-&gt;getParentSceneNode()-&gt;detachObject(mCamera);</span><br><span class="line">mCamNode = mSceneMgr-&gt;getSceneNode(<span class="string">"CamNode1"</span>);</span><br><span class="line">mCamNode-&gt;attachObject(mCamera);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//设置摄像头2</span></span><br><span class="line"><span class="keyword">case</span> OIS::KC_2:</span><br><span class="line">mCamera-&gt;getParentSceneNode()-&gt;detachObject(mCamera);</span><br><span class="line">mCamNode = mSceneMgr-&gt;getSceneNode(<span class="string">"CamNode2"</span>);</span><br><span class="line">mCamNode-&gt;attachObject(mCamera);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//移动位置</span></span><br><span class="line"><span class="keyword">case</span> OIS::KC_UP:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_W:</span><br><span class="line">mDirection.z = -mMove;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_DOWN:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_S:</span><br><span class="line">mDirection.z = mMove;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_LEFT:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_A:</span><br><span class="line">mDirection.x = -mMove;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_RIGHT:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_D:</span><br><span class="line">mDirection.x = mMove;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_PGDOWN:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_E:</span><br><span class="line">mDirection.y = -mMove;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_PGUP:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_Q:</span><br><span class="line">mDirection.y = mMove;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TutorialApplication::keyReleased(<span class="keyword">const</span> OIS::KeyEvent&amp; ke) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">switch</span> (ke.key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> OIS::KC_UP:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_W:</span><br><span class="line">mDirection.z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_DOWN:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_S:</span><br><span class="line">mDirection.z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_LEFT:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_A:</span><br><span class="line">mDirection.x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_RIGHT:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_D:</span><br><span class="line">mDirection.x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_PGDOWN:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_E:</span><br><span class="line">mDirection.y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> OIS::KC_PGUP:</span><br><span class="line"><span class="keyword">case</span> OIS::KC_Q:</span><br><span class="line">mDirection.y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在帧刷新处更新摄像头的位置。<code>frameRenderingQueued</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mCamNode-&gt;translate(mDirection * fe.timeSinceLastFrame, Ogre::Node::TS_LOCAL);</span><br></pre></td></tr></table></figure></p><h3 id="鼠标监听并处理"><a href="#鼠标监听并处理" class="headerlink" title="鼠标监听并处理"></a>鼠标监听并处理</h3><p>左键控制灯源的开关<code>mousePressed()</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TutorialApplication::mousePressed(</span><br><span class="line"><span class="keyword">const</span> OIS::MouseEvent&amp; me, OIS::MouseButtonID id) </span><br><span class="line">&#123; </span><br><span class="line">Ogre::Light* light = mSceneMgr-&gt;getLight(<span class="string">"Light1"</span>);</span><br><span class="line"><span class="keyword">switch</span> (id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左键控制灯光开关</span></span><br><span class="line"><span class="keyword">case</span> OIS::MB_Left:</span><br><span class="line">light-&gt;setVisible(!light-&gt;isVisible());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>右键移动旋转<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TutorialApplication::mouseMoved(<span class="keyword">const</span> OIS::MouseEvent&amp; me) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (me.state.buttonDown(OIS::MB_Right))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//绕y轴旋转</span></span><br><span class="line">mCamNode-&gt;yaw(Ogre::Degree(-mRotate * me.state.X.rel), Ogre::Node::TS_WORLD);</span><br><span class="line"><span class="comment">//绕x轴旋转</span></span><br><span class="line">mCamNode-&gt;pitch(Ogre::Degree(-mRotate * me.state.Y.rel), Ogre::Node::TS_LOCAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_Input_House.jpg" alt="房屋"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><embed src="http://www.xiami.com/widget/0_3539294/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>这是Ogre框架交互的整合，包括键盘，鼠标以及本文未提及的joystick控制器。主要为两部分：一部分为帧刷新，另一部分则为输入监听。Ogre主要通过这两种方法与用户进行交互。<br>参考文章：<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+5&amp;structure=Tutorials" target="_blank" rel="noopener">Ogre基础教程5</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ogre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ogre三维框架基础篇（二）</title>
      <link href="/2015/02/09/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2015/02/09/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Ogre地形"><a href="#Ogre地形" class="headerlink" title="Ogre地形"></a>Ogre地形</h2><p>在老版本中，我们使用<code>Terrain Scene Manager</code>来渲染场景中的地形。Ogre1.7版本后则将其转移到组件系统中。<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Ogre+Terrain+System" target="_blank" rel="noopener">Ogre Terrain System</a>有三个组件：Terrain,Paging和Property。其中Paging组件主要用来实现<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=-LOD,&quot;近处细节表现精细，远处的细节粗略&quot;" target="_blank" rel="noopener">LOD</a>技术。<br><strong>Terrain</strong>中主要的两个类：<strong>Terrain</strong>和<strong>TerrainGroup</strong>。每个Terrain代表一小块地域，然后通过TerrainGroup将每一片区域连接起来，并管理哥哥区域间的关系。它们用于LOD（Level of Detail）渲染。  </p><h3 id="设置摄像机和光源"><a href="#设置摄像机和光源" class="headerlink" title="设置摄像机和光源"></a>设置摄像机和光源</h3><p>在<code>createScene()</code>方法中设置摄像机<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   mCamera-&gt;setPosition(Ogre::Vector3(<span class="number">1683</span>, <span class="number">50</span>, <span class="number">2116</span>));</span><br><span class="line">mCamera-&gt;lookAt(Ogre::Vector3(<span class="number">1963</span>, <span class="number">50</span>, <span class="number">1660</span>));</span><br><span class="line">mCamera-&gt;setNearClipDistance(<span class="number">0.1</span>);</span><br><span class="line"><span class="comment">//检查当前的渲染系统是否能够无限的渲染远处的场景</span></span><br><span class="line"><span class="keyword">bool</span> infiniteClip =</span><br><span class="line">mRoot-&gt;getRenderSystem()-&gt;getCapabilities()-&gt;hasCapability(</span><br><span class="line">Ogre::RSC_INFINITE_FAR_PLANE);</span><br><span class="line"><span class="comment">//若能，则设置远距离裁剪为0（无限制）</span></span><br><span class="line"><span class="keyword">if</span> (infiniteClip)</span><br><span class="line">mCamera-&gt;setFarClipDistance(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//不能则设置最远距离为50000尺寸</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mCamera-&gt;setFarClipDistance(<span class="number">50000</span>);</span><br></pre></td></tr></table></figure></p><p>继续设置光源<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//环境光</span></span><br><span class="line">mSceneMgr-&gt;setAmbientLight(Ogre::ColourValue(<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>));</span><br><span class="line"><span class="comment">//光源方向</span></span><br><span class="line">Ogre::<span class="function">Vector3 <span class="title">lightdir</span><span class="params">(<span class="number">0.55</span>, <span class="number">-0.3</span>, <span class="number">0.75</span>)</span></span>;</span><br><span class="line"><span class="comment">//单位向量化</span></span><br><span class="line">lightdir.normalise();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置光源为平行光，漫反射为白色光</span></span><br><span class="line">Ogre::Light* light = mSceneMgr-&gt;createLight(<span class="string">"TestLight"</span>);</span><br><span class="line">light-&gt;setType(Ogre::Light::LT_DIRECTIONAL);</span><br><span class="line">light-&gt;setDirection(lightdir);</span><br><span class="line">light-&gt;setDiffuseColour(Ogre::ColourValue::White);</span><br><span class="line">light-&gt;setSpecularColour(Ogre::ColourValue(<span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0.4</span>));</span><br></pre></td></tr></table></figure></p><h3 id="设置地形"><a href="#设置地形" class="headerlink" title="设置地形"></a>设置地形</h3><h4 id="引入相关的附加文件"><a href="#引入相关的附加文件" class="headerlink" title="引入相关的附加文件"></a>引入相关的附加文件</h4><p>在设置地形前先引入相关的附加文件。“项目——属性——配置属性——链接器——输入”，在“附加依赖项”处添加属性页中附加OgreTerrain_d.lib。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_terrain_set.png" alt="添加依赖项"></p><h4 id="添加函数和成员变量"><a href="#添加函数和成员变量" class="headerlink" title="添加函数和成员变量"></a>添加函数和成员变量</h4><p><strong>TutorialApplication</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __TutorialApplication_h_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TutorialApplication_h_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Terrain/OgreTerrain.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Terrain/OgreTerrainGroup.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BaseApplication.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialApplication</span> :</span> <span class="keyword">public</span> BaseApplication</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">TutorialApplication(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">virtual</span> ~TutorialApplication(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createScene</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createFrameListener</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">destroyScene</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">frameRenderingQueued</span><span class="params">(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">defineTerrain</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initBlendMaps</span><span class="params">(Ogre::Terrain* terrain)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configureTerrainDefaults</span><span class="params">(Ogre::Light* light)</span></span>;</span><br><span class="line"></span><br><span class="line">OgreBites::Label* mInfoLabel;</span><br><span class="line"><span class="keyword">bool</span> mTerrainsImported;</span><br><span class="line">Ogre::TerrainGroup* mTerrainGroup;</span><br><span class="line">Ogre::TerrainGlobalOptions* mTerrainGlobals;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p><strong>TutorialApplication.cpp</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TutorialApplication.h"</span></span></span><br><span class="line"> </span><br><span class="line">TutorialApplication::TutorialApplication()</span><br><span class="line">  : mTerrainGroup(<span class="number">0</span>),</span><br><span class="line">    mTerrainGlobals(<span class="number">0</span>),</span><br><span class="line">    mInfoLabel(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TutorialApplication::~TutorialApplication()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createScene()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createFrameListener()</span><br><span class="line">&#123;</span><br><span class="line">  BaseApplication::createFrameListener();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::destroyScene()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> TutorialApplication::frameRenderingQueued(<span class="keyword">const</span> Ogre::FrameEvent&amp; fe)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">bool</span> ret = BaseApplication::frameRenderingQueued(fe);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTerrainImage</span><span class="params">(<span class="keyword">bool</span> flipX, <span class="keyword">bool</span> flipY, Ogre::Image&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::defineTerrain(<span class="keyword">long</span> x, <span class="keyword">long</span> y)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::initBlendMaps(Ogre::Terrain* terrain)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> TutorialApplication::configureTerrainDefaults(Ogre::Light* light)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="地形的配置"><a href="#地形的配置" class="headerlink" title="地形的配置"></a>地形的配置</h4><p>在<code>createScene</code>方法中，继续加入。<br>1、获取地形配置属性类<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置地形属性</span></span><br><span class="line"><span class="comment">// OGRE_NEW 是一个专属于Ogre的宏定义</span></span><br><span class="line"><span class="comment">//TerrainGlobalOptions属于OgreTerrain中的一个类，用于配置地形的属性。</span></span><br><span class="line">mTerrainGlobals = OGRE_NEW Ogre::TerrainGlobalOptions();</span><br></pre></td></tr></table></figure></p><p>2、设置地形组<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置地形组</span></span><br><span class="line"><span class="comment">//参数分别为场景管理器，terrain的朝向（铺面x,z轴），terrain的大小，整个Group的大小</span></span><br><span class="line">mTerrainGroup = OGRE_NEW Ogre::TerrainGroup(</span><br><span class="line">mSceneMgr, </span><br><span class="line">Ogre::Terrain::ALIGN_X_Z, </span><br><span class="line"><span class="number">513</span>, <span class="number">12000.0</span>);</span><br><span class="line"><span class="comment">//设置保存名字为“terrain.dat”</span></span><br><span class="line">mTerrainGroup-&gt;setFilenameConvention(Ogre::String(<span class="string">"terrain"</span>), Ogre::String(<span class="string">"dat"</span>));</span><br><span class="line"><span class="comment">//设置中心点为原点</span></span><br><span class="line">mTerrainGroup-&gt;setOrigin(Ogre::Vector3::ZERO);</span><br></pre></td></tr></table></figure></p><p>3、配置地形的一些参数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Terrain配置方法</span></span><br><span class="line">configureTerrainDefaults(light);</span><br></pre></td></tr></table></figure></p><p>4、让TerrainGroup读取所有的Terrain图<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让TerrainGroup读取所有的Terrain图</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> x = <span class="number">0</span>; x &lt;= <span class="number">0</span>; ++x)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> y = <span class="number">0</span>; y &lt;= <span class="number">0</span>; ++y)</span><br><span class="line">defineTerrain(x, y);</span><br><span class="line"></span><br><span class="line">mTerrainGroup-&gt;loadAllTerrains(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>4、导入配置完成的地形<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入我们的地形</span></span><br><span class="line"><span class="keyword">if</span> (mTerrainsImported)</span><br><span class="line">&#123;</span><br><span class="line">Ogre::TerrainGroup::TerrainIterator ti = mTerrainGroup-&gt;getTerrainIterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ti.hasMoreElements())</span><br><span class="line">&#123;</span><br><span class="line">Ogre::Terrain* t = ti.getNext()-&gt;instance;</span><br><span class="line">initBlendMaps(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5、清除操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存地形数据到磁盘中</span></span><br><span class="line">mTerrainGroup-&gt;saveAllTerrains(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//地形建成后，清除一些内存</span></span><br><span class="line">mTerrainGroup-&gt;freeTemporaryResources();</span><br></pre></td></tr></table></figure></p><h4 id="configureTerrainDefaults函数实现"><a href="#configureTerrainDefaults函数实现" class="headerlink" title="configureTerrainDefaults函数实现"></a><strong>configureTerrainDefaults</strong>函数实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> TutorialApplication::configureTerrainDefaults(Ogre::Light* light)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//MaxPixelError决定了地形的精度，这个值越小地形越精确，当然效率就越低</span></span><br><span class="line">mTerrainGlobals-&gt;setMaxPixelError(<span class="number">8</span>);</span><br><span class="line"><span class="comment">//设置在多远处开始使用组合贴图。在摄像机周围3000范围内看到地形，而之外则是我们定义的光影颜色</span></span><br><span class="line">mTerrainGlobals-&gt;setCompositeMapDistance(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在地形的渲染中，Ogre提供了一种组合贴图的渲染，就是在较远的地方使用一种贴图混合简单光影的方式来代替实际的纹理.</span></span><br><span class="line"><span class="comment">//设置产生组合贴图的光线方向</span></span><br><span class="line">mTerrainGlobals-&gt;setLightMapDirection(light-&gt;getDerivedDirection());</span><br><span class="line"><span class="comment">//设置组合贴图的光影颜色</span></span><br><span class="line">mTerrainGlobals-&gt;setCompositeMapAmbient(mSceneMgr-&gt;getAmbientLight());</span><br><span class="line">mTerrainGlobals-&gt;setCompositeMapDiffuse(light-&gt;getDiffuseColour());</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置地形的一些属性</span></span><br><span class="line"><span class="comment">//terrainSize指的是地形大小(必须是2^n+1)，maxBatchSize指的是最大的批次大小(必须是2^n+1，并且小于等于65)，worldSize指的是地形的世界大小等等</span></span><br><span class="line"><span class="comment">//inputScale是对导入数据（高度图）的高度值的缩放,值越大表示越陡峭</span></span><br><span class="line">Ogre::Terrain::ImportData&amp; importData = mTerrainGroup-&gt;getDefaultImportSettings();</span><br><span class="line">importData.terrainSize = <span class="number">513</span>;</span><br><span class="line">importData.worldSize = <span class="number">12000.0</span>;</span><br><span class="line">importData.inputScale = <span class="number">600</span>;</span><br><span class="line">importData.minBatchSize = <span class="number">33</span>;</span><br><span class="line">importData.maxBatchSize = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//它允许地形上有几个纹理层次（数目取决于你的硬件），标记为0层，1层……n层，默认情况下你只能见到第0层，我们可以设置n+1层对之前n层纹理的混合结果的混合方式，如果不混合就只能看到第0层。</span></span><br><span class="line"><span class="comment">//首先你要定义这些层的纹理是什么及纹理的大小。</span></span><br><span class="line"><span class="comment">//设置有几层纹理</span></span><br><span class="line">importData.layerList.resize(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//设置该层纹理的空间大小</span></span><br><span class="line">importData.layerList[<span class="number">0</span>].worldSize = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//设置该层纹理的贴图和法向贴图</span></span><br><span class="line">importData.layerList[<span class="number">0</span>].textureNames.push_back(</span><br><span class="line"><span class="string">"dirt_grayrocky_diffusespecular.dds"</span>);</span><br><span class="line">importData.layerList[<span class="number">0</span>].textureNames.push_back(</span><br><span class="line"><span class="string">"dirt_grayrocky_normalheight.dds"</span>);</span><br><span class="line"></span><br><span class="line">importData.layerList[<span class="number">1</span>].worldSize = <span class="number">30</span>;</span><br><span class="line">importData.layerList[<span class="number">1</span>].textureNames.push_back(</span><br><span class="line"><span class="string">"grass_green-01_diffusespecular.dds"</span>);</span><br><span class="line">importData.layerList[<span class="number">1</span>].textureNames.push_back(</span><br><span class="line"><span class="string">"grass_green-01_normalheight.dds"</span>);</span><br><span class="line">importData.layerList[<span class="number">2</span>].worldSize = <span class="number">200</span>;</span><br><span class="line">importData.layerList[<span class="number">2</span>].textureNames.push_back(</span><br><span class="line"><span class="string">"growth_weirdfungus-03_diffusespecular.dds"</span>);</span><br><span class="line">importData.layerList[<span class="number">2</span>].textureNames.push_back(</span><br><span class="line"><span class="string">"growth_weirdfungus-03_normalheight.dds"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="defineTerrain函数实现"><a href="#defineTerrain函数实现" class="headerlink" title="defineTerrain函数实现"></a>defineTerrain函数实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用来导入高度图</span></span><br><span class="line"><span class="comment">通过TerrainGroup的generateFilename函数生成纹理的名字，然后在我们的资源组中进行检查，看是否已经存在这个地形数据了，</span></span><br><span class="line"><span class="comment">如果已经存在了，就不需要再次从一个图片中导入了，如果不存在我们就需要加载图片使用它去生成我们的地形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::defineTerrain(<span class="keyword">long</span> x, <span class="keyword">long</span> y)</span><br><span class="line">&#123;</span><br><span class="line">Ogre::String filename = mTerrainGroup-&gt;generateFilename(x, y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> exists =</span><br><span class="line">Ogre::ResourceGroupManager::getSingleton().resourceExists(</span><br><span class="line">mTerrainGroup-&gt;getResourceGroup(),</span><br><span class="line">filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (exists)</span><br><span class="line">mTerrainGroup-&gt;defineTerrain(x, y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Ogre::Image img;</span><br><span class="line">getTerrainImage(x % <span class="number">2</span> != <span class="number">0</span>, y % <span class="number">2</span> != <span class="number">0</span>, img);</span><br><span class="line">mTerrainGroup-&gt;defineTerrain(x, y, &amp;img);</span><br><span class="line"></span><br><span class="line">mTerrainsImported = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getTerrainImage函数实现"><a href="#getTerrainImage函数实现" class="headerlink" title="getTerrainImage函数实现"></a>getTerrainImage函数实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个函数就是加载我们前面中提到过的需要加载的图片，这个图片会用来生成对应的地形数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTerrainImage</span><span class="params">(<span class="keyword">bool</span> flipX, <span class="keyword">bool</span> flipY, Ogre::Image&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">img.load(<span class="string">"terrain.png"</span>, Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flipX)</span><br><span class="line">img.flipAroundY();</span><br><span class="line"><span class="keyword">if</span> (flipY)</span><br><span class="line">img.flipAroundX();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="initBlendMaps函数的实现"><a href="#initBlendMaps函数的实现" class="headerlink" title="initBlendMaps函数的实现"></a>initBlendMaps函数的实现</h4><p>在产生了地形实例后，我们需要对地形的纹理层进行我们想要的混合方式，我们可以通过地形组的迭代器访问每一个地形实例，然后把对应的地形实例指针传递给这个函数。混合的原理机制是这样的：对于每一个纹理层，都有一个保存每个像素的alpha混合的值，可以通过Ogre::TerrainLayerBlendMap* blendMap0 =terrain-&gt;getLayerBlendMap(1);这样的方式来获取第1层的这个混合数据，初始情况下都是0，也就是说，默认情况下第1层对第0层的混合是0，那样你就只能看到0层，你可以通过修改这个数据来直接修改混合方式，这就像两张图像做混合，而每张混合图像代表了整个这个地形实例的表面图片，为了得到这个图像的边长，可以使用terrain-&gt;getLayerBlendMapSize();你还可以使用blendMap0-&gt;convertImageToTerrainSpace(x,y, &amp;tx, &amp;ty);来得到混合图像空间上(x,y)的那个像素对应的地形实例空间上的坐标，我们修改了混合值之后，还需要使用blendMap0-&gt;dirty();blendMap0-&gt;update();来更新。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对地形的纹理层进行混合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::initBlendMaps(Ogre::Terrain* terrain)</span><br><span class="line">&#123;</span><br><span class="line">Ogre::Real minHeight0 = <span class="number">70</span>;</span><br><span class="line">Ogre::Real fadeDist0 = <span class="number">40</span>;</span><br><span class="line">Ogre::Real minHeight1 = <span class="number">70</span>;</span><br><span class="line">Ogre::Real fadeDist1 = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">Ogre::TerrainLayerBlendMap* blendMap0 = terrain-&gt;getLayerBlendMap(<span class="number">1</span>);</span><br><span class="line">Ogre::TerrainLayerBlendMap* blendMap1 = terrain-&gt;getLayerBlendMap(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span>* pBlend0 = blendMap0-&gt;getBlendPointer();</span><br><span class="line"><span class="keyword">float</span>* pBlend1 = blendMap1-&gt;getBlendPointer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Ogre::uint16 y = <span class="number">0</span>; y &lt; terrain-&gt;getLayerBlendMapSize(); ++y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Ogre::uint16 x = <span class="number">0</span>; x &lt; terrain-&gt;getLayerBlendMapSize(); ++x)</span><br><span class="line">&#123;</span><br><span class="line">Ogre::Real tx, ty;</span><br><span class="line"></span><br><span class="line">blendMap0-&gt;convertImageToTerrainSpace(x, y, &amp;tx, &amp;ty);</span><br><span class="line">Ogre::Real height = terrain-&gt;getHeightAtTerrainPosition(tx, ty);</span><br><span class="line">Ogre::Real val = (height - minHeight0) / fadeDist0;</span><br><span class="line">val = Ogre::Math::Clamp(val, (Ogre::Real)<span class="number">0</span>, (Ogre::Real)<span class="number">1</span>);</span><br><span class="line">*pBlend0++ = val;</span><br><span class="line"></span><br><span class="line">val = (height - minHeight1) / fadeDist1;</span><br><span class="line">val = Ogre::Math::Clamp(val, (Ogre::Real)<span class="number">0</span>, (Ogre::Real)<span class="number">1</span>);</span><br><span class="line">*pBlend1++ = val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blendMap0-&gt;dirty();</span><br><span class="line">blendMap1-&gt;dirty();</span><br><span class="line">blendMap0-&gt;update();</span><br><span class="line">blendMap1-&gt;update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_Terrain_Result.jpg" alt="Ogre地形"></p><h2 id="天空"><a href="#天空" class="headerlink" title="天空"></a>天空</h2><p>Ogre提供了三种类型的天空：天空盒，天空穹和天空面。</p><h3 id="SkyBoxs——天空盒子"><a href="#SkyBoxs——天空盒子" class="headerlink" title="SkyBoxs——天空盒子"></a>SkyBoxs——天空盒子</h3><p>天空盒实际上是一个立方体，它包含了场景里所有的对象。将下面代码加入<code>createScene</code>方法中，运行可以看到<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSceneMgr-&gt;setSkyBox(<span class="literal">true</span>, <span class="string">"Examples/SpaceSkyBox"</span>, <span class="number">3000</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_Skybox.jpg" alt="Skybox"><br>skybox函数有4个参数，下面分别介绍这4个参数的作用。</p><blockquote><p>第一个参数，代表是否启用天空盒。如果我们想要取消天空盒，那么我们只须调用一句代码mSceneMgr-&gt;setSkyBox( false, “” ); 即可。<br>第二个参数，用来设置天空盒使用的材质脚本。<br>第三个参数，用来设定天空盒与摄像机的距离。<br>第四个参数，决定了天空盒是在其他对象之前渲染还是其他对象之后渲染。  </p></blockquote><h3 id="SkyDomes——天空穹"><a href="#SkyDomes——天空穹" class="headerlink" title="SkyDomes——天空穹"></a>SkyDomes——天空穹</h3><p>天空穹和天空盒非常相似，在Ogre中创建一个天空穹要使用的函数是setSkyDome函数。天空穹也会创建一个包含了场景中所有对象的巨型立方体，但是它与天空盒最大的区别是：天空穹的贴图是用球体的方法投影到立方体上的。所以，天空穹其实还是一个立方体，只不过它的贴图看上去像贴到了一个球体上一样。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSceneMgr-&gt;setSkyDome(<span class="literal">true</span>,<span class="string">"Examples/CloudySky"</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure></p><p>前两个参数跟天空盒一样，第三个参数是天空穹的弯曲程度，OGRE的API中建议使用2到65之间的数值。第四个参数用来设置贴图重复的次数，这个参数需要根据贴图的实际大小来设置，以便让贴图可以适应我们的程序。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_SkyDome.jpg" alt="SkyDomes"></p><h3 id="SkyPlanes——天空面"><a href="#SkyPlanes——天空面" class="headerlink" title="SkyPlanes——天空面"></a>SkyPlanes——天空面</h3><p>天空面与前两种类型的天空（天空盒和天空穹）有很大的区别。天空面使用一个平面来替代立方体，也就是说，我们仅仅把纹理映射到一个简单的面上，而不再映射到一个立方体上。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个平行于xz轴，高度为1000的平面</span></span><br><span class="line">Ogre::Plane plane;</span><br><span class="line">plane.d = <span class="number">1000</span>;</span><br><span class="line">plane.normal = Ogre::Vector3::NEGATIVE_UNIT_Y;</span><br><span class="line"><span class="comment">//创建天空面</span></span><br><span class="line">mSceneMgr-&gt;setSkyPlane(<span class="literal">true</span>, plane, <span class="string">"Examples/SpaceSkyPlane"</span>, <span class="number">1500</span>, <span class="number">75</span>);</span><br></pre></td></tr></table></figure></p><p>第四个参数用来设定天空面的大小，在这里将其设置成为了1500x1500的大小。第五个参数是重复的次数，这里设置的重复次数为75。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_SkyPlane.jpg" alt="天空面"><br>将创建天空面的代码换成<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSceneMgr-&gt;setSkyPlane(<span class="literal">true</span>, plane, <span class="string">"Examples/SpaceSkyPlane"</span>, <span class="number">1500</span>, <span class="number">55</span>, <span class="literal">true</span>, <span class="number">1.5f</span>, <span class="number">160</span>, <span class="number">160</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_SkyPlane_More.jpg" alt="优化设置的天空面"><br>我们就这一行代码来看一下setSkyPlane这个函数每个参数的作用。</p><blockquote><ol><li>第一个参数用来设置是否启用天空面。如果我们想要取消天空盒，那么我们只须调用一句代码mSceneMgr-&gt;setSkyPlane( false, “” ); 即可。</li><li>第三个参数用来设置天空盒使用的材质脚本。</li><li>第四个参数用来设置天空面的大小。</li><li>第五个参数用来设置天空面重复的次数。</li><li>第六个参数用来设置天空面的渲染顺序，它决定了天空面是最先被渲染还是最后被渲染。参数为true表明天空面最先被渲染，参数为false表明天空面最后被渲染。</li><li>第七个参数用来设置天空面的弯曲度，这样一来就可以实现将平面弯曲成弧形的效果了。同时我们还需要设置x和y的线段数量，这是因为天空面是一个巨大的正方形，但是假如我们想将它弯曲那么就要将它切分成许多小正方形，以便我们可以实现弯曲的效果。</li><li>第八个和第九个参数是x和y的线段数量了。因为天空面是一个大的正方形，若要将其弯曲就必须将其变成许多小的正方形，所以要设置x和y方向上的线段数量。  </li></ol></blockquote><h2 id="雾"><a href="#雾" class="headerlink" title="雾"></a>雾</h2><p>在Ogre中，雾有两种，线性的雾和指数的雾。线性雾随着参数的变化“线性的”增加浓度，而指数雾随着参数的变化“指数的”增加浓度。在场景中设置雾化效果，实际只是添加一个雾的滤镜而已。<br>在设置地形前先设置视口的背景颜色<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置视口的背景颜色</span></span><br><span class="line">Ogre::<span class="function">ColourValue <span class="title">fadeColour</span><span class="params">(<span class="number">0.9</span>, <span class="number">0.9</span>, <span class="number">0.9</span>)</span></span>;</span><br><span class="line">mWindow-&gt;getViewport(<span class="number">0</span>)-&gt;setBackgroundColour(fadeColour);</span><br></pre></td></tr></table></figure></p><h3 id="雾的类型"><a href="#雾的类型" class="headerlink" title="雾的类型"></a>雾的类型</h3><p>Tips:代码放在设置地形前<br><strong>线性雾</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置雾的效果,线性雾</span></span><br><span class="line">mSceneMgr-&gt;setFog(Ogre::FOG_LINEAR, fadeColour, <span class="number">0</span>, <span class="number">60</span>, <span class="number">900</span>);</span><br></pre></td></tr></table></figure></p><p>第一个参数用来设置雾的类型，类型有两种：线性的或是指数的。第二个参数用来设置雾的颜色。第三个参数在线性雾里面是不用设置的。第四个和第五个参数是设置雾慢慢变浓的范围。这个慢慢变浓的范围如何理解呢？例如我们这里设置的变浓范围是60到900，这就意味着在摄像机的0到60的单位内是没有雾的，从60到900的单位内雾慢慢线性变浓，在900单位以外就全是雾了。</p><p><strong>指数雾之一</strong><br>通过第三个参数“雾的密度”来设置雾的浓度，第四和第五不需要设置<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSceneMgr-&gt;setFog(Ogre::FOG_EXP, fadeColour, <span class="number">0.002</span>);</span><br></pre></td></tr></table></figure></p><p><strong>指数雾之二</strong><br>这种指数雾，离摄像机越远它的浓度越强<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSceneMgr-&gt;setFog(Ogre::FOG_EXP2, fadeColour, <span class="number">0.002</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_Fog.jpg" alt="雾"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这章学的不轻松，很多三维建模中的知识都不清楚，以后要找机会补习一下三维建模的知识。</p><p><embed src="http://www.xiami.com/widget/0_1769955568/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>参考文章：<br>1、<a href="http://blog.csdn.net/zhanghua1816/article/details/18195357" target="_blank" rel="noopener">【Ogre编程入门与进阶】第八章 地形、天空与雾化效果</a><br>2、<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+3&amp;structure=Tutorials" target="_blank" rel="noopener">官方基础教程3</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ogre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ogre三维框架基础篇（一）</title>
      <link href="/2015/02/08/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2015/02/08/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Ogre场景示例"><a href="#Ogre场景示例" class="headerlink" title="Ogre场景示例"></a>Ogre场景示例</h2><h3 id="SceneManager"><a href="#SceneManager" class="headerlink" title="SceneManager"></a>SceneManager</h3><p>在写代码前要先明白一些概念。首先是<strong>SceneManager</strong>，我称之为场景管理器。它是管理所有出现在屏幕上的东西，比如模型，比如光源，比如摄像头。场景管理器也有不同的类型，具体的类型可以查看这里<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=SceneManagersFAQ" target="_blank" rel="noopener">SceneManagers FAQ</a> .<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_SceneManager.png" alt="SceneManager">  </p><h3 id="SceneNode"><a href="#SceneNode" class="headerlink" title="SceneNode"></a>SceneNode</h3><p><strong>SceneNode</strong>保存着与之相连的模型信息，一个模型只有与<strong>SceneNode</strong>绑定后才能被渲染出来。相对的，<strong>SceneNode</strong>没有对象与之绑定的话也是无法在屏幕上渲染出来的。<strong>SceneNode</strong>携带一些比如位置，缩放，旋转等信息用于对绑定对象进行简单的处理。<br><strong>SceneNode</strong>作为一个节点存在在整个节点树中，所有节点组成一棵庞大的树，我们可以不断向树里面添加节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mSceneMgr-&gt;getRootSceneNode()<span class="comment">//获得根节点</span></span><br><span class="line">mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(<span class="string">"Node"</span>);<span class="comment">//在根节点上生成一个新的子节点，并赋予姓名“Node”.</span></span><br></pre></td></tr></table></figure></p><p>还有一点是节点与其父节点关系是相对的。<br>比如说现在RootNode坐标为（0,0,0），Node1作为RootNode的子节点坐标为（0,0,0），Node2作为Node1的子节点坐标为（10,20,30）。现在将Node1的坐标改为（10,10,10），则Node2的坐标也会相应的变为（20,30,40）。  </p><h3 id="场景代码"><a href="#场景代码" class="headerlink" title="场景代码"></a>场景代码</h3><p>在createScene方法中加入以下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建视图-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createScene(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// create your scene here :)</span></span><br><span class="line"><span class="comment">// Set the scene's ambient light 设置环境光源的亮度 默认为0不可见，故一定要加上这句</span></span><br><span class="line">mSceneMgr-&gt;setAmbientLight(Ogre::ColourValue(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>));</span><br><span class="line"><span class="comment">//移动摄像头的位置</span></span><br><span class="line">mCamera-&gt;setPosition(<span class="number">0</span>, <span class="number">47</span>, <span class="number">222</span>);</span><br><span class="line"><span class="comment">//生成模型</span></span><br><span class="line">Ogre::Entity* ogreEntity = mSceneMgr-&gt;createEntity(<span class="string">"MyEntity"</span>, <span class="string">"ogrehead.mesh"</span>);</span><br><span class="line"><span class="comment">//创建子场景结点并加入结点树中</span></span><br><span class="line">Ogre::SceneNode* node = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(<span class="string">"Node1"</span>);</span><br><span class="line"><span class="comment">//设置结点位置</span></span><br><span class="line"><span class="comment">//node-&gt;setPosition(10,0,0);</span></span><br><span class="line"><span class="comment">//将模型与场景结点绑定使其可见</span></span><br><span class="line">node-&gt;attachObject(ogreEntity);</span><br><span class="line"><span class="comment">//建立点光源，位置为20,80,50</span></span><br><span class="line">Ogre::Light* light = mSceneMgr-&gt;createLight(<span class="string">"MainLight"</span>);</span><br><span class="line">light-&gt;setPosition(<span class="number">20.0f</span>, <span class="number">80.0f</span>, <span class="number">50.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在建立第二个模型，使用构造函数直接指定坐标</span></span><br><span class="line">Ogre::Entity* ogreEntity2 = mSceneMgr-&gt;createEntity(<span class="string">"SecondEntity"</span>,<span class="string">"ogrehead.mesh"</span>);</span><br><span class="line">Ogre::SceneNode* node2 = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode(<span class="string">"Node2"</span>,Ogre::Vector3(<span class="number">84</span>,<span class="number">48</span>,<span class="number">0</span>));</span><br><span class="line">node2-&gt;attachObject(ogreEntity2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立第三个模型，用于缩放</span></span><br><span class="line">Ogre::Entity* ogreEntity3 = mSceneMgr-&gt;createEntity(<span class="string">"ogrehead.mesh"</span>);</span><br><span class="line">Ogre::SceneNode* ogreNode3 = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode();</span><br><span class="line">ogreNode3-&gt;setPosition(<span class="number">0</span>, <span class="number">104</span>, <span class="number">0</span>);</span><br><span class="line">ogreNode3-&gt;setScale(<span class="number">2</span>, <span class="number">1.2</span>, <span class="number">1</span>); <span class="comment">//x轴上放大为普通的两倍，y轴1.2倍，z轴不变</span></span><br><span class="line">ogreNode3-&gt;attachObject(ogreEntity3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立第四个模型，用于旋转</span></span><br><span class="line">Ogre::Entity* ogreEntity4 = mSceneMgr-&gt;createEntity(<span class="string">"ogrehead.mesh"</span>);</span><br><span class="line">Ogre::SceneNode* ogreNode4 = mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode();</span><br><span class="line">ogreNode4-&gt;setPosition(<span class="number">-84</span>, <span class="number">48</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//基于正方向，顺时针</span></span><br><span class="line">ogreNode4-&gt;roll(Ogre::Degree(<span class="number">-90</span>));<span class="comment">//逆时针90度</span></span><br><span class="line">ogreNode4-&gt;attachObject(ogreEntity4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_SceneResult.png" alt="运行截图"></p><h3 id="XYZ坐标-amp-缩放"><a href="#XYZ坐标-amp-缩放" class="headerlink" title="XYZ坐标&amp;缩放"></a>XYZ坐标&amp;缩放</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_XYZ轴.png" alt="XYZ坐标"><br>如图所示，基本上所有的三维编程都是基于这个标准设定三维空间。</p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_旋转.png" alt="旋转"><br>想象自己作为原点，向各轴正方向看去，以顺时针为正方向，逆时针为负方向。</p><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p><code>plugins.cfg</code>是加载插件的配置文件。<br><code>resources.cfg</code>是加载资源文件的配置文件。<br><code>ogre.cfg</code>是整个Ogre系统的配置文件。<br>它们存在于<code>../bin/debug or release</code> 文件夹下。<br>详细的内容在<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+1&amp;structure=Tutorials" target="_blank" rel="noopener">官方WIKI</a>上。  </p><h2 id="Ogre的显示"><a href="#Ogre的显示" class="headerlink" title="Ogre的显示"></a>Ogre的显示</h2><h3 id="Camera——Ogre摄像头"><a href="#Camera——Ogre摄像头" class="headerlink" title="Camera——Ogre摄像头"></a>Camera——Ogre摄像头</h3><p>在<code>BaseApplication</code>中的<code>createCamera()</code>就是创建摄像头，现在我们在<code>TutorialApplication</code>类中重写<code>createCamera()</code>方法。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.h中加入</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createCamera</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.cpp中加入</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createCamera()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>createCamera</strong>中的代码,其中<a href="www.ogre3d.org/tikiwiki/tiki-index.php?page=SdkCameraMan">SDKCameraMan</a>用于控制摄像头<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建摄像头--------------------</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createCamera(<span class="keyword">void</span>)&#123;</span><br><span class="line"><span class="comment">//创建一个名为“PlayerCam”的摄像头</span></span><br><span class="line">mCamera = mSceneMgr-&gt;createCamera(<span class="string">"PlayerCam"</span>);</span><br><span class="line"><span class="comment">//设定摄像头位置</span></span><br><span class="line">mCamera-&gt;setPosition(Ogre::Vector3(<span class="number">0</span>, <span class="number">300</span>, <span class="number">500</span>));</span><br><span class="line"><span class="comment">//摄像头朝向</span></span><br><span class="line">mCamera-&gt;lookAt(Ogre::Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">//盲区为5，即是说在5单位里面的mesh都将不会被渲染</span></span><br><span class="line">mCamera-&gt;setNearClipDistance(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//SDKCameraMan是一个摄像头控制器</span></span><br><span class="line">mCameraMan = <span class="keyword">new</span> OgreBites::SdkCameraMan(mCamera);</span><br><span class="line"><span class="comment">//以上这些变量都是在BaseApplication中定义，同样也在其析构函数中释放变量的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Viewports——视图监视器"><a href="#Viewports——视图监视器" class="headerlink" title="Viewports——视图监视器"></a>Viewports——视图监视器</h3><p>Viewports是用于处理多摄像头时的情况。可用于分屏和迷你地图。一个Viewport是对一个Camera所拍摄到的场景的反映，所以一个Viewport只能绑定一个Camera。而一个Camera所拍摄到的场景可以通过多个Viewport反映到不同的区域，所以一个Camera则可以绑定多个Viewport。一个Camera同时只可以拍摄一个场景，所以一个Camera只可以绑定一个场景。一个场景可以由多个观察者去观察，所以它可以绑定多个Camera。<br>我们打个比方吧，将一个酒店大厅作为一个Scene,它同时被多台监视器监控，那么监视器就是camera，在监控室中，每个监视器反馈到不同的屏幕上，如此一个屏幕就作为一个Viewport，而整个监控室就相当于整个程序的窗口。<br>同样重写<code>BaseApplication</code>中的<code>createViewports()</code>方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.h中加入</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createViewports</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TutorialApplication.cpp中加入</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createViewports()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>createViewports</code>中添加代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建可视区域--------------</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createViewports(<span class="keyword">void</span>)&#123;</span><br><span class="line"><span class="comment">//一个视图监视器，将其与一个摄像机绑定</span></span><br><span class="line">Ogre::Viewport* vp = mWindow-&gt;addViewport(mCamera);</span><br><span class="line"><span class="comment">//设置背景颜色为黑</span></span><br><span class="line">vp-&gt;setBackgroundColour(Ogre::ColourValue(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//窗口的纵横比，使其与Camera的宽高比相同</span></span><br><span class="line">mCamera-&gt;setAspectRatio(</span><br><span class="line">Ogre::Real(vp-&gt;getActualWidth()) / Ogre::Real(vp-&gt;getActualHeight()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建一个Plane模型"><a href="#创建一个Plane模型" class="headerlink" title="创建一个Plane模型"></a>创建一个Plane模型</h3><p>我们现在要做的是不通过导入mesh数据凭空建一个模型，当然是一个最简单的模型——平面模型，并加上材质贴图。<br>首先，新建一个Plane实例<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ogre::<span class="function">Plane <span class="title">plane</span><span class="params">(Ogre::Vector3::UNIT_Y, <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_plane.png" alt="Plane朝向"><br>然后通过<code>MeshManager</code>来建立一个平面模型。<a href="http://www.ogre3d.org/docs/api/1.9/class_ogre_1_1_mesh_manager.html" target="_blank" rel="noopener">MeshManager</a>是管理所有mesh资源的一个类。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ogre::MeshManager::getSingleton().createPlane(</span><br><span class="line">  <span class="string">"ground"</span>,</span><br><span class="line">  Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,</span><br><span class="line">  plane, </span><br><span class="line">  <span class="number">1500</span>, <span class="number">1500</span>, <span class="number">20</span>, <span class="number">20</span>, </span><br><span class="line">  <span class="literal">true</span>, </span><br><span class="line">  <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, </span><br><span class="line">  Ogre::Vector3::UNIT_Z);</span><br></pre></td></tr></table></figure></p><p>其中各个参数的含义<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">OgreMeshManager.h 中定义：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Mesh * Ogre::MeshManager::createPlane ( </span></span><br><span class="line"><span class="comment">const String &amp; name, // 平面模型的名称 　　</span></span><br><span class="line"><span class="comment">const Plane &amp; plane, // 所使用的平面定义的名称 　　</span></span><br><span class="line"><span class="comment">Real width, // 平面宽度 (X 方向) 　　</span></span><br><span class="line"><span class="comment">Real height, // 平面高度 (Y 方向) 　　</span></span><br><span class="line"><span class="comment">int xsegments = 1, // X 方向分割数目 　　</span></span><br><span class="line"><span class="comment">int ysegments = 1, // Y 方向分割数目 　　</span></span><br><span class="line"><span class="comment">bool normals = true, // 是否创建垂直于平面的法线 　　</span></span><br><span class="line"><span class="comment">int numTexCoordSets = 1, // 纹理坐标集的数目(也就是多层纹理的层数) 　　</span></span><br><span class="line"><span class="comment">Real uTile = 1.0f, // U 方向纹理铺嵌行数 　　</span></span><br><span class="line"><span class="comment">Real vTile = 1.0f, // V 方向纹理铺嵌行数 　　</span></span><br><span class="line"><span class="comment">const Vector3 &amp; upVector = Vector3::UNIT_Y, 　　// 上方向法线，指示平面的正面朝向 　　</span></span><br><span class="line"><span class="comment">HardwareBuffer::Usage vertexBufferUsage = HardwareBuffer::HBU_STATIC_WRITE_ONLY,  // 顶点缓存用途 　　</span></span><br><span class="line"><span class="comment">HardwareBuffer::Usage indexBufferUsage = HardwareBuffer::HBU_STATIC_WRITE_ONLY, 　　// 索引缓存用途 　　</span></span><br><span class="line"><span class="comment">bool vertexShadowBuffer = true, // 顶点阴影缓存 　　</span></span><br><span class="line"><span class="comment">bool indexShadowBuffer = true // 索引阴影缓存 　</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>最后通过mSceneMgr来调用<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置平面模型的材质</span></span><br><span class="line">groundEntity-&gt;setMaterialName(<span class="string">"Examples/Rockwall"</span>);</span><br><span class="line">Ogre::Entity* groundEntity = mSceneMgr-&gt;createEntity(<span class="string">"ground"</span>);</span><br><span class="line">mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode()-&gt;attachObject(groundEntity);</span><br></pre></td></tr></table></figure></p><h3 id="灯光-amp-投影"><a href="#灯光-amp-投影" class="headerlink" title="灯光&amp;投影"></a>灯光&amp;投影</h3><p>灯光在Ogre中可以分为三种类型</p><blockquote><p>Ogre::Light::LT_POINT - 点光源，类似于电灯泡<br>Ogre::Light::LT_SPOTLIGHT - 投射光源，类似于手电筒<br>Ogre::Light::LT_DIRECTIONAL - 平行光源，类似与太阳光  </p></blockquote><p>三种类型光源的调用代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阴影投射技术</span></span><br><span class="line">mSceneMgr-&gt;setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_ADDITIVE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//光柱</span></span><br><span class="line">Ogre::Light* spotLight = mSceneMgr-&gt;createLight(<span class="string">"SpotLight"</span>);</span><br><span class="line"><span class="comment">//漫反射</span></span><br><span class="line">spotLight-&gt;setDiffuseColour(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="comment">//镜面反射</span></span><br><span class="line">spotLight-&gt;setSpecularColour(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="comment">//设置光源的类型为光柱（类似手电筒的投射光）</span></span><br><span class="line">spotLight-&gt;setType(Ogre::Light::LT_SPOTLIGHT);</span><br><span class="line"><span class="comment">//灯光投射方向，此处为x,y轴45度方向处。</span></span><br><span class="line">spotLight-&gt;setDirection(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//灯光位置</span></span><br><span class="line">spotLight-&gt;setPosition(Ogre::Vector3(<span class="number">200</span>, <span class="number">200</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">Ogre::Light* directionalLight = mSceneMgr-&gt;createLight(<span class="string">"DirectionalLight"</span>);</span><br><span class="line"><span class="comment">//设置灯光类型为平行光</span></span><br><span class="line">directionalLight-&gt;setType(Ogre::Light::LT_DIRECTIONAL);</span><br><span class="line">directionalLight-&gt;setDiffuseColour(Ogre::ColourValue(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">directionalLight-&gt;setSpecularColour(Ogre::ColourValue(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">directionalLight-&gt;setDirection(Ogre::Vector3(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">Ogre::Light* pointLight = mSceneMgr-&gt;createLight(<span class="string">"PointLight"</span>);</span><br><span class="line"><span class="comment">//设置灯光类型为点光源</span></span><br><span class="line">pointLight-&gt;setType(Ogre::Light::LT_POINT);</span><br><span class="line">pointLight-&gt;setDiffuseColour(<span class="number">.3</span>, <span class="number">.3</span>, <span class="number">.3</span>);</span><br><span class="line">pointLight-&gt;setSpecularColour(<span class="number">.3</span>, <span class="number">.3</span>, <span class="number">.3</span>);</span><br><span class="line">pointLight-&gt;setPosition(Ogre::Vector3(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>));</span><br></pre></td></tr></table></figure></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>在<code>createScene()</code>中的完整代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建视图-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">void</span> TutorialApplication::createScene(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// create your scene here :)</span></span><br><span class="line">Ogre::Entity* ninjaEntity = mSceneMgr-&gt;createEntity(<span class="string">"ninja.mesh"</span>);</span><br><span class="line"><span class="comment">//打开实物投影</span></span><br><span class="line">ninjaEntity-&gt;setCastShadows(<span class="literal">true</span>);</span><br><span class="line">mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode()-&gt;attachObject(ninjaEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个平台实例，y轴为0,铺满x和z轴</span></span><br><span class="line">Ogre::<span class="function">Plane <span class="title">plane</span><span class="params">(Ogre::Vector3::UNIT_Y, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="comment">//Mesh管理器，用于mesh模型资源的管理器</span></span><br><span class="line"><span class="comment">//createPlane方法用于建立一个平面</span></span><br><span class="line">Ogre::MeshManager::getSingleton().createPlane(</span><br><span class="line"><span class="string">"ground"</span>,</span><br><span class="line">Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,</span><br><span class="line">plane, </span><br><span class="line"><span class="number">1500</span>, <span class="number">1500</span>, <span class="number">20</span>, <span class="number">20</span>, </span><br><span class="line"><span class="literal">true</span>, </span><br><span class="line"><span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, </span><br><span class="line">Ogre::Vector3::UNIT_Z);</span><br><span class="line"></span><br><span class="line">Ogre::Entity* groundEntity = mSceneMgr-&gt;createEntity(<span class="string">"ground"</span>);</span><br><span class="line">mSceneMgr-&gt;getRootSceneNode()-&gt;createChildSceneNode()-&gt;attachObject(groundEntity);</span><br><span class="line">groundEntity-&gt;setCastShadows(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置平面模型的材质</span></span><br><span class="line">groundEntity-&gt;setMaterialName(<span class="string">"Examples/Rockwall"</span>);</span><br><span class="line"></span><br><span class="line">mSceneMgr-&gt;setAmbientLight(Ogre::ColourValue(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//阴影投射技术</span></span><br><span class="line">mSceneMgr-&gt;setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_ADDITIVE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//光柱</span></span><br><span class="line">Ogre::Light* spotLight = mSceneMgr-&gt;createLight(<span class="string">"SpotLight"</span>);</span><br><span class="line"><span class="comment">//漫反射</span></span><br><span class="line">spotLight-&gt;setDiffuseColour(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="comment">//镜面反射</span></span><br><span class="line">spotLight-&gt;setSpecularColour(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="comment">//设置光源的类型为光柱（类似手电筒的投射光）</span></span><br><span class="line">spotLight-&gt;setType(Ogre::Light::LT_SPOTLIGHT);</span><br><span class="line"><span class="comment">//灯光投射方向，此处为x,y轴45度方向处。</span></span><br><span class="line">spotLight-&gt;setDirection(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//灯光位置</span></span><br><span class="line">spotLight-&gt;setPosition(Ogre::Vector3(<span class="number">200</span>, <span class="number">200</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">Ogre::Light* directionalLight = mSceneMgr-&gt;createLight(<span class="string">"DirectionalLight"</span>);</span><br><span class="line"><span class="comment">//设置灯光类型为平行光</span></span><br><span class="line">directionalLight-&gt;setType(Ogre::Light::LT_DIRECTIONAL);</span><br><span class="line">directionalLight-&gt;setDiffuseColour(Ogre::ColourValue(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">directionalLight-&gt;setSpecularColour(Ogre::ColourValue(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">directionalLight-&gt;setDirection(Ogre::Vector3(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">Ogre::Light* pointLight = mSceneMgr-&gt;createLight(<span class="string">"PointLight"</span>);</span><br><span class="line"><span class="comment">//设置灯光类型为点光源</span></span><br><span class="line">pointLight-&gt;setType(Ogre::Light::LT_POINT);</span><br><span class="line">pointLight-&gt;setDiffuseColour(<span class="number">.3</span>, <span class="number">.3</span>, <span class="number">.3</span>);</span><br><span class="line">pointLight-&gt;setSpecularColour(<span class="number">.3</span>, <span class="number">.3</span>, <span class="number">.3</span>);</span><br><span class="line">pointLight-&gt;setPosition(Ogre::Vector3(<span class="number">0</span>, <span class="number">150</span>, <span class="number">250</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_LightResult.png" alt="运行结果"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Ogre基础的场景，摄像头和灯源显示的部分就到此为止了。  </p><p><embed src="http://www.xiami.com/widget/0_1770417397/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>详情的可以查看<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+1" target="_blank" rel="noopener">Ogre wiki的基础教程1</a>和<a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+2" target="_blank" rel="noopener">Ogre wiki的基础教程2</a>部分。</p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ogre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ogre三维框架安装篇</title>
      <link href="/2015/02/08/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E7%AF%87/"/>
      <url>/2015/02/08/Ogre%E4%B8%89%E7%BB%B4%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="1、VS2010或者VS2012或以上版本"><a href="#1、VS2010或者VS2012或以上版本" class="headerlink" title="1、VS2010或者VS2012或以上版本"></a>1、VS2010或者VS2012或以上版本</h3><p>本人使用的为VS2010。(请保证VS2010 service pack 1的安装)</p><h3 id="2、下载SDK"><a href="#2、下载SDK" class="headerlink" title="2、下载SDK"></a>2、下载SDK</h3><p><a href="http://www.ogre3d.org/download/sdk" target="_blank" rel="noopener">OGRE下载地址</a> ,在下载列表中选择符合自己条件的SDK下载。</p><h3 id="3、SDK解压并配置环境变量"><a href="#3、SDK解压并配置环境变量" class="headerlink" title="3、SDK解压并配置环境变量"></a>3、SDK解压并配置环境变量</h3><p>将SDK解压到任意的文件夹下，如：我将其放在F盘下<code>F:\OgreSDK_vc10_v1-9-0</code><br>配置“OGRE_HOME”的环境变量为<code>F:\OgreSDK_vc10_v1-9-0</code></p><h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><h3 id="1、新建一个项目"><a href="#1、新建一个项目" class="headerlink" title="1、新建一个项目"></a>1、新建一个项目</h3><p>我们刚开始写的ogre程序基本上是win32程序。所以请在VS中建立一个空的Win32项目。<br><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_win32.png" alt="Win32"><br>并从Ogre官网上下载示例文件进行配置。<a href="www.ogre3d.org/tikiwiki/tiki-download_wiki_attachment.php?attId=182&amp;download=y">基本文件</a>  </p><h3 id="2、环境设置"><a href="#2、环境设置" class="headerlink" title="2、环境设置"></a>2、环境设置</h3><p><img src="https://cpacmblog.oss-cn-hangzhou.aliyuncs.com/Ogre_Set.jpg" alt="项目环境配置"><br>1、<strong>配置</strong>中选择<strong>所有配置</strong>。<br>2、<strong>常规</strong>的<strong>字符集</strong>选择<strong>多字节</strong>。<br>3、左侧选中<strong>调试</strong>，在<strong>命令</strong>中填入<code>“$(OGRE_HOME)\Bin\$(Configuration)\$(ProjectName).exe”</code><br>4、<strong>工作目录</strong>中填入<code>“$(OGRE_HOME)\Bin\$(Configuration)”</code><br>5、在C/C++的常规中编辑<strong>附加包含目录</strong><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(OGRE_HOME)\include</span><br><span class="line">$(OGRE_HOME)\include\OIS</span><br><span class="line">$(OGRE_HOME)\include\OGRE</span><br><span class="line">$(OGRE_HOME)\Samples\Common\include</span><br><span class="line">$(OGRE_HOME)\boost</span><br><span class="line">//<span class="number">1</span>.<span class="number">9</span>的话可以加上</span><br><span class="line">$(OGRE_HOME)\include\OGRE\Overlay</span><br></pre></td></tr></table></figure></p><p>6、链接器的常规中编辑<strong>附加库目录</strong><br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(OGRE_HOME)\<span class="class"><span class="keyword">lib</span>\$(<span class="title">Configuration</span>)</span></span><br><span class="line">$(OGRE_HOME)\boost\<span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure></p><p>7、<strong>生成事件</strong>中的<strong>后期生成事件</strong>编辑命令行<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">copy</span><span class="bash"> <span class="string">"<span class="variable">$(OutDir)</span>\$(TargetFileName)"</span> <span class="string">"<span class="variable">$(OGRE_HOME)</span>\Bin\$(Configuration)"</span></span></span><br></pre></td></tr></table></figure></p><p>8、将配置从所有配置切换到“活动（Debug）”<br>9、找到<strong>链接器</strong>-<strong>输入</strong>-<strong>附加依赖项</strong>添加<br><code>OgreMain_d.lib</code><br><code>OIS_d.lib</code><br>1.9版本则可以多添加<code>OgreOverlay_d.lib</code></p><p>10、切换配置到“Release”<br>11、找到<strong>链接器</strong>-<strong>输入</strong>-<strong>附加依赖项</strong>添加<br><code>OgreMain.lib</code><br><code>OIS.lib</code><br>1.9版本则可以多添加<code>OgreOverlay.lib</code><br><strong>配置到此完成</strong></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文是直接使用OgreSDK的方法，大家也可以直接下载源码然后用cmake编译后再使用，效果与使用SDK一样。环境配置后可以利用VS的模板导出功能将其生成一个自定义的模板，以后就可以不必每新建一个项目就配置一遍环境。（VS2010不支持C++的模板导出，这又是让我一阵郁闷）<br>详细和更多版本教程可以直接去官网看。 <a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Setting+Up+An+Application+-+Visual+Studio" target="_blank" rel="noopener">传送门</a>  </p><p><embed src="http://www.xiami.com/widget/0_1772857609/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br>安装到此结束，至此可以运行官网给出的案例。 <a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Home" target="_blank" rel="noopener">OgreWiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源&amp;框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ogre </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
